<?xml version="1.0" encoding="utf-8"?>
<suportclasses:BasePropertyEditorForm
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:suportclasses="view.suportClasses.*"
        creationComplete="onDivLayoutFormCreationComplete(event)" skinClass="skins.FormSkin">

    <suportclasses:layout>
        <s:FormLayout />
    </suportclasses:layout>

    <s:FormItem label="Direction" skinClass="skins.StackedFormItemSkin">
        <s:Label id="directionInfo"/>
        <s:CheckBox id="wrapContent" label="wrap" change="onWrapContentChange(event)"/>
    </s:FormItem>

    <fx:Script><![CDATA[
		import mx.binding.utils.BindingUtils;
		import mx.binding.utils.ChangeWatcher;
		import mx.events.FlexEvent;

        import utils.MxmlCodeUtils;

        import view.interfaces.IDiv;
		import view.interfaces.ISurfaceComponent;

        private var _selectedItem:ISurfaceComponent;
		private var _bindingDirection:ChangeWatcher;
		private var _bindingWrap:ChangeWatcher;
		private var _bindingVAlign:ChangeWatcher;
		private var _bindingHAlign:ChangeWatcher;

        [Bindable("change")]
        override public function get selectedItem():ISurfaceComponent
        {
            return this._selectedItem;
        }

        override public function set selectedItem(value:ISurfaceComponent):void
        {
            if (this._selectedItem != value && value is IDiv)
            {
                if (value)
                {
                    value.addEventListener("change", onHostChange);
                    this._selectedItem = (value as IDiv).div;
                }
                else
                {
                    _selectedItem.removeEventListener("change", onHostChange);
                    this._selectedItem = value;
                }

                this.callLater(refreshSelection);
                this.dispatchEvent(new Event(Event.CHANGE));
            }
        }

        private function onHostChange(event:Event):void
        {
            if (event.currentTarget is IDiv)
            {
                this._selectedItem = (event.currentTarget as IDiv).div;

                this.callLater(refreshSelection);
                this.dispatchEvent(new Event(Event.CHANGE));
            }
        }

        private function refreshSelection():void
        {
            if (!this.selectedItem) return;

            this.wrapContent.selected = this.selectedItem["wrap"];
            this.directionInfo.text = MxmlCodeUtils.getInfoContainerDirection(this.selectedItem);

			updateBinding();
        }

        private function onWrapContentChange(event:Event):void
        {
            this.selectedItem["wrap"] = wrapContent.selected;
        }
		
		private function updateBinding():void
		{
			if (this._bindingDirection)
			{
				this._bindingDirection.unwatch();
				this._bindingWrap.unwatch();
				this._bindingHAlign.unwatch();
				this._bindingVAlign.unwatch();
				
				this._bindingDirection = this._bindingWrap = this._bindingHAlign = this._bindingVAlign = null;
			}
			if (this.selectedItem === null)
			{
				return;
			}

			this._bindingWrap = BindingUtils.bindSetter(onWrapUpdated, selectedItem, "wrap", false, true);
		}

		private function onWrapUpdated(value:Object):void
		{
			if (wrapContent) this.wrapContent.selected = value;
		}

        protected function onDivLayoutFormCreationComplete(event:FlexEvent):void
        {
            this.callLater(refreshSelection);

            _childrenForFocus = [];
            _childrenForFocus.push(wrapContent);
        }

        ]]></fx:Script>
</suportclasses:BasePropertyEditorForm>
