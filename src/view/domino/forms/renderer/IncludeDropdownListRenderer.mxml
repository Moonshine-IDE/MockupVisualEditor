<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark"
				autoDrawBackground="true" minHeight="22"
				creationComplete="onCreationCompletes(event)" removedFromStage="onRemoved(event)">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ToolTipEvent;
			
			import utils.MoonshineBridgeUtils;
			
			private var isTooltip:Boolean;
			
			override public function set data(value:Object):void
			{
				if (value)
				{
					super.data = value;
					if (isTooltip) labelDisplay.toolTip = data.resourcePathWithoutRoot;
				}
			}
			
			protected function onCreationCompletes(event:FlexEvent):void
			{
				// lets not add tooltip when list has no horizontal scroll
				if(this.owner&& MoonshineBridgeUtils.moonshineBridge){
					if (this.width > this.owner.width)
					{
						labelDisplay.addEventListener(ToolTipEvent.TOOL_TIP_CREATE, MoonshineBridgeUtils.moonshineBridge.getCustomTooltipFunction(), false, 0, true);
						labelDisplay.addEventListener(ToolTipEvent.TOOL_TIP_SHOW, MoonshineBridgeUtils.moonshineBridge.getPositionTooltipFunction(), false, 0, true);
						isTooltip = true;
					}
				}
			}
			
			protected function onRemoved(event:Event):void
			{
				if (isTooltip)
				{
					labelDisplay.removeEventListener(ToolTipEvent.TOOL_TIP_CREATE, MoonshineBridgeUtils.moonshineBridge.getCustomTooltipFunction());
					labelDisplay.removeEventListener(ToolTipEvent.TOOL_TIP_SHOW, MoonshineBridgeUtils.moonshineBridge.getPositionTooltipFunction());
					isTooltip = false;
				}
			}
			protected function onChange(event:Event):void
            {
                 data.selected = multipleOptionValue.selected;
            }
			
		]]>
	</fx:Script>
	<s:CheckBox id="multipleOptionValue" selected="{data.selected}" change="onChange(event)"  />
	<s:Label id="labelDisplay"
			 verticalCenter="0" left="24" 
			 maxDisplayedLines="1" mouseChildren="false" mouseFocusEnabled="false"/>
</s:ItemRenderer>