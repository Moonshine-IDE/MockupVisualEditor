<?xml version="1.0" encoding="utf-8"?>
<suportclasses:BasePropertyEditorForm
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:suportclasses="view.suportClasses.*">

    <suportclasses:layout>
        <s:FormLayout horizontalAlign="contentJustify"/>
    </suportclasses:layout>

    <s:FormItem styleName="stackedFormItem" label="{label}">
        <s:List id="itemsList" width="100%" height="100%"
                dragEnabled="true" dragMoveEnabled="true" dropEnabled="true"
                dataProvider="{IDataProviderComponent(selectedItem).dataProvider}"
                itemRenderer="view.flex.propertyEditors.forms.DataProviderItemRenderer"
                change="itemsList_changeHanlder(event)">
            <s:layout>
                <s:VerticalLayout gap="0" horizontalAlign="contentJustify"
                                  requestedRowCount="5" requestedMaxRowCount="5"/>
            </s:layout>
        </s:List>
        <s:Group>
            <s:layout>
                <s:HorizontalLayout/>
            </s:layout>
            <s:Button width="100%" styleName="addDataProviderItemButton" toolTip="Add Item"
                      click="addItemButton_clickHandler(event)"/>
            <s:Button styleName="editDataProviderItemButton" toolTip="Edit Item"
                      enabled="{itemsList.selectedIndex !== -1}"
                      click="editItemButton_clickHandler(event)"/>
            <s:Button styleName="deleteDataProviderItemButton" toolTip="Delete Item"
                      enabled="{itemsList.selectedIndex !== -1}"
                      click="deleteItemButton_clickHandler(event)"/>
        </s:Group>
    </s:FormItem>

    <fx:Script><![CDATA[
        import data.DataProviderListItem;

        import mx.collections.IList;

        import spark.components.DataGroup;
        import spark.events.IndexChangeEvent;

        import view.flex.propertyEditors.forms.DataProviderItemRenderer;

        import view.interfaces.IDataProviderComponent;
        import view.interfaces.ISelectableItemsComponent;

        private var _label:String = "Items";

        [Bindable("labelChange")]
        public function get label():String
        {
            return this._label;
        }

        public function set label(value:String):void
        {
            if (this._label === value)
            {
                return;
            }
            this._label = value;
            this.dispatchEvent(new Event("labelChange"));
        }

        private function editSelectedItem():void
        {
            var item:DataProviderListItem = DataProviderListItem(this.itemsList.selectedItem);
            var group:DataGroup = this.itemsList.dataGroup;
            this.itemsList.ensureIndexIsVisible(this.itemsList.selectedIndex);
            this.itemsList.validateNow();

            var itemCount:int = group.numElements;
            for (var i:int = 0; i < itemCount; i++)
            {
                var itemRenderer:DataProviderItemRenderer = group.getElementAt(i) as DataProviderItemRenderer;
                if (!itemRenderer)
                {
                    continue;
                }
                if (itemRenderer.data === item)
                {
                    itemRenderer.startEditing();
                    break;
                }
            }
        }

        private function addItemButton_clickHandler(event:MouseEvent):void
        {
            var dataProvider:IList = IDataProviderComponent(selectedItem).dataProvider;
            dataProvider.addItem(new DataProviderListItem("New Item"));
            if (selectedItem is ISelectableItemsComponent)
            {
                ISelectableItemsComponent(selectedItem).selectedIndex = dataProvider.length - 1;
            }

            this.itemsList.selectedIndex = dataProvider.length - 1;
            this.itemsList.validateNow();
            this.editSelectedItem();
        }

        private function editItemButton_clickHandler(event:MouseEvent):void
        {
            this.editSelectedItem();
        }

        private function deleteItemButton_clickHandler(event:MouseEvent):void
        {
            var dataProvider:IList = IDataProviderComponent(selectedItem).dataProvider;
            dataProvider.removeItemAt(this.itemsList.selectedIndex);
        }

        private function itemsList_changeHanlder(event:IndexChangeEvent):void
        {
            if (selectedItem is ISelectableItemsComponent)
            {
                ISelectableItemsComponent(selectedItem).selectedIndex = event.newIndex;
            }
        }
        ]]></fx:Script>
</suportclasses:BasePropertyEditorForm>
