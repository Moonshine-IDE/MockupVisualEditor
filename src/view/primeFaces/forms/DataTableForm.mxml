<?xml version="1.0" encoding="utf-8"?>
<suportclasses:BasePropertyEditorForm
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:suportclasses="view.suportClasses.*"
        skinClass="skins.FormSkin"
        creationComplete="onTabFormCreationComplete(event)">
	<fx:Script>
		<![CDATA[
		import mx.binding.utils.BindingUtils;
		import mx.binding.utils.ChangeWatcher;
		import mx.events.DragEvent;
		import mx.events.FlexEvent;
		import mx.utils.ObjectUtil;

		import spark.events.GridItemEditorEvent;

		import data.DataProviderListItem;

		import view.interfaces.IHistorySurfaceComponent;
		import view.interfaces.ISurfaceComponent;
		import view.primeFaces.surfaceComponents.components.DataTable;
		import view.suportClasses.PropertyChangeReferenceCustomHandlerBasic;

		[Bindable]
		public var tableVar:String;

		private var _bindingTableVar:ChangeWatcher;
		private var _label:String = "Columns";

		[Bindable("labelChange")]
		public function get label():String
		{
			return this._label;
		}

		public function set label(value:String):void
		{
			if (this._label === value)
			{
				return;
			}
			this._label = value;
			this.dispatchEvent(new Event("labelChange"));
		}

		private function editSelectedItem():void
		{
			updatePropertyEditorPriorToEdit();

			dgColumns.ensureCellIsVisible(dgColumns.selectedIndex);
			dgColumns.startItemEditorSession(dgColumns.selectedIndex, 0);
		}

		private function updatePropertyEditorPriorToEdit():void
		{
			registerClassAlias("DataProviderListItem", DataProviderListItem);
			var historyObject:Object = {
				object: ObjectUtil.copy(dgColumns.dataProvider[dgColumns.selectedIndex]),
				index: dgColumns.selectedIndex
			};
			(selectedItem as DataTable).propertyChangeFieldReference = new PropertyChangeReferenceCustomHandlerBasic(selectedItem as IHistorySurfaceComponent, "updateItemAt", historyObject);
		}

		private function addItemButton_clickHandler(event:MouseEvent):void
		{
			var listItem:DataProviderListItem = new DataProviderListItem("Title");
			dgColumns.dataProvider.addItem(listItem);

			updateToOwner(false, DataTable.GRID_ITEM_ADD);

			dgColumns.validateNow();
			dgColumns.setSelectedIndex(dgColumns.dataProvider.length - 1);
			callLater(editSelectedItem);
		}

		private function editItemButton_clickHandler(event:MouseEvent):void
		{
			this.editSelectedItem();
		}

		private function deleteItemButton_clickHandler(event:MouseEvent):void
		{
			updateToOwner(false, DataTable.GRID_ITEM_DELETE, dgColumns.selectedIndex);
			dgColumns.dataProvider.removeItemAt(dgColumns.selectedIndex);
		}

		private function onTabFormCreationComplete(event:FlexEvent):void
		{
			updateColumnList();
			updateBinding();

			_childrenForFocus = [];
			_childrenForFocus.push(addDtColumnBtn);
			_childrenForFocus.push(editDtColumnBtn);
			_childrenForFocus.push(deleteDtColumnBtn);
		}

		private function updateColumnList():void
		{
			if (!dgColumns) return;

			var grid:DataTable = (selectedItem as DataTable);
			dgColumns.dataProvider = grid.tableColumnDescriptor;
		}

		private function onTableUpdated(event:Event):void
		{
			updateColumnList();
		}

		private function updateToOwner(isAll:Boolean = false, updateType:String = null, itemIndex:int = -1):void
		{
			var grid:DataTable = (selectedItem as DataTable);
			grid.generateColumns(isAll, updateType, itemIndex);
		}

		private function updateBinding():void
		{
			if (this._bindingTableVar)
			{
				this._bindingTableVar.unwatch();
				this._bindingTableVar = null;
			}
			if (this.selectedItem === null)
			{
				return;
			}
			this._bindingTableVar = BindingUtils.bindSetter(onTableVarUpdated, selectedItem, "tableVar", false, true);
		}

		private function onTableVarUpdated(value:Object):void
		{
			if (selectedItem === null) return;

			tableVar = value.toString();
			(selectedItem as DataTable).tableColumnDescriptor.refresh();
		}

		protected function onRowDragAndDropped(event:DragEvent):void
		{
			dgColumns.callLater(updateToOwner, [true]);
		}

		protected function onRowDragStarts(event:DragEvent):void
		{
			dgColumns.endItemEditorSession();
		}

		protected function onRowEditEnd(event:GridItemEditorEvent):void
		{
			updateToOwner(false, DataTable.GRID_ITEM_EDIT, dgColumns.selectedIndex);
		}

		private function formattedValue(item:Object, column:GridColumn):String
		{
			return (item.value ? "#{" + tableVar + "." + item.value + "}" : "#{" + tableVar + ".}");
		}

		override public function set selectedItem(value:ISurfaceComponent):void
		{
			if (selectedItem) selectedItem.removeEventListener(DataTable.EVENT_CHILDREN_UPDATED, onTableUpdated);
			
			super.selectedItem = value;
			if (value) selectedItem.addEventListener(DataTable.EVENT_CHILDREN_UPDATED, onTableUpdated, false, 0, true);
		}

		protected function onRowEditStarts(event:GridItemEditorEvent):void
		{
			updatePropertyEditorPriorToEdit();
		}
			
		]]>
	</fx:Script>
	
    <suportclasses:layout>
        <s:FormLayout horizontalAlign="contentJustify"/>
    </suportclasses:layout>

    <s:FormItem label="{label}" skinClass="skins.StackedFormItemSkin" height="100%">
		<s:DataGrid id="dgColumns"
					width="100%" height="100%"
					editable="true" sortableColumns="false" draggableColumns="false"
					dragEnabled="true" dragMoveEnabled="true" dropEnabled="true"
					dragStart="onRowDragStarts(event)" dragDrop="onRowDragAndDropped(event)"
					gridItemEditorSessionSave="onRowEditEnd(event)" gridItemEditorSessionStart="onRowEditStarts(event)">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="label" headerText="Title"/>
					<s:GridColumn dataField="value" headerText="Value" labelFunction="formattedValue"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
        <s:HGroup>
            <s:Button id="addDtColumnBtn" width="100%" styleName="addDataProviderItemButton" toolTip="Add Item"
                      click="addItemButton_clickHandler(event)"/>
            <s:Button id="editDtColumnBtn" styleName="editDataProviderItemButton" toolTip="Edit Item"
                      enabled="{dgColumns.selectedIndex !== -1}"
                      click="editItemButton_clickHandler(event)"/>
            <s:Button id="deleteDtColumnBtn" styleName="deleteDataProviderItemButton" toolTip="Delete Item"
                      enabled="{dgColumns.selectedIndex !== -1 &amp;&amp; dgColumns.dataProvider.length > 1}"
                      click="deleteItemButton_clickHandler(event)"/>
        </s:HGroup>
    </s:FormItem>
</suportclasses:BasePropertyEditorForm>