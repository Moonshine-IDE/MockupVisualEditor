<?xml version="1.0"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<suportclasses:BasePropertyEditorForm xmlns:fx="http://ns.adobe.com/mxml/2009"
                                      xmlns:suportclasses="view.suportClasses.*"
                                      xmlns:s="library://ns.adobe.com/flex/spark" xmlns:components="components.*"
                                      skinClass="skins.FormSkin" creationComplete="onMaskedTextInputFormCreationComplete(event)" xmlns:components1="view.primeFaces.surfaceComponents.components.*">
    <suportclasses:layout>
        <s:FormLayout />
    </suportclasses:layout>

    <s:FormHeading skinClass="skins.FormHeadingSkin" height="0"/>
    <s:FormItem label="{label}" skinClass="skins.StackedFormItemSkin">
        <components1:InputMask id="textInput" showMaskWhileWrite="false"
                                    text="{bindableText}" maskText="{bindableMaskText}" width="100%" minWidth="156"
                                    enter="textInput_changeHandler(event)" focusOut="textInput_changeHandler(event)" skinClass="skins.TextInputSkin"/>
    </s:FormItem>

    <fx:Script><![CDATA[
        import mx.binding.utils.BindingUtils;
        import mx.binding.utils.ChangeWatcher;
        import mx.events.FlexEvent;
        
        import view.interfaces.ISurfaceComponent;

        private var _binding:ChangeWatcher;
        private var _bindingMask:ChangeWatcher;

        [Bindable]
        public var bindableText:String;

        [Bindable]
        public var bindableMaskText:String;

        private var _label:String = "Text";

        [Bindable("labelChange")]
        public function get label():String
        {
            return this._label;
        }

        public function set label(value:String):void
        {
            if (this._label === value)
            {
                return;
            }
            this._label = value;
            this.dispatchEvent(new Event("labelChange"));
        }

        private var _textProperty:String = "text";
        private var _maskProperty:String = "maskText";

        [Bindable("change")]
        public function get textProperty():String
        {
            return this._textProperty;
        }

        public function set textProperty(value:String):void
        {
            if (this._textProperty === value)
            {
                return;
            }
            this._textProperty = value;
            this.updateBinding();
            this.dispatchEvent(new Event(Event.CHANGE));
        }

        [Bindable("change")]
        public function get maskProperty():String
        {
            return this._maskProperty;
        }

        public function set maskProperty(value:String):void
        {
            if (this._maskProperty === value)
            {
                return;
            }
            this._maskProperty = value;
            this.updateBindingMask();
            this.dispatchEvent(new Event(Event.CHANGE));
        }

        override public function set selectedItem(value:ISurfaceComponent):void
        {
            super.selectedItem = value;
            this.updateBinding();
            this.updateBindingMask();
        }

        private function textInput_changeHandler(event:Event):void
        {
			if (!(event.target is InputMask)) return;
			
            if (!(this.textProperty in this.selectedItem))
            {
                this.textInput.errorString = "Field " + this._textProperty + " does not exist";
                return;
            }
            this.textInput.errorString = "";
            this.selectedItem[this._textProperty] = this.textInput.text;
        }

        private function updateBinding():void
        {
            if (this._binding)
            {
                this._binding.unwatch();
                this._binding = null;
            }
            if (this.selectedItem === null)
            {
                return;
            }
            this._binding = BindingUtils.bindProperty(this, "bindableText", this.selectedItem, this._textProperty, true);
        }

        private function updateBindingMask():void
        {
            if (this._bindingMask)
            {
                this._bindingMask.unwatch();
                this._bindingMask = null;
            }
            if (this.selectedItem === null)
            {
                return;
            }
            this._bindingMask = BindingUtils.bindProperty(this, "bindableMaskText", this.selectedItem, this._maskProperty, true);
        }

        private function onMaskedTextInputFormCreationComplete(event:FlexEvent):void
        {
            textInput.prompt = "(999) 999-9999";

            _childrenForFocus = [];
            _childrenForFocus.push(textInput.textDisplay);
        }
        ]]></fx:Script>
</suportclasses:BasePropertyEditorForm>
