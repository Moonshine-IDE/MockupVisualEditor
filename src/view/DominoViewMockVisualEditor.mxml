<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:view="view.*" 
		 xmlns:dataTable="view.primeFaces.surfaceComponents.components.DataTable"
		 creationComplete="onComplete()"
		 xmlns:collapsiblehdivider="components.collapsibleHDivider.*">
    <collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup percentWidth="100" bottom="0" top="0" gap="0" minWidth="250">
		 		<s:DataGrid id="dgColumns"
					width="90%" height="100%" requestedMinRowCount="4"
					editable="true" sortableColumns="false" draggableColumns="true"
					dragEnabled="true" dragMoveEnabled="true" dropEnabled="true"
					dragStart="onRowDragStarts(event)" dragDrop="onRowDragAndDropped(event)"
					dataProvider="{rowsDataProvider}">
                        <s:columns>
                           <s:ArrayList>
								<s:GridColumn dataField="label" headerText="Row number"/>
							</s:ArrayList>
                        </s:columns>
		        </s:DataGrid>
                <s:Group  width="10%"  minWidth="250" minHeight="600" height="100%">
                        <s:VGroup horizontalAlign="left" verticalAlign="top" percentHeight="100" percentWidth="100"
                                    paddingLeft="0" paddingRight="0">
                        <view:PropertyEditorHeader id="propertyEditorHeader" width="100%" />
                    
                            <s:FormItem  skinClass="skins.FormItemSkin" width="100%">
                            
                            
                                <s:Label text="Configuration(View):View Selection" width="100%" direction="rtl"/>
                                <s:TextArea id="viewSelection"
                                text="" width="100%" minWidth="156" editable="true" selectable="true"
                                prompt="View Selection"
                                />
                                <!-- <s:TextInput id="textInput"
                                            text=""  width="100" maxChars="100" 
                                            enter="textInput_changeHandler(event)" focusOut="textInput_changeHandler(event)" skinClass="skins.TextInputSkin" prompt="This is title for the action"/>
                                    -->
                                
                            
                            </s:FormItem> 
                        </s:VGroup>   
                </s:Group>
	</collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup>



<fx:Script><![CDATA[

	import mx.events.FlexEvent;
    import flash.events.Event;
	import mx.events.DragEvent;
    import spark.events.IndexChangeEvent;
	import mx.collections.ArrayList;
	import utils.MoonshineBridgeUtils;

	import flash.filesystem.File;
	import flash.filesystem.FileStream;
	import view.interfaces.IVisualEditorLibraryBridge;
	import spark.components.Alert;

  	[Bindable]
	private var rowsDataProvider:ArrayList = new ArrayList();


	protected function onRowDragStarts(event:DragEvent):void
    {
        dgColumns.endItemEditorSession();
    }

    protected function onRowDragAndDropped(event:DragEvent):void
    {
        dgColumns.callLater(updateToOwner, [true]);
    }

    private function updateToOwner(isAll:Boolean = false, updateType:String = null, itemIndex:int = -1):void
    {
       
    }

	public function onComplete():void {

        propertyEditorHeader.componentName = "Domino View";

		var initalCol:ArrayList = new ArrayList();
		var tmpColumn:GridColumn=new GridColumn();
		tmpColumn.headerText="#"
		tmpColumn.dataField="id"
		tmpColumn.width=30;
		initalCol.addItem(tmpColumn);
		dgColumns.columns=initalCol;
		
    
    }

			

	private var _fileMoonshine:File;
	private var _fileStreamMoonshine:FileStream;

	public function set moonshineBridge(value:IVisualEditorLibraryBridge):void
	{
		MoonshineBridgeUtils.moonshineBridge = value;
	}
	
	public function set visualEditorFilePath(value:String):void
	{
		MoonshineBridgeUtils.currentFilePath = value;
	}

	public function get visualEditorFilePath():String
	{
		return _fileMoonshine.nativePath;
	}

	public function saveEditedFile():void
	{
		if (!_fileStreamMoonshine) return;

		var xml:XML =new XML ("<root/>");
		_fileStreamMoonshine.open(_fileMoonshine, FileMode.WRITE);
		_fileStreamMoonshine.writeUTFBytes(xml.toXMLString());
		_fileStreamMoonshine.close();
	}

	public function loadFile(filePath:String):void
	{
		

		Alert.show("loadFile:"+filePath);
		
		_fileMoonshine = createNewFileIfNotExists(filePath);
		_fileStreamMoonshine = new FileStream();
		_fileStreamMoonshine.open(_fileMoonshine, FileMode.READ);

		var data:String = _fileStreamMoonshine.readUTFBytes(_fileMoonshine.size);
		var xml:XML = new XML(data);

		for each(var col:XML in xml..column) //no matter of depth Note here
		{
		
			var colChilren:XMLList = col.children();
			Alert.show("colChilren:"+colChilren.length());
			if(colChilren.length() > 0)
			{
				var tmpColumn:GridColumn=new GridColumn();
				tmpColumn.headerText=col.columnheader.@title;
				tmpColumn.dataField=col.columnheader.@title;
				dgColumns.columns.addItem(tmpColumn);
			}
		}
		//this.editingSurface.fromXML(xml);

		_fileStreamMoonshine.close();

		

		
	}

	private function createNewFileIfNotExists(filePath:String):File
	{
		var tempFileMoonshine:File = new File(filePath);

		if (!tempFileMoonshine.exists)
		{
			
			var xml:XML = new XML("<root/>");
			var tempFileStreamMoonshine:FileStream = new FileStream();
			tempFileStreamMoonshine.open(tempFileMoonshine, FileMode.WRITE);
			tempFileStreamMoonshine.writeUTFBytes(xml.toXMLString());
			tempFileStreamMoonshine.close();
		}

		return tempFileMoonshine;
	}

			
		

]]></fx:Script> 
</s:Group>         