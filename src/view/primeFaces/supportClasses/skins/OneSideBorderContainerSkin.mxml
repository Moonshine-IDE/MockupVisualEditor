<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark">
	<fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.BorderContainer")]
        ]]>
    </fx:Metadata> 	
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
	</s:states>
	<fx:Script>
	<![CDATA[
		[Bindable]
		private var borderWeight:Number = 1;
		[Bindable]
		private var borderColor:Number; 

		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{	
			this.borderWeight = getStyle("borderWeight");
			this.borderColor = getStyle("borderColor");
			this.backgroundFill.color = getStyle("backgroundColor");
			this.backgroundFill.alpha = getStyle("backgroundAlpha");

			var borderVisible:Boolean = getStyle("borderVisible");
			var borderRightVisible:Boolean = getStyle("borderRightVisible");
			var borderLeftVisible:Boolean = getStyle("borderLeftVisible");
			var borderTopVisible:Boolean = getStyle("borderTopVisible");
			var borderBottomVisible:Boolean = getStyle("borderBottomVisible");

			this.borderRight.visible = this.borderRight.includeInLayout = borderVisible && borderRightVisible;
			this.borderLeft.visible = this.borderLeft.includeInLayout = borderVisible && borderLeftVisible;
			this.borderTop.visible = this.borderTop.includeInLayout = borderVisible && borderTopVisible;
			this.borderBottom.visible = this.borderBottom.includeInLayout = borderVisible && borderBottomVisible;
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
	]]>
</fx:Script>
	<s:Rect id="background" left="{borderWeight}" right="{borderWeight}" top="{borderWeight}" bottom="{borderWeight}">
		<s:fill>
			<s:SolidColor id="backgroundFill" />
		</s:fill>
	</s:Rect>
	<s:Rect id="borderRight" top="0" right="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="{borderColor}" weight="{borderWeight}"/>
		</s:stroke>
	</s:Rect>
	<s:Rect id="borderBottom" left="0" right="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="{borderColor}" weight="{borderWeight}"/>
		</s:stroke>
	</s:Rect>
	<s:Rect id="borderLeft" left="0" top="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="{borderColor}" weight="{borderWeight}"/>
		</s:stroke>
	</s:Rect>
	<s:Rect id="borderTop" left="0" right="0" top="0">
		<s:stroke>
			<s:SolidColorStroke color="{borderColor}" weight="{borderWeight}"/>
		</s:stroke>
	</s:Rect>
	<s:Group id="contentGroup" left="{borderWeight}" right="{borderWeight}" top="{borderWeight}" bottom="{borderWeight}">
	</s:Group>
</s:SparkSkin>