<?xml version="1.0" encoding="utf-8"?>
<suportclasses:BasePropertyEditorForm
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:suportclasses="view.suportClasses.*"
        creationComplete="onDivLayoutFormCreationComplete(event)" skinClass="skins.FormSkin">

    <suportclasses:layout>
        <s:FormLayout />
    </suportclasses:layout>

    <s:FormItem label="Direction" skinClass="skins.StackedFormItemSkin">
        <s:HGroup gap="3" verticalAlign="middle" width="100%">
            <s:DropDownList id="directionDropDownList" width="100%"
                            requireSelection="true" labelField="direction"
                            change="onDrectionChange(event)" enabled="{wrapContent.selected == false}"/>
            <s:CheckBox id="wrapContent" label="wrap" change="onWrapContentChange(event)"/>
        </s:HGroup>
    </s:FormItem>
    <s:FormItem label="Horizontal align" skinClass="skins.StackedFormItemSkin">
        <s:DropDownList id="horizontalDirection" width="100%" requireSelection="true"
                        labelField="horizontalAlign"
                        change="onDrectionChange(event)"/>
    </s:FormItem>
    <s:FormItem label="Vertical align" skinClass="skins.StackedFormItemSkin">
        <s:DropDownList id="verticalDirection" width="100%" requireSelection="true"
                        labelField="verticalAlign" enabled="{wrapContent.selected == false}"
                        change="onDrectionChange(event)"/>
    </s:FormItem>
    <fx:Script><![CDATA[
		import mx.binding.utils.BindingUtils;
		import mx.binding.utils.ChangeWatcher;
		import mx.collections.ArrayList;
		import mx.events.FlexEvent;
		
		import spark.events.IndexChangeEvent;
		import spark.layouts.HorizontalAlign;
		import spark.layouts.VerticalAlign;
		
		import view.interfaces.IDiv;
		import view.interfaces.ISurfaceComponent;
		import view.primeFaces.supportClasses.ContainerDirection;
		import view.primeFaces.supportClasses.ContainerDirectionItem;
		import view.primeFaces.supportClasses.ContainerHorizontalAlignItem;
		import view.primeFaces.supportClasses.ContainerVerticalAlignItem;

        private var verticalTopItem:ContainerVerticalAlignItem;

        private var _selectedItem:ISurfaceComponent;
		private var _bindingDirection:ChangeWatcher;
		private var _bindingWrap:ChangeWatcher;
		private var _bindingVAlign:ChangeWatcher;
		private var _bindingHAlign:ChangeWatcher;

        [Bindable("change")]
        override public function get selectedItem():ISurfaceComponent
        {
            return this._selectedItem;
        }

        override public function set selectedItem(value:ISurfaceComponent):void
        {
            if (this._selectedItem != value && value is IDiv)
            {
                if (value)
                {
                    value.addEventListener("change", onHostChange);
                    this._selectedItem = (value as IDiv).div;
                }
                else
                {
                    _selectedItem.removeEventListener("change", onHostChange);
                    this._selectedItem = value;
                }

                this.callLater(refreshSelection);
                this.dispatchEvent(new Event(Event.CHANGE));
            }
        }

        private function onHostChange(event:Event):void
        {
            if (event.currentTarget is IDiv)
            {
                this._selectedItem = (event.currentTarget as IDiv).div;

                this.callLater(refreshSelection);
                this.dispatchEvent(new Event(Event.CHANGE));
            }
        }

        private function refreshSelection():void
        {
            if (!this.selectedItem) return;

            this.wrapContent.selected = this.selectedItem["wrap"];
            selectCurrentItem(directionDropDownList);
            selectCurrentItem(horizontalDirection);
            selectCurrentItem(verticalDirection);
			
			updateBinding();
        }

        private function selectCurrentItem(dpList:DropDownList):void
        {
            if (this.selectedItem[dpList.labelField] && dpList.dataProvider)
            {
                var dpCount:int = dpList.dataProvider.length;
                for (var i:int = 0; i < dpCount; i++)
                {
                    var item:Object = dpList.dataProvider.getItemAt(i);
                    if (item[dpList.labelField] == this.selectedItem[dpList.labelField])
                    {
                        dpList.selectedItem = item;
                        break;
                    }
                }
            }
        }

        protected function onDrectionChange(event:IndexChangeEvent):void
        {
            var dpList:DropDownList = event.target as DropDownList;
            if (this.selectedItem[dpList.labelField])
            {
                this.selectedItem[dpList.labelField] = dpList.selectedItem[dpList.labelField];
            }
        }

        private function onWrapContentChange(event:Event):void
        {
            if (wrapContent.selected)
            {
                verticalDirection.selectedItem = verticalTopItem;
            }
            this.selectedItem["wrap"] = wrapContent.selected;
        }
		
		private function updateBinding():void
		{
			if (this._bindingDirection)
			{
				this._bindingDirection.unwatch();
				this._bindingWrap.unwatch();
				this._bindingHAlign.unwatch();
				this._bindingVAlign.unwatch();
				
				this._bindingDirection = this._bindingWrap = this._bindingHAlign = this._bindingVAlign = null;
			}
			if (this.selectedItem === null)
			{
				return;
			}
			this._bindingDirection = BindingUtils.bindSetter(onDirectionUpdated, selectedItem, "direction", false, true);
			this._bindingWrap = BindingUtils.bindSetter(onWrapUpdated, selectedItem, "wrap", false, true);
			this._bindingHAlign = BindingUtils.bindSetter(onHAlignUpdated, selectedItem, "horizontalAlign", false, true);
			this._bindingVAlign = BindingUtils.bindSetter(onVAlignUpdated, selectedItem, "verticalAlign", false, true);
		}
		
		private function onDirectionUpdated(value:Object):void
		{
			if (directionDropDownList) selectCurrentItem(directionDropDownList);
		}
		
		private function onHAlignUpdated(value:Object):void
		{
			if (horizontalDirection) selectCurrentItem(horizontalDirection);
		}
		
		private function onVAlignUpdated(value:Object):void
		{
			if (verticalDirection) selectCurrentItem(verticalDirection);
		}
		
		private function onWrapUpdated(value:Object):void
		{
			if (wrapContent) this.wrapContent.selected = value;
		}

        protected function onDivLayoutFormCreationComplete(event:FlexEvent):void
        {
            this.directionDropDownList.dataProvider = new ArrayList([
                new ContainerDirectionItem(ContainerDirection.HORIZONTAL_LAYOUT),
                new ContainerDirectionItem(ContainerDirection.VERTICAL_LAYOUT)
            ]);

            this.horizontalDirection.dataProvider = new ArrayList([
                new ContainerHorizontalAlignItem(HorizontalAlign.LEFT),
                new ContainerHorizontalAlignItem(HorizontalAlign.CENTER),
                new ContainerHorizontalAlignItem(HorizontalAlign.RIGHT)
            ]);

            verticalTopItem = new ContainerVerticalAlignItem(VerticalAlign.TOP);
            this.verticalDirection.dataProvider = new ArrayList([
                verticalTopItem,
                new ContainerVerticalAlignItem(VerticalAlign.MIDDLE),
                new ContainerVerticalAlignItem(VerticalAlign.BOTTOM)
            ])

            this.callLater(refreshSelection);

            _childrenForFocus = [];
            _childrenForFocus.push(directionDropDownList);
            _childrenForFocus.push(wrapContent);
            _childrenForFocus.push(horizontalDirection);
            _childrenForFocus.push(verticalDirection);
        }

        ]]></fx:Script>
</suportclasses:BasePropertyEditorForm>
