<?xml version="1.0" encoding="utf-8"?>
<suportclasses:BasePropertyEditorForm
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:suportclasses="view.suportClasses.*"
        skinClass="skins.FormSkin"
        creationComplete="onTabFormCreationComplete(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			import spark.components.NavigatorContent;
			import spark.containers.Navigator;
			import spark.events.GridItemEditorEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			import components.tabNavigator.TabNavigatorWithOrientation;
			
			import data.DataProviderListItem;
			
			import view.interfaces.ISelectableItemsComponent;
			
			[Bindable]
			private var itemsListDataProvider:ArrayList = new ArrayList();
			
			private var _label:String = "Items";
			
			[Bindable("labelChange")]
			public function get label():String
			{
				return this._label;
			}
			
			public function set label(value:String):void
			{
				if (this._label === value)
				{
					return;
				}
				this._label = value;
				this.dispatchEvent(new Event("labelChange"));
			}
			
			private function editSelectedItem():void
			{
				dgTabs.ensureCellIsVisible(dgTabs.selectedIndex);
				dgTabs.startItemEditorSession(dgTabs.selectedIndex, 0);
			}
			
			private function addItemButton_clickHandler(event:MouseEvent):void
			{
				var navContent:NavigatorContent = new NavigatorContent();
				navContent.label = "Title";
				
				var navigator:Navigator = (selectedItem as Navigator);
				navigator.addElement(navContent);
				var navigatorNumElements:int = navigator.numElements;
				
				var listItem:DataProviderListItem = new DataProviderListItem("Title");
				itemsListDataProvider.addItem(listItem);
				
				if (selectedItem is ISelectableItemsComponent)
				{
					ISelectableItemsComponent(selectedItem).selectedIndex = navigatorNumElements - 1;
				}
				
				dgTabs.validateNow();
				dgTabs.setSelectedIndex(dgTabs.dataProvider.length - 1);
				callLater(editSelectedItem);
			}
			
			private function editItemButton_clickHandler(event:MouseEvent):void
			{
				this.editSelectedItem();
			}
			
			private function deleteItemButton_clickHandler(event:MouseEvent):void
			{
				var deleteIndex:int = dgTabs.selectedIndex;
				
				var navigator:Navigator = (selectedItem as Navigator);
				if (navigator.numElements > 1)
				{
					navigator.removeItemAt(deleteIndex);
					dgTabs.dataProvider.removeItemAt(dgTabs.selectedIndex);
				}
			}
			
			private function itemsList_changeHandler(event:IndexChangeEvent):void
			{
				if (selectedItem is ISelectableItemsComponent)
				{
					ISelectableItemsComponent(selectedItem).selectedIndex = event.newIndex;
				}
			}
			
			private function onTabFormCreationComplete(event:FlexEvent):void
			{
				var navigator:Navigator = (selectedItem as Navigator);
				var navigatorNumElements:int = navigator.numElements;
				
				for (var i:int = 0; i < navigatorNumElements; i++)
				{
					var tabItem:NavigatorContent = navigator.getElementAt(i) as NavigatorContent;
					var listItem:DataProviderListItem = new DataProviderListItem(tabItem.label);
					itemsListDataProvider.addItem(listItem);
				}
				
				dgTabs.dataProvider = itemsListDataProvider;
			}
			
			protected function onItemEditFinished(event:GridItemEditorEvent):void
			{
				var listItem:DataProviderListItem = dgTabs.dataProvider.getItemAt(event.rowIndex) as DataProviderListItem;
				var navigator:TabNavigatorWithOrientation = (selectedItem as TabNavigatorWithOrientation);
				
				navigator.setSelectedTabLabel(listItem.label);
			}
			
			protected function onGridSelectionChanged(event:GridSelectionEvent):void
			{
				if (selectedItem is ISelectableItemsComponent)
				{
					ISelectableItemsComponent(selectedItem).selectedIndex = dgTabs.selectedIndex;
				}
			}
			
		]]>
	</fx:Script>
    <suportclasses:layout>
        <s:FormLayout horizontalAlign="contentJustify"/>
    </suportclasses:layout>

    <s:FormItem label="{label}" skinClass="skins.StackedFormItemSkin" height="100%">
		<s:DataGrid id="dgTabs"
					width="100%" height="100%"
					editable="true" sortableColumns="false" draggableColumns="false"
					initialize="dgTabs.columnHeaderGroup.visible = dgTabs.columnHeaderGroup.includeInLayout = false"
					gridItemEditorSessionSave="onItemEditFinished(event)"
					selectionChange="onGridSelectionChanged(event)"> <!-- one column header with grid doesn't looks great, so we'll keep this as listing only -->
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="label" headerText="Title"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
        <s:HGroup>
            <s:Button width="100%" styleName="addDataProviderItemButton" toolTip="Add Item"
                      click="addItemButton_clickHandler(event)"/>
            <s:Button styleName="editDataProviderItemButton" toolTip="Edit Item"
                      enabled="{dgTabs.selectedIndex !== -1}"
                      click="editItemButton_clickHandler(event)"/>
            <s:Button styleName="deleteDataProviderItemButton" toolTip="Delete Item"
                      enabled="{dgTabs.selectedIndex !== -1 &amp;&amp; dgTabs.dataProvider.length > 1}"
                      click="deleteItemButton_clickHandler(event)"/>
        </s:HGroup>
    </s:FormItem>
</suportclasses:BasePropertyEditorForm>
