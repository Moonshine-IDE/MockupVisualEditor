<?xml version="1.0" encoding="utf-8"?>
<suportclasses:BasePropertyEditorForm
		xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:suportclasses="view.suportClasses.*"
		skinClass="skins.FormSkin" creationComplete="onGridFormCreationComplete(event)">
	<fx:Script>
		<![CDATA[
        import mx.collections.ArrayList;
        import mx.containers.GridItem;
        import mx.containers.GridRow;
        import mx.events.CloseEvent;
        import mx.events.FlexEvent;

        import spark.components.Alert;

        import data.GridListItem;

        import view.interfaces.ISurfaceComponent;
        import view.suportClasses.GridBase;
        import view.primeFaces.supportClasses.GridEvent;
        import view.primeFaces.surfaceComponents.components.Div;
        import view.primeFaces.surfaceComponents.components.Grid;
        import view.domino.surfaceComponents.components.DominoTable;
        import view.suportClasses.PropertyChangeReferenceCustomHandlerBasic;

        [Bindable]
        private var rowsDataProvider:ArrayList = new ArrayList();
        [Bindable]
        private var columnsDataProvider:ArrayList;

        private var selectedCellDirty:Boolean;

        private var _selectedCell:Div;

        [Bindable]
        public function get selectedCell():Div
        {
            return _selectedCell;
        }

        public function set selectedCell(value:Div):void
        {
            if (_selectedCell != value)
            {
                _selectedCell = value;
            }
        }

        [Bindable("change")]
        protected function get selectedGrid():GridBase
        {
            return selectedItem as GridBase;
        }

        override public function set selectedItem(value:ISurfaceComponent):void
        {
            if (selectedItem)
            {
                selectedItem.removeEventListener(DominoTable.EVENT_CHILDREN_UPDATED, onGridUpdated);
                selectedItem.removeEventListener(GridEvent.SELECTED_COLUMN_CHANGED, onSelectedGridChanged);
                selectedItem.removeEventListener(GridEvent.SELECTED_ROW_CHANGED, onSelectedGridChanged);
            }

            if (super.selectedItem != value)
            {
                super.selectedItem = value;
                if (value)
                {
                    selectedItem.addEventListener(DominoTable.EVENT_CHILDREN_UPDATED, onGridUpdated, false, 0, true);
                    selectedItem.addEventListener(GridEvent.SELECTED_COLUMN_CHANGED, onSelectedGridChanged);
                    selectedItem.addEventListener(GridEvent.SELECTED_ROW_CHANGED, onSelectedGridChanged);
                }
            }
        }

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
        {
            super.updateDisplayList(unscaledWidth, unscaledHeight);

            if (this.selectedCellDirty)
            {
                this.selectedCell = this.getSelectedCell();
                this.selectedCellDirty = false;
            }
        }

        private function onGridUpdated(event:Event):void
        {
            onGridFormCreationComplete(null);
        }

        private function addRowButton_clickHandler(event:MouseEvent):void
        {
            var itemValue:int = this.rowsDataProvider.length + 1;
            var rowItem:GridListItem = new GridListItem("R" + String(itemValue), itemValue);
            var columnItem:GridListItem = new GridListItem("C1", 1);

            rowItem.columns.addItem(columnItem);
            this.rowsDataProvider.addItem(rowItem);
            this.columnsDataProvider = rowItem.columns;

            var grid:DominoTable = (selectedItem as DominoTable);
            grid.addRow();

            this.selectedCellDirty = true;
            this.invalidateDisplayList();
        }

        private function addColumnButton_clickHandler(event:MouseEvent):void
        {
            var rowItem:GridListItem = dgRows.selectedItem as GridListItem;
            var colItemValue:int = rowItem.columns.length + 1;
            var colItem:GridListItem = new GridListItem("C" + colItemValue, colItemValue);

            rowItem.columns.addItem(colItem);
            this.columnsDataProvider = rowItem.columns;

            selectedGrid.addColumn(dgRows.selectedIndex);

            this.selectedCellDirty = true;
            this.invalidateDisplayList();
        }

        private function deleteItemButton_clickHandler(event:MouseEvent):void
        {
            if (this.rowsDataProvider.length > 1)
            {
                this.rowsDataProvider.removeItemAt(selectedGrid.selectedRow);
                var grid:DominoTable = (selectedItem as DominoTable);
                grid.removeRow(selectedGrid.selectedRow);

                this.columnsDataProvider = this.rowsDataProvider.getItemAt(selectedGrid.selectedRow).columns;

                // when a row deletes selectedCell suppose to be
                // return to previous cell's 0th index
                this.selectedGrid.selectedColumn = 0;

                this.selectedCellDirty = true;
                this.invalidateDisplayList();

                refreshCellsNumeration(this.rowsDataProvider, "R");
            }
        }

        private function deleteColumnButton_clickHandler(event:MouseEvent):void
        {
            if (!this.columnsDataProvider || this.columnsDataProvider.length < 1) return;

            var rowItem:GridListItem = dgRows.selectedItem as GridListItem;
            if (rowItem.columns.length > selectedGrid.selectedColumn)
            {
                rowItem.columns.removeItemAt(selectedGrid.selectedColumn);
            }

            var grid:DominoTable = (selectedItem as DominoTable);
            grid.removeColumn(selectedGrid.selectedRow, selectedGrid.selectedColumn);

            this.selectedCellDirty = true;
            this.invalidateDisplayList();

            refreshCellsNumeration(this.columnsDataProvider, "C");
        }

        private function onGridFormCreationComplete(event:FlexEvent):void
        {
            dgRows.columnHeaderGroup.visible = dgRows.columnHeaderGroup.includeInLayout = false;

            rowsDataProvider.removeAll();
            var grid:DominoTable = (selectedItem as DominoTable);

            var gridNumElements:int = grid.numElements;
            for (var row:int = 0; row < gridNumElements; row++)
            {
                var itemValue:int = row + 1;
                var rowItem:GridListItem = new GridListItem("R" + itemValue, itemValue);
                var gridItem:GridRow = grid.getElementAt(row) as GridRow;
                for (var col:int = 0; col < gridItem.numElements; col++)
                {
                    itemValue = col + 1;
                    rowItem.columns.addItem(new GridListItem(String("C" + itemValue), itemValue));
                }
                this.rowsDataProvider.addItem(rowItem);
            }

            if (selectedGrid.selectedRow == -1)
            {
                selectedGrid.selectedRow = 0;
            }

            if (selectedGrid.selectedColumn == -1)
            {
                selectedGrid.selectedColumn = 0;
            }

            this.columnsDataProvider = this.rowsDataProvider.getItemAt(selectedGrid.selectedRow).columns;
            this.selectedCell = this.getSelectedCell();

            dispatchEvent(new Event(Event.CHANGE));

            _childrenForFocus = [];
            _childrenForFocus.push(amountOfRows.textDisplay.textDisplay);
            _childrenForFocus.push(amountOfColumns.textDisplay.textDisplay);
            _childrenForFocus.push(createButton);
            _childrenForFocus.push(addRowBtn);
            _childrenForFocus.push(deleteRowBtn);
            _childrenForFocus.push(addColumnBtn);
            _childrenForFocus.push(deleteColumnBtn);
        }

        private function onCreateClick(event:MouseEvent):void
        {
            if (!selectedGrid.isEmpty())
            {
                Alert.show("DominoTable contains some controls. This operation will remove all existing cells. Do you want to perform?",
                        "", Alert.YES | Alert.NO, null, onAlertClose);
            } else
            {
                createCells(amountOfRows.value, amountOfColumns.value);
            }
        }

        private function onAlertClose(event:CloseEvent):void
        {
            if (event.detail == Alert.YES)
            {
                createCells(amountOfRows.value, amountOfColumns.value);
            }
        }

        private function onSelectedGridChanged(event:GridEvent):void
        {
            if (!this.rowsDataProvider || this.rowsDataProvider.length == 0) return;

            if (this.rowsDataProvider.length > event.selectedIndex)
            {
                if (event.type == GridEvent.SELECTED_ROW_CHANGED)
                {
                    var gridListItem:GridListItem = this.dgRows.dataProvider.getItemAt(event.selectedIndex) as GridListItem;
                    this.columnsDataProvider = gridListItem.columns;
                    this.selectedGrid.selectedColumn = 0;
                }

                this.selectedCellDirty = true;
                this.invalidateDisplayList();
            }
        }

        private function createCells(rowsCount:int, columnsCount:int):void
        {
            var grid:DominoTable = (selectedItem as DominoTable);

            grid.removeAllElements();
            rowsDataProvider.removeAll();

            grid.propertyChangeFieldReference = new PropertyChangeReferenceCustomHandlerBasic(grid, "removedAll", []);
            grid.dispatchEvent(new Event("removedAll"));
            grid.isUpdating = true;

            for (var row:int = 0; row < rowsCount; row++)
            {
                var itemValue:int = row + 1;
                var rowItem:GridListItem = new GridListItem("R" + itemValue, itemValue);
                grid.addRow();

                for (var col:int = 0; col < columnsCount; col++)
                {
                    itemValue = col + 1;
                    rowItem.columns.addItem(new GridListItem(String("C" + itemValue), itemValue));
                    if (col > 0)
                    {
                        grid.addColumn(row);
                    }
                }
                this.rowsDataProvider.addItem(rowItem);
            }

            this.columnsDataProvider = this.rowsDataProvider.getItemAt(0).columns;

            grid.selectedRow = grid.selectedColumn = 0;
            this.selectedCell = this.getSelectedCell();
            grid.isUpdating = false;
        }

        private function getSelectedCell():Div
        {
            if (this.selectedGrid.selectedRow == -1 || this.selectedGrid.selectedColumn == -1) return null;
            var gridRow:GridRow = selectedGrid.getElementAt(this.selectedGrid.selectedRow) as GridRow;

            var gridItem:GridItem = gridRow.getElementAt(this.selectedGrid.selectedColumn) as GridItem;

            return gridItem.getElementAt(0) as Div;
        }

        private function refreshCellsNumeration(dp:ArrayList, prefix:String):void
        {
            var dpEnum:int = dp.length;
            for (var i:int = 0; i < dpEnum; i++)
            {
                var colItem:GridListItem = dp.getItemAt(i) as GridListItem;
                var itemValue:int = i + 1;
                colItem.label = String(prefix + itemValue);
            }
        }


        public function get selectedComponentColunmnWidth():String
        {
            var grid:DominoTable = (selectedItem as DominoTable);
            if (grid.columnProperties != null)
            {
                return grid.columnProperties.toString();
            } else
            {
                return ""
            }
        }

        [Bindable("propertyEditorChanged")]
        private function columnWidthInput_keyDownHandler(event:KeyboardEvent):void
        {
            if (event.keyCode === Keyboard.ENTER || event.keyCode == Keyboard.TAB)
            {
                commitWidth();
            }
        }


        private function commitWidth():void
        {
            if (!selectedItem) return;
            this.selectedItem["columnProperties"] = this.columnWidth.text;
        }
        ]]>
	</fx:Script>
    <suportclasses:layout>
        <s:FormLayout horizontalAlign="contentJustify"/>
    </suportclasses:layout>

	<s:FormHeading label="Create Rows X Columns" skinClass="skins.FormHeadingSkin"/>
	<s:FormItem skinClass="skins.StackedFormItemSkin">
		<s:HGroup horizontalAlign="left" verticalAlign="middle" gap="5" paddingTop="-15">
			<s:NumericStepper id="amountOfRows" minimum="1" stepSize="1"/>
			<s:Label text="X" fontWeight="bold"/>
			<s:NumericStepper id="amountOfColumns" minimum="1" stepSize="1"/>
			<s:Button id="createButton" label="Create" height="25"
                      toolTip="Create Rows x Columns at once. It will erase all existing cells from DominoTable."
                      click="onCreateClick(event)"/>
		</s:HGroup>
	</s:FormItem>

	<s:FormHeading label="Custom Rows/Columns" skinClass="skins.FormHeadingSkin"/>
	<s:FormItem label="Rows" skinClass="skins.StackedFormItemSkin">
		<s:DataGrid id="dgRows"
					width="100%" height="130" requestedMinRowCount="4"
					sortableColumns="false" draggableColumns="false"
					dataProvider="{rowsDataProvider}" selectedIndex="@{selectedGrid.selectedRow}">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="label" headerText="Row number"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:HGroup verticalAlign="middle">
			<s:Button id="addRowBtn" width="100%" styleName="addDataProviderItemButton" toolTip="Add Row"
					  click="addRowButton_clickHandler(event)"/>
			<s:Button id="deleteRowBtn" styleName="deleteDataProviderItemButton" toolTip="Delete Item"
					  enabled="{dgRows.selectedIndex !== -1 &amp;&amp; dgRows.dataProvider.length > 1}"
					  click="deleteItemButton_clickHandler(event)"/>
		</s:HGroup>
	</s:FormItem>
	<s:FormItem label="Columns" skinClass="skins.StackedFormItemSkin">
		<s:List id="columnList" width="100%" height="30" labelField="label"
				dataProvider="{columnsDataProvider}"
				selectedIndex="@{selectedGrid.selectedColumn}">
			<s:layout>
				<s:HorizontalLayout gap="2" horizontalAlign="left" verticalAlign="middle"/>
			</s:layout>
		</s:List>
		<s:HGroup verticalAlign="middle">
			<s:Button id="addColumnBtn" width="100%" styleName="addDataProviderItemButton" toolTip="Add Column"
					  click="addColumnButton_clickHandler(event)"/>
			<s:Button id="deleteColumnBtn" styleName="deleteDataProviderItemButton" toolTip="Delete Column"
					  enabled="{columnList.selectedIndex !== -1 &amp;&amp; columnsDataProvider.length > 1}"
					  click="deleteColumnButton_clickHandler(event)"/>
		</s:HGroup>
	</s:FormItem>
	<s:FormItem label="Columns Width" skinClass="skins.StackedFormItemSkin">
			<s:TextInput id="columnWidth" width="100%"
						 text="{selectedComponentColunmnWidth}" skinClass="skins.TextInputSkin"
					     height="25"
						 keyDown="columnWidthInput_keyDownHandler(event)"
						 enabled="true"
						 />
	</s:FormItem>
</suportclasses:BasePropertyEditorForm>
