<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:view="view.*" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:dataTable="view.primeFaces.surfaceComponents.components.DataTable"
		 creationComplete="onComplete()"
		 xmlns:viewProperty="view.domino.propertyEditors.*"
		 xmlns:collapsiblehdivider="components.collapsibleHDivider.*">
    <collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup percentWidth="100" bottom="0" top="0" gap="0" minWidth="250">
		 		<s:DataGrid id="dgColumns"
					width="90%" height="100%" requestedMinRowCount="4"
					editable="true" sortableColumns="false" draggableColumns="true"
					dragEnabled="true" dragMoveEnabled="true" dropEnabled="true"
					dragStart="onRowDragStarts(event)" dragDrop="onRowDragAndDropped(event)"
					dataProvider="{rowsDataProvider}" click="onDataGridClick(event)">
                        <s:columns>
                           <s:ArrayList>
							
							</s:ArrayList>
                        </s:columns>
		        </s:DataGrid>
                <s:Group  width="10%"  minWidth="250" minHeight="600" height="100%">
                        <s:VGroup horizontalAlign="left" verticalAlign="top" percentHeight="100" percentWidth="100"
                                    paddingLeft="0" paddingRight="0" id="dominoViewPropertyEditor">
                        	<view:PropertyEditorHeader id="propertyEditorHeader" width="100%" />
							
							
							<viewProperty:DominoViewPropertyEditor id="viewSetPanel" viewObject="{viewObject}"/>
							<viewProperty:DominoViewColumnPropertyEditor id="columnAccordion" columnObject="{selectedColumnObject}" width="100%"/>
							
							
							
							
					</s:VGroup>		   
                </s:Group>
	</collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup>

	<fx:Metadata>
		[Event(name="change",type="flash.events.Event")]
		[Event(name="propertyEditorChanged",type="view.suportClasses.events.PropertyEditorChangeEvent")]
	
	</fx:Metadata>

<fx:Script><![CDATA[

	import mx.events.FlexEvent;
    import flash.events.Event;
	import mx.events.DragEvent;
    import spark.events.IndexChangeEvent;
	import mx.collections.ArrayList;
	import utils.MoonshineBridgeUtils;
	import view.suportClasses.events.PropertyEditorChangeEvent;

	import view.interfaces.IVisualEditorLibraryBridge;
	import spark.components.Alert;
	import components.renderers.DominoViewEditorHeaderRenderer;

	import view.suportClasses.events.DominoViewColumnClickEvent;

	import flash.ui.ContextMenu;
    import flash.ui.ContextMenuItem;

	import global.domino.DominoGlobals;

	import view.domino.viewEditor.object.ColumnObject;
	import view.domino.viewEditor.object.ViewObject;
	import spark.components.gridClasses.GridColumn;

	import view.suportClasses.events.DominoViewColumnUpdateEvent;

	

	private var viewFileName:String =  "" ;

	private var _hasChanged:Boolean = false;

	private var columnIndex:int = -1;

	private var selectedColumnName:String = "";
	private var selectedColumn:GridColumn = null;
	private var selectedColumnType:String = "";



	private var showColumns:Boolean = false;

	private var viewObject:ViewObject=null;

	private var columnObjectList:ArrayList = new ArrayList();
	private var selectedColumnObject:ColumnObject = null;

	public function get hasChanged():Boolean
	{
		return _hasChanged;
	}

	public function set hasChanged(value:Boolean):void
	{
		if (_hasChanged != value)
		{
			_hasChanged = value;
			dispatchEvent(new Event(Event.CHANGE));
		}
	}

	public function createContextMenuForGrid():void
	{
			
	}

	private function createContextMenu():ContextMenu
	{
		var viewContextMenu:ContextMenu = new ContextMenu();
		var cutItem:ContextMenuItem = new ContextMenuItem("Add Column");
		cutItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onMenuItemAddColumn);
		viewContextMenu.customItems.push(cutItem);
		
		return viewContextMenu;
	}
	private function onMenuItemAddColumn(event:ContextMenuEvent):void
	{
		

		//if(selectedColumnName!="New Column" && repeatColumnTitle==false){
			var tmpColumn:GridColumn=new GridColumn();
			tmpColumn.headerText="New Column"+DominoGlobals.DominoViewColumnCount.toString();
			tmpColumn.width=70;
			tmpColumn.dataField="";
			tmpColumn.headerRenderer= new ClassFactory(DominoViewEditorHeaderRenderer);
											
			dgColumns.columns.addItem(tmpColumn);

			hasChanged=true;

			
		
			viewSetPanel.visible =viewSetPanel.includeInLayout = false;
			columnAccordion.visible =columnAccordion.includeInLayout = true;

			selectedColumnName="New Column"+DominoGlobals.DominoViewColumnCount.toString();
			
			selectedColumn= getCurrentColumnByTitle(selectedColumnName);
			// titleInput.text=selectedColumnName;
			// columWidth.text="70";
			// columnValueType.selectedValue="Field"
			// columnValueFieldRadioBtn.selected=true;
			// columnValueFormulaRadioBtn.selected=false;
			// columnValueFormula.text="";

			DominoGlobals.DominoViewColumnCount++;

			dominoViewPropertyEditor.dispatchEvent(new PropertyEditorChangeEvent(PropertyEditorChangeEvent.PROPERTY_EDITOR_CHANGED, null));
			//add new column into columnList
			
			var columnsObj:ColumnObject=new ColumnObject();
			columnsObj.columnHeaderTitle=selectedColumnName;
			columnsObj.columnWidth="70";
			columnsObj.columnTypeValue="Field";
			columnObjectList.addItem(columnsObj);
			
			selectedColumnObject=columnsObj;
			//selectedColumn=(dgColumns.columns as ArrayList).getItemAt(event.columnInex) as GridColumn;
			
			columnAccordion.initializeColumnProperty(columnsObj);

		
	}
	

  	[Bindable]
	private var rowsDataProvider:ArrayList = new ArrayList();


	protected function onRowDragStarts(event:DragEvent):void
    {
        dgColumns.endItemEditorSession();
    }

    protected function onRowDragAndDropped(event:DragEvent):void
    {
        dgColumns.callLater(updateToOwner, [true]);
    }

    private function updateToOwner(isAll:Boolean = false, updateType:String = null, itemIndex:int = -1):void
    {
       
    }

	
	
	public function onComplete():void {

		
		//inital the view columns

        propertyEditorHeader.componentName = "Domino View";

		

		viewSetPanel.visible =viewSetPanel.includeInLayout = true;
		columnAccordion.visible =columnAccordion.includeInLayout = false;
		dgColumns.addEventListener(DominoViewColumnClickEvent.COLUMN_CLICK, viewColumnClick);
		

		//add property change listener
		
		this.contextMenu = createContextMenu();

		dominoViewPropertyEditor.addEventListener("viewPropertyChanged", onDominoViewPropertyChanged);
		dominoViewPropertyEditor.addEventListener(DominoViewColumnUpdateEvent.COLUMN_UPDATE, onDominoViewColumnPropertyChanged);
		dominoViewPropertyEditor.addEventListener("removeColumn", removeColumn);
    
    }

	
	public function viewColumnClick(event:DominoViewColumnClickEvent):void{
		showColumns=true;

		selectedColumnType="";
		
		viewSetPanel.visible =viewSetPanel.includeInLayout = false;
		columnAccordion.visible =columnAccordion.includeInLayout = true;
		//loading the column setting to property
		//Alert.show("event.columnInex:"+event.columnInex);
		if(event.columnInex>-1 && event.columnInex<=columnObjectList.length){
			selectedColumnObject=columnObjectList.getItemAt(event.columnInex) as ColumnObject;
			selectedColumn=(dgColumns.columns as ArrayList).getItemAt(event.columnInex) as GridColumn;
			if(selectedColumnObject!=null && selectedColumn!=null ){
				columnAccordion.initializeColumnProperty(selectedColumnObject);
			}
			
		}
		
		
	
	}

	private function onDataGridClick(event:MouseEvent):void
	{
		if(showColumns==false){
			viewSetPanel.visible =viewSetPanel.includeInLayout = true;
			columnAccordion.visible =columnAccordion.includeInLayout = false;
		}
		showColumns=false;
		
		
	}

	private function onDominoViewPropertyChanged(event:Event):void
	{
		dominoViewPropertyEditor.dispatchEvent(new PropertyEditorChangeEvent(PropertyEditorChangeEvent.PROPERTY_EDITOR_CHANGED, null));
		hasChanged=true;
	}
	private function onDominoViewColumnPropertyChanged(event:DominoViewColumnUpdateEvent):void
	{
		if(event.col!=null){
			var col:ColumnObject=event.col as ColumnObject;
			
			var index:int=columnObjectList.getItemIndex(selectedColumnObject);
			columnObjectList.setItemAt(col,index);

			var gridColumn:GridColumn=(dgColumns.columns as ArrayList).getItemAt(index) as GridColumn;
			if(gridColumn.headerText!=col.columnHeaderTitle){
				gridColumn.headerText=col.columnHeaderTitle;
			}
			

			if(col.columnWidth!=null&& col.columnWidth.length>0){
				gridColumn.width=parseInt(col.columnWidth);
			}else{
				gridColumn.width=70;
			}
			
			(dgColumns.columns as ArrayList).setItemAt(gridColumn,index);
			
			dominoViewPropertyEditor.dispatchEvent(new PropertyEditorChangeEvent(PropertyEditorChangeEvent.PROPERTY_EDITOR_CHANGED, null));
			hasChanged=true;
		}
		
	}

	private function removeColumn(event:Event):void 
	{
		
		if(selectedColumnObject!=null){
		
			var index:int=columnObjectList.getItemIndex(selectedColumnObject);
			(dgColumns.columns as ArrayList).removeItemAt(index);
			columnObjectList.removeItemAt(index);
			

			selectedColumnType="remove";

			dominoViewPropertyEditor.dispatchEvent(new PropertyEditorChangeEvent(PropertyEditorChangeEvent.PROPERTY_EDITOR_CHANGED, null));
			

		}
	}


	private function getCurrentColumnByTitle(title:String):GridColumn
	{
		var currentCol:GridColumn = null;
		
		 for(var indexNum:Number = 0; indexNum < dgColumns.columns.length; indexNum++)
		{
			var item:GridColumn = dgColumns.columns.getItemAt(indexNum) as GridColumn;
		
			if(item.headerText==title){
				currentCol=item;
			}
		}
		
		return currentCol;

	}

	
	CONFIG::MOONSHINE
	{		
		
		import flash.filesystem.File;
		import flash.filesystem.FileStream;	
		import utils.StringHelper;

		private var _fileMoonshine:File;
		private var _fileStreamMoonshine:FileStream;

		public function set moonshineBridge(value:IVisualEditorLibraryBridge):void
		{
			MoonshineBridgeUtils.moonshineBridge = value;
		}
		
		public function set visualEditorFilePath(value:String):void
		{
			MoonshineBridgeUtils.currentFilePath = value;
		}

		public function get visualEditorFilePath():String
		{
			return _fileMoonshine.nativePath;
		}

		public function saveEditedFile():void
		{
			viewObject=viewSetPanel.viewObject;
			
			if (!_fileStreamMoonshine) return;
			if (!_fileMoonshine) return;
			if (!viewObject) return;

			hasChanged=false;
			var xmlStr:String="<?xml version=\"1.0\" encoding=\"utf-8\"?>"+"\r\n";
			var xmlView:XML=new XML("<view />");

			xmlView.@name=viewObject.viewName;

			if(viewObject.showinmenu=="true"){
				xmlView.@showinmenu="true";
			}else{
				xmlView.@showinmenu="false";
			}
			
			xmlView.@noreplace="true";
			xmlView.@unreadmarks="none";
			// boldunreadrows="false" evaluateactions="false" 
			//allownewdocuments="false" allowcustomizations="true" hidemarginborder="false" marginwidth="0px" marginbgcolor="white" uniquekeys="false"
			if(viewObject.publicaccess=="true"){
				xmlView.@publicaccess="true";
			}else{
				xmlView.@publicaccess="false";
			}
			
			xmlView.@onopengoto="lastopened";
			
			xmlView.@onrefresh="displayindicator";
			if(viewObject.opencollapsed=="true"){
				xmlView.@opencollapsed="true";
			}else{
				xmlView.@opencollapsed="false";
			}
			
		
			xmlView.@showresponsehierarchy="true";
			xmlView.@showmargin="true";
			xmlView.@shrinkrows="false";
			xmlView.@extendlastcolumn="false";
			xmlView.@showhierarchies="false";
			xmlView.@unreadcolor="black";
			xmlView.@rowlinecount="1";
			xmlView.@rowspacing="1";
			xmlView.@bgcolor="white";
			xmlView.@totalscolor="black";
			xmlView.@headerbgcolor="white";

			var viewCode:XML=new XML("<code event=\"selection\" />");
			var viewCodeFormula:XML=new XML("<formula>" + viewObject.viewCodeFormula+"</formula>");
			viewCode.appendChild(viewCodeFormula);
			xmlView.appendChild(viewCode);

			

			for(var i:int=0; i<columnObjectList.length; i++)
			{
				
				var c:ColumnObject = columnObjectList.getItemAt(i) as  ColumnObject;
				var colXML:XML = new XML("<column />");
				if(c.columnSort!=null && c.columnSort!=""){
					colXML.@sort=c.columnSort;
				}else{
					colXML.@sort="none";
				}
				if(c.columnSortType!=null && c.columnSortType!=""){
					colXML.@categorized=c.columnSortType;
				}else{
					colXML.@categorized="false";
				}

				


				if(c.twisties!=null && c.twisties!=""){
					colXML.@twisties=c.twisties
				}
				if(c.separatemultiplevalues!=null && c.separatemultiplevalues!=""){
					colXML.@separatemultiplevalues=c.separatemultiplevalues
				}

				if(c.totals!=null && c.totals!=""){
					colXML.@totals=c.totals
				}
				
				colXML.@hidedetailrows="false";
				colXML.@width=(Math.round(parseInt(c.columnWidth)/8)).toString();
				colXML.@resizable="true";
				
				colXML.@sortnoaccent="true" 
				colXML.@sortnocase="true" 
				colXML.@showaslinks="false"
				



				var colHeader:XML=new XML("<columnheader />");
				colHeader.@title=c.columnHeaderTitle;

				if(c.columnTitleFont!=null && c.columnTitleFont!=""){
					var colHeaderFont:XML=new XML("<font/>");
				
					colHeaderFont.@name=c.columnTitleFont;
					if(c.columnTitleStyle!=null && c.columnTitleStyle!=""){
						colHeaderFont.@style=c.columnTitleStyle;
					}
					if(c.columnTitleSize!=null && c.columnTitleSize!=""){
						colHeaderFont.@size=c.columnTitleSize;
					}else{
						colHeaderFont.@size="9";
					}

					if(c.columnTitleColor!=null && c.columnTitleColor!=""){
						colHeaderFont.@color=c.columnTitleColor;
					}

					colHeader.appendChild(colHeaderFont);
				}

				
				
				colXML.appendChild(colHeader);

				if(c.columnTypeValue=="Field"){
					colXML.@itemname=c.columnCodeFormula;
				}else if (c.columnTypeValue=="Formula"){
					colXML.@itemname="$"+i.toString();
					var colCode:XML=new XML(" <code event=\"value\" />");
					var colCodeFormual:XML=new XML(" <formula>"+c.columnCodeFormula+"</formula>");
					colCode.appendChild(colCodeFormual);
					colXML.appendChild(colCode)
				}

				xmlView.appendChild(colXML);
				
				
			}

			xmlStr=xmlStr+xmlView.toXMLString();
			
			_fileStreamMoonshine.open(_fileMoonshine, FileMode.WRITE);
			_fileStreamMoonshine.writeUTFBytes(xmlStr);
			_fileStreamMoonshine.close();

		
			

		
		}

		private function loadLocalFileToXML(filePath:String):XML
		{
			_fileMoonshine = createNewFileIfNotExists(filePath);
			_fileStreamMoonshine = new FileStream();
			_fileStreamMoonshine.open(_fileMoonshine, FileMode.READ);

			var data:String = _fileStreamMoonshine.readUTFBytes(_fileMoonshine.size);
			var xml:XML = new XML(data);
			_fileStreamMoonshine.close();

			return xml;
		}

		public function loadFile(filePath:String):void
		{
			var xml:XML = loadLocalFileToXML(filePath);
			var name:String = getFileNameWithoutExtension(filePath,"view");
			// if(viewNameInput!=null){
			// 	viewNameInput.text=name;
			// }
		
			
			if(xml!=null){
			
				for each(var col:XML in xml..column) //no matter of depth Note here
				{
				
					var colChilren:XMLList = col.children();
					var itemname:String= col.@itemname;
					if(colChilren.length() > 0)
					{
						var tmpColumn:GridColumn=new GridColumn();
						tmpColumn.headerText=col.columnheader.@title;
						

						tmpColumn.headerRenderer= new ClassFactory(DominoViewEditorHeaderRenderer);
						
						dgColumns.columns.addItem(tmpColumn);

						//inital the memory column object
						var columnsObj:ColumnObject=new ColumnObject();
						columnsObj.columnHeaderTitle=col.columnheader.@title;
						
						if(col.@width!=null && col.@width.toString().length>0){
							columnsObj.columnWidth=(parseInt(col.@width) * 8).toString();
							
						}else{
							columnsObj.columnWidth="70";
						}
						if(col.@categorized.toString().length==0){
							columnsObj.columnSortType="false";
						}else{
							columnsObj.columnSortType=col.@categorized;
						}
						if(col.@separatemultiplevalues.toString().length==0){
							columnsObj.separatemultiplevalues="false";
						}else{
							columnsObj.separatemultiplevalues=col.@separatemultiplevalues;
						}

						if(col.@sort.toString().length==0){
							columnsObj.columnSort="none";
						}else{
							columnsObj.columnSort=col.@sort;
						}
						if(col.@totals.toString().length==0){
							columnsObj.totals="none";
						}else{
							columnsObj.totals=col.@totals.toString();
						}

						if(col.@twisties.toString().length==0){
							
						}else{
							columnsObj.twisties=col.@twisties;
						}
						if(col.columnheader[0]&&col.columnheader[0].font[0]){
							
								if(col.columnheader[0].font[0].@name.toString().length>0){
									columnsObj.columnTitleFont=col.columnheader[0].font[0].@name.toString();
								
								}else{
									columnsObj.columnTitleFont="monospace"
								}

								if(col.columnheader[0].font[0].@style.toString().length>0){
								
									columnsObj.columnTitleStyle=col.columnheader[0].font[0].@style;
								
								}else{
									columnsObj.columnTitleStyle="normal";
								}
								var sizeLength:int=col.columnheader[0].font[0].@size.toString().length;
								if(sizeLength>0){
									columnsObj.columnTitleSize=col.columnheader[0].font[0].@size;
								}else{
									columnsObj.columnTitleSize="9"
								}

								if(col.columnheader[0].font[0].@color.toString().length>0){
									columnsObj.columnTitleColor=col.columnheader[0].font[0].@color.toString();
								
								}else{
									columnsObj.columnTitleColor="000000";
								}
								
							
						}

						if(col.code.toString().length==0){
							columnsObj.columnTypeValue="Field";
							columnsObj.columnCodeFormula=col.@itemname
						}else{
							columnsObj.columnTypeValue="Formula";
							columnsObj.columnCodeFormula=col.code.formula;
						}
						columnObjectList.addItem(columnsObj);
						
						
					}
				}
				
				//inital the view select formla
				var selectFormula:XML= xml.code.(@event=="selection")[0];
				if(selectFormula){
					var formulaXml:XML=selectFormula.formula[0];
					if(formulaXml){
					
						if(formulaXml.text()){
							viewObject=new ViewObject();
								if(xml.@name!=null && xml.@name.toString().length>0){
									viewObject.viewName=xml.@name;
								}else{
									viewObject.viewName=name;
								}
								viewObject.viewCodeEvent="selection";
								viewObject.viewCodeFormula=formulaXml.text();
								
								if(xml.@showinmenu!=null && xml.@showinmenu!=""){
									viewObject.showinmenu=xml.@showinmenu
								}else{
									viewObject.showinmenu="false";
								}
								if(xml.@publicaccess!=null && xml.@publicaccess!=""){
									viewObject.publicaccess=xml.@publicaccess
								}else{
									viewObject.publicaccess="false";
								}
								if(xml.@opencollapsed!=null && xml.@opencollapsed!=""){
									viewObject.opencollapsed=xml.@opencollapsed
								}else{
									viewObject.opencollapsed="false";
								}


							
								viewSetPanel.initializeViewProperty(viewObject);

						}
						
					}
				}

			}
		
		

			

			
		}

		//This method will get the formula and base64 for column
		private function getColumnFormula(column:XML):String 
		{
			var formula:String="";
			if(column.code!=null){
				if(column.code.formula!=null){
					formula=StringHelper.base64Encode(column.code.formula.text());
				}
			}

			return formula;

		}


		private function createNewFileIfNotExists(filePath:String):File
		{
			var tempFileMoonshine:File = new File(filePath);

			if (!tempFileMoonshine.exists)
			{
				
				var xml:XML = new XML("<root/>");
				var tempFileStreamMoonshine:FileStream = new FileStream();
				tempFileStreamMoonshine.open(tempFileMoonshine, FileMode.WRITE);
				tempFileStreamMoonshine.writeUTFBytes(xml.toXMLString());
				tempFileStreamMoonshine.close();
			}

			return tempFileMoonshine;
		}

		

		private function getFileNameWithoutExtension(filePath:String,extension:String):String
        {
			var file:File = new File(filePath);
			
            var indexOfFileExtension:int = file.name.lastIndexOf(extension);
            return file.name.substr(0, indexOfFileExtension - 1);
        }
	}

			
		

]]></fx:Script> 
<fx:Declarations>
		<s:RadioButtonGroup id="columnValueType"/>
		<s:RadioButtonGroup id="columnSortOrder"/>
		<s:RadioButtonGroup id="columnSortType"/>
		
</fx:Declarations>		
</s:Group>         