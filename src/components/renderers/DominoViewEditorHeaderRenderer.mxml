<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:DefaultGridHeaderRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
							 xmlns:s="library://ns.adobe.com/flex/spark" 
							 xmlns:mx="library://ns.adobe.com/flex/mx" height="30"
                             click="dispatchClickEvent(event)"
                             >
	<!-- <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states> -->
  
    <fx:Declarations>
		<s:Label id="labelDisplay" name="label_Display"
                verticalCenter="1" left="0"  top="0" bottom="0"
                verticalAlign="middle"
                maxDisplayedLines="1"
                textAlign="left"
                fontWeight="bold"
                showTruncationTip="true"
                backgroundAlpha="100"
                />
	</fx:Declarations>
    

    <fx:Script>
		<![CDATA[
            import flash.events.Event;
            import flash.events.MouseEvent;
            import spark.components.Alert;
            import view.suportClasses.events.DominoViewColumnClickEvent;
            import view.suportClasses.events.DominoViewColumnRightClickEvent;
            // private function dispatchRightClickEvent(event:MouseEvent):void
            // {
            //     Alert.show("render right click");
            //     this.dispatchEvent(new DominoViewColumnRightClickEvent(DominoViewColumnRightClickEvent.COLUMN_CLICK,this.column.columnIndex,true, true) );
            // }
            private function dispatchClickEvent(event:MouseEvent):void
            {
			
                setCurrentState("down",true);
   
                this.dispatchEvent(new DominoViewColumnClickEvent(DominoViewColumnClickEvent.COLUMN_CLICK,this.column.columnIndex,this,true, true) );
            }
            override public function setCurrentState(stateName:String, playTransition:Boolean=true):void
            {
                    super.setCurrentState(stateName, playTransition);

                    invalidateDisplayList();
                    
            }

            public function selectedColumnDown():void 
            {   
                
                super.setCurrentState("down",true);
                this.setCurrentState("down",true);
                
            }

            public function selectedColumnUp():void 
            {
                super.setCurrentState("normal",true);
            }

			/**
             *  @private
             *  Create and add the sortIndicator to the sortIndicatorGroup and the 
             *  labelDisplay into the labelDisplayGroup.
             */
            override public function prepare(hasBeenRecycled:Boolean):void
            {
                super.prepare(hasBeenRecycled);
                
            }

            	
			
		]]>
	</fx:Script>
</s:DefaultGridHeaderRenderer>