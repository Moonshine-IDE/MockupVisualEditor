<?xml version="1.0" encoding="utf-8"?>
<suportclasses:BasePropertyEditorForm xmlns:fx="http://ns.adobe.com/mxml/2009"
									  xmlns:s="library://ns.adobe.com/flex/spark"
									  xmlns:suportclasses="view.suportClasses.*"
									  skinClass="skins.FormSkin"
									  creationComplete="onBasicFormCreationComplete(event)"
									  currentState="normal">
	<suportclasses:states>
		<s:State name="normal"/>
		<s:State name="normalWithId"/>
	</suportclasses:states>

	<suportclasses:layout>
		<s:FormLayout />
	</suportclasses:layout>
	<s:FormItem label="Id" skinClass="skins.FormItemSkin" includeIn="normalWithId">
		<s:TextInput id="idTextInput" width="100%" skinClass="skins.TextInputSkin"
					 text="{selectedComponentIdAttributeChaged}" focusOut="commitId()"
					 height="25" tabIndex="3" keyDown="idInput_keyDownHandler(event)"/>
	</s:FormItem>
	<s:FormHeading label="Size" skinClass="skins.FormHeadingSkin"/>
	<s:FormItem label="Width" skinClass="skins.FormItemSkin">
		<s:TextInput id="widthInput" width="100%"
					 text="{selectedComponentComputedWidth}" skinClass="skins.TextInputSkin"
					 keyDown="widthInput_keyDownHandler(event)" height="25"
					 tabIndex="4"/>
	</s:FormItem>
	<s:FormItem label="Height" skinClass="skins.FormItemSkin">
		<s:TextInput id="heightInput" width="100%"
					 text="{selectedComponentComputedHeight}" skinClass="skins.TextInputSkin"
					 keyDown="heightInput_keyDownHandler(event)" height="25"
					 tabIndex="5"/>
	</s:FormItem>
	<fx:Script><![CDATA[
		
		import mx.binding.utils.BindingUtils;
		import mx.binding.utils.ChangeWatcher;
		import mx.core.EventPriority;
		import mx.core.UIComponent;
		import mx.events.FlexEvent;
		
		import utils.GenericUtils;
		
		import view.interfaces.IIdAttribute;
		import view.interfaces.ISurfaceComponent;
		
		private var _bindingWidth:ChangeWatcher;
		private var _bindingHeight:ChangeWatcher;
		private var _bindingId:ChangeWatcher;

		CONFIG::MOONSHINE
		{
			private var tabDictionary:Array = [];
		}

		[Bindable("change")]
		private function get selectedComponent():UIComponent
		{
			//x, y, width, and height aren't bindable on interfaces used by
			//UIComponent, so we need to give the compiler a little hint here
			return UIComponent(this.selectedItem);
		}

		override public function set selectedItem(value:ISurfaceComponent):void
		{
			if (super.selectedItem != value)
			{
				super.selectedItem = value;
				this.currentState = value is IIdAttribute ? "normalWithId" : "normal";
				updateBinding();
			}
		}

		[Bindable("propertyEditorChanged")]
		public function get selectedComponentComputedWidth():String
		{
			if (!isNaN(selectedComponent.percentWidth)) return selectedComponent.percentWidth + "%";
			return selectedComponent.width.toString();
		}

		[Bindable("propertyEditorChanged")]
		public function get selectedComponentComputedHeight():String
		{
			if (!isNaN(selectedComponent.percentHeight)) return selectedComponent.percentHeight + "%";
			return selectedComponent.height.toString();
		}

		[Bindable("propertyEditorChanged")]
		public function get selectedComponentIdAttributeChaged():String
		{
			if (this.selectedItem is IIdAttribute)
			{
				return this.selectedItem["idAttribute"];
			}

			return "";
		}
		
		private var eventProgressing:uint = 0;
		
		private function commitWidth():void
		{
			if (this.widthInput.text.indexOf("%") != -1) GenericUtils.applyPercentageWidthHeight(this.selectedItem, this.widthInput.text, this.heightInput.text, true);
			else
			{
				var newWidth:Number = parseFloat(this.widthInput.text);
				this.widthInput.text = GenericUtils.applyMinAndMaxWidth(this.selectedItem, newWidth);
			}
			this.widthInput.selectAll();
		}

		private function commitHeight():void
		{
			if (this.heightInput.text.indexOf("%") != -1) GenericUtils.applyPercentageWidthHeight(this.selectedItem, this.widthInput.text, this.heightInput.text, false);
			else
			{
				var newHeight:Number = parseFloat(this.heightInput.text);
				this.heightInput.text = GenericUtils.applyMinAndMaxHeight(this.selectedItem, newHeight);
			}
			this.heightInput.selectAll();
		}

		private function commitId():void
		{
			this.selectedItem["idAttribute"] = this.idTextInput.text;
		}

		private function widthInput_keyDownHandler(event:KeyboardEvent):void
		{
			if (event.keyCode === Keyboard.ENTER || event.keyCode == Keyboard.TAB)
			{
				commitWidth();
			}
		}

		private function heightInput_keyDownHandler(event:KeyboardEvent):void
		{
			if (event.keyCode === Keyboard.ENTER || event.keyCode == Keyboard.TAB)
			{
				commitHeight();
			}
		}
		
		private function idInput_keyDownHandler(event:KeyboardEvent):void
		{
			if (event.keyCode === Keyboard.ENTER || event.keyCode == Keyboard.TAB)
			{
				commitId();
			}
		}

		private function onBasicFormCreationComplete(event:FlexEvent):void
		{
			removeEventListener(FlexEvent.CREATION_COMPLETE, onBasicFormCreationComplete);
			CONFIG::MOONSHINE
			{
				tabDictionary.push(widthInput);
				tabDictionary.push(heightInput);

				addEventListener(FocusEvent.KEY_FOCUS_CHANGE, onBasicFormKeyFocusChange, false, EventPriority.DEFAULT_HANDLER);
			}
		}
		
		private function updateBinding():void
		{
			if (this._bindingWidth)
			{
				this._bindingWidth.unwatch();
				this._bindingHeight.unwatch();
				this._bindingWidth = this._bindingHeight = null;
				
				if (currentState == "normalWithId") 
				{
					this._bindingId.unwatch();
					this._bindingId = null;
				}
			}
			if (this.selectedItem === null)
			{
				return;
			}
			this._bindingWidth = BindingUtils.bindSetter(onWidtUpdated, selectedItem, "width", false, true);
			this._bindingHeight = BindingUtils.bindSetter(onHeightUpdated, selectedItem, "height", false, true);
			if (currentState == "normalWithId") this._bindingId = BindingUtils.bindSetter(onIdUpdated, selectedItem, "idAttribute", false, true);
		}
		
		private function onWidtUpdated(value:Object):void
		{
			if (this.widthInput)
			{
				this.widthInput.text = !isNaN(this.selectedItem.percentWidth) ? this.selectedItem.percentWidth + "%" : this.selectedItem.width.toString();
			}
		}
		
		private function onHeightUpdated(value:Object):void
		{
			if (this.heightInput)
			{
				this.heightInput.text = !isNaN(this.selectedItem.percentHeight) ? this.selectedItem.percentHeight + "%" : this.selectedItem.height.toString();
			}
		}
		
		private function onIdUpdated(value:Object):void
		{
			if (this.idTextInput)
			{
				this.idTextInput.text = this.selectedItem["idAttribute"];
			}
		}

		CONFIG::MOONSHINE
		{
			override protected function isOurFocus(target:DisplayObject):Boolean
			{
				return target == widthInput.textDisplay ||
						target == heightInput.textDisplay || super.isOurFocus(target);
			}

			private function onBasicFormKeyFocusChange(event:FocusEvent):void
			{
				if (event.isDefaultPrevented())
					return;

				if (!event.shiftKey && isOurFocus(DisplayObject(event.target)))
				{
					event.preventDefault();

					var currentTabIndex:int = event.target.tabIndex;

					if (currentTabIndex > -1)
					{
						currentTabIndex += 1;
						if (tabDictionary.length < currentTabIndex)
						{
							currentTabIndex = 1;
						}

						tabDictionary[currentTabIndex - 1].setFocus();
					}
				}
			}
		}
		
	]]></fx:Script>
</suportclasses:BasePropertyEditorForm>