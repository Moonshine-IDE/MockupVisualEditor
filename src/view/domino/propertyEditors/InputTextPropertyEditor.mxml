<?xml version="1.0" encoding="utf-8"?>
<suportclasses:BasePropertyEditor xmlns:fx="http://ns.adobe.com/mxml/2009"
                                  xmlns:s="library://ns.adobe.com/flex/spark"
                                  xmlns:suportclasses="view.suportClasses.*"
                                  xmlns:domino="view.domino.forms.*" 
								  xmlns:forms="view.forms.*"
								  xmlns:mx="library://ns.adobe.com/flex/mx"
								  xmlns:primeFaces="view.primeFaces.forms.*"
								  creationComplete="onInputCreationComplete(event)"
								 >
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.listClasses.ListBaseContentHolder;
			import mx.events.FlexEvent;
			
			import spark.components.Button;
			import spark.events.IndexChangeEvent;
			import spark.skins.spark.ButtonSkin;
			
			import skins.DominoAlignButtonSkin;
			
			import view.domino.forms.imageClass.LoadImage;

		[Embed(source='/assets/align-center-solid.png')]
        [Bindable]
        public  var ALIGN_CENTER:Class;

        [Embed(source='/assets/align-justify-solid.png')]
        [Bindable]
        public  var ALIGN_JUSTIFY:Class;

        [Embed(source='/assets/align-left-solid.png')]
        [Bindable]
        public  var ALIGN_LEFT:Class;

        [Embed(source='/assets/align-right-solid.png')]
        [Bindable]
        public  var ALIGN_RIGHT:Class;
        
        [Bindable]
        [Embed(source='/assets/ban-solid.png')]
        public  var ALIGN_NONE:Class;

			private var isNumber:Boolean = false;
			private var inputType:String="";
			[Bindable]
        	public var keywordsFlag:Boolean = false;

			private function onInputCreationComplete(event:FlexEvent):void
        	{
				 keywordsFlag = Object(selectedItem).keyformulachoices;
				
				 // Alert.show("name:"+Object(selectedItem).name);
				 if(keywordsFlag==true){
					 this.keyformulachoices.selected=true;
					keywords.visible =keywords.includeInLayout = false;
					keyformulavalue.visible =keyformulavalue.includeInLayout = true;
				 }else{
					this.keyformulachoices.selected=false;
					keywords.visible =keywords.includeInLayout = true;
					keyformulavalue.visible =keyformulavalue.includeInLayout = false;
				 }

				 //inistal hide options
				 if(this.selectedItem["hide"]!=null && this.selectedItem["hide"].length>0 || this.selectedItem["hidewhen"]!=null){
					
				 }
				if(this.selectedItem["allowmultivalues"]){
					 this.allowmul.selected=true;
					
				 }else{
					 this.allowmul.selected=false;
					
				 }
				 //inisatll font/color/size options 
				 if(this.selectedItem["color"]!=null && this.selectedItem["color"].length>0){

				 }

				 //inisatll align options
				var leftButton:Button = new Button();
				leftButton.width = 30
				leftButton.height = 30 
				var rightButton:Button = new Button();
				rightButton.width = 30
				rightButton.height = 30 
				var centerButton:Button = new Button();
				centerButton.width = 30
				centerButton.height = 30 
				var justifButton:Button = new Button();
				justifButton.width = 30
				justifButton.height = 30 
				var noneButton:Button = new Button();
				noneButton.width = 30
				noneButton.height = 30 
				
				ALIGN_JUSTIFY.width=30
				ALIGN_JUSTIFY.height=30
				ALIGN_LEFT.width=30
				ALIGN_LEFT.height=30
				ALIGN_RIGHT.width=30
				ALIGN_RIGHT.height=30
				ALIGN_CENTER.width = 30
				ALIGN_CENTER.height=30


				leftButton.setStyle("icon",ALIGN_LEFT);
				rightButton.setStyle("icon",ALIGN_RIGHT);
				centerButton.setStyle("icon",ALIGN_CENTER);
				justifButton.setStyle("icon",ALIGN_JUSTIFY);
				noneButton.setStyle("icon",ALIGN_NONE);
				//initial align
				initializeAlign();


				
			}

			protected function digits_changeHandler(event:Event):void
			{
				//Alert.show(event.target.text);

			}

			protected function  changeHandler(event:Event):void
			{
				
			}
			
			protected function textform1_changeHandler(event:Event):void
			{
				if (Object(selectedItem).maxLength != "" && Object(selectedItem).maxLength != "0")
				{
					txtValue.maxChar = int(Object(selectedItem).maxLength);
				}
				else if (txtValue.maxChar != 0)
					txtValue.maxChar = 0;
			}
			private function getDominoFieldTypeLabel(item:Object):String
			{
				

				if(item.label=="number"){
					if(txtValue.bindableText!=null){
						if(!(txtValue.bindableText is Number)){
							txtValue.bindableText="";
						}
					}
					txtValue.visible = txtValue.includeInLayout = true;
					//allowmul.selected = false;
					txtValue.restrict="0-9";
					datePanel.visible = datePanel.includeInLayout = false;
					numberPanel.visible = numberPanel.includeInLayout = true;
					allowmul.enabled=true;
					fieldlistinput.enabled = true;
					fieldlistdisplay.enabled = true;
					checkboxPanel.visible = checkboxPanel.includeInLayout = false;
					namespanel.visible = namespanel.includeInLayout = false;
					//formualPanel.visible = formualPanel.includeInLayout = false;
					richtitlePanel.visible = richtitlePanel.includeInLayout = false;
				} else if(item.label=="datetime"){
					txtValue.restrict=null
					datePanel.visible = datePanel.includeInLayout = true;
					numberPanel.visible = numberPanel.includeInLayout = false;
					//allowmul.visible = allowmul.includeInLayout = true;
					allowmul.enabled=true;
					fieldlistinput.enabled = true;
					fieldlistdisplay.enabled = true;
					checkboxPanel.visible = checkboxPanel.includeInLayout = false;
					//allowmul.selected = false;
					txtValue.visible = txtValue.includeInLayout = true;
					namespanel.visible = namespanel.includeInLayout = false;
					//formualPanel.visible = formualPanel.includeInLayout = false;
					richtitlePanel.visible = richtitlePanel.includeInLayout = false;
				} else if(item.label=="keyword"){
					txtValue.restrict=null
					txtValue.visible = txtValue.includeInLayout = false;
					datePanel.visible = datePanel.includeInLayout = false;
					numberPanel.visible = numberPanel.includeInLayout = false;
					//allowmul.visible = allowmul.includeInLayout = true;
					allowmul.enabled = true;
					checkboxPanel.visible = checkboxPanel.includeInLayout = true;
					namespanel.visible = namespanel.includeInLayout = false;
					//formualPanel.visible = formualPanel.includeInLayout = false;
					richtitlePanel.visible = richtitlePanel.includeInLayout = false;
				}else if(item.label=="names"){
					txtValue.restrict=null
					txtValue.visible = txtValue.includeInLayout = false;
					datePanel.visible = datePanel.includeInLayout = false;
					numberPanel.visible = numberPanel.includeInLayout = false;
					allowmul.enabled=true;
					fieldlistinput.enabled = true;
					fieldlistdisplay.enabled = true;
					checkboxPanel.visible = checkboxPanel.includeInLayout = false;
					namespanel.visible = namespanel.includeInLayout = true;
					//formualPanel.visible = formualPanel.includeInLayout = false;
					richtitlePanel.visible = richtitlePanel.includeInLayout = false;
				}else if(item.label=="formula"){
					txtValue.restrict=null
					txtValue.visible = txtValue.includeInLayout = false;
					datePanel.visible = datePanel.includeInLayout = false;
					numberPanel.visible = numberPanel.includeInLayout = false;
					allowmul.enabled=true;
					fieldlistinput.enabled = true;
					fieldlistdisplay.enabled = true;
					checkboxPanel.visible = checkboxPanel.includeInLayout = false;
					namespanel.visible = namespanel.includeInLayout = false;
					//formualPanel.visible = formualPanel.includeInLayout = true;
					richtitlePanel.visible = richtitlePanel.includeInLayout = false;
				}else if(item.label=="richtextlite"){
					txtValue.restrict=null
					txtValue.visible = txtValue.includeInLayout = false;
					datePanel.visible = datePanel.includeInLayout = false;
					numberPanel.visible = numberPanel.includeInLayout = false;
					allowmul.enabled=false;
					fieldlistinput.enabled = false;
					fieldlistdisplay.enabled = false;
					checkboxPanel.visible = checkboxPanel.includeInLayout = false;
					namespanel.visible = namespanel.includeInLayout = false;
					//formualPanel.visible = formualPanel.includeInLayout = false;
					richtitlePanel.visible = richtitlePanel.includeInLayout = true;
				}else if(item.label=="text"){
					var selectItemText:String=ddl2.getDdlSelectionSelectedItemText();
					if(selectItemText){
			
						if(selectItemText=="computed"||selectItemText=="computedfordisplay"||selectItemText=="computedwhencomposed"){
							//Alert.show(":"+selectItemText);
							//formualPanel.visible = formualPanel.includeInLayout = true;
							txtValue.visible =txtValue.includeInLayout = false;
							editableFormualPanel.visible =editableFormualPanel.includeInLayout = false;
						}else{
							//formualPanel.visible = formualPanel.includeInLayout = false;
							txtValue.visible =txtValue.includeInLayout = true;
							editableFormualPanel.visible =editableFormualPanel.includeInLayout = true;
						}
					}
					
					allowmul.enabled=true;
					fieldlistinput.enabled = true;
					fieldlistdisplay.enabled = true;
					txtValue.restrict=null;
					numberPanel.visible = numberPanel.includeInLayout = false;
					allowmul.visible = allowmul.includeInLayout = true;
					checkboxPanel.visible = checkboxPanel.includeInLayout = false;
					namespanel.visible = namespanel.includeInLayout = false;
					
					richtitlePanel.visible = richtitlePanel.includeInLayout = false;
					//Alert.show("142:"+formualPanel.visible);
				
				}else if(item.label=="authors"){
					allowmul.enabled=true;
					fieldlistinput.enabled = true;
					fieldlistdisplay.enabled = true;
				}else if(item.label=="password"){
					allowmul.enabled=false;
					fieldlistinput.enabled = false;
					fieldlistdisplay.enabled = false;
				}else if(item.label=="readers"){
					allowmul.enabled=true;
					fieldlistinput.enabled = true;
					fieldlistdisplay.enabled = true;
				}else if(item.label=="timezone"){
					allowmul.enabled=false;
					fieldlistinput.enabled = false;
					fieldlistdisplay.enabled = false;
				}else if(item.label=="color"){
					allowmul.enabled=false;
					fieldlistinput.enabled = false;
					fieldlistdisplay.enabled = false;
				}else if(item.label=="richtext"){
					allowmul.enabled=false;
					fieldlistinput.enabled = false;
					fieldlistdisplay.enabled = false;
				}else {
					txtValue.visible = txtValue.includeInLayout = true;
					allowmul.selected = false;
					txtValue.restrict=null;
					numberPanel.visible = numberPanel.includeInLayout = false;
					allowmul.visible = allowmul.includeInLayout = true;
					checkboxPanel.visible = checkboxPanel.includeInLayout = false;
					namespanel.visible = namespanel.includeInLayout = false;
					//formualPanel.visible = formualPanel.includeInLayout = false;
					richtitlePanel.visible = richtitlePanel.includeInLayout = false;
				}
				//Alert.show("155:"+formualPanel.visible);
				inputType=item.label;
				//Alert.show("visible:"+digits.visible);
				return item.label;
			}


			private function getDominoFieldKeyWordUISytle(item:Object):String
			{
				allowmul.visible = allowmul.includeInLayout = true;
				if(item.label=="radiobutton"){
					allowmul.enabled = false;
					fieldlistinput.enabled = false;
					fieldlistdisplay.enabled = false;
				}else if(item.label=="combobox") {
					allowmul.enabled = false;
					fieldlistinput.enabled = false;
					fieldlistdisplay.enabled = false;
				}else if(item.enabled=="checkbox") {
					allowmul.enabled = false;
					allowmul.selected=true;
					fieldlistinput.enabled = false;
					fieldlistdisplay.enabled = false;
				}else  {
					allowmul.enabled = true;
					fieldlistinput.enabled = true;
					fieldlistdisplay.enabled = true;
				}
				return item.label;
			}

			private function getDominoFieldObject(item:Object):String
			{
				//defaultvalue
				//inputtranslation
				//inputvalidation
				//hidewhen
				if(item.value=="inputtranslation"){
					defaultvalue.visible = defaultvalue.includeInLayout = false;
					inputtranslation.visible = inputtranslation.includeInLayout = true;
					inputvalidation.visible = inputvalidation.includeInLayout = false;
					//hidewhen.visible = hidewhen.includeInLayout = false;
				}else if(item.value=="inputvalidation"){
					defaultvalue.visible = defaultvalue.includeInLayout = false;
					inputtranslation.visible = inputtranslation.includeInLayout = false;
					inputvalidation.visible = inputvalidation.includeInLayout = true;
					//hidewhen.visible = hidewhen.includeInLayout = false;
				}else if(item.value=="hidewhen"){
					defaultvalue.visible = defaultvalue.includeInLayout = false;
					inputtranslation.visible = inputtranslation.includeInLayout = false;
					inputvalidation.visible = inputvalidation.includeInLayout = false;
					//hidewhen.visible = hidewhen.includeInLayout = true;
				}else{
					defaultvalue.visible = defaultvalue.includeInLayout = true;
					inputtranslation.visible = inputtranslation.includeInLayout = false;
					inputvalidation.visible = inputvalidation.includeInLayout = false;
					//hidewhen.visible = hidewhen.includeInLayout = false;

				}
				return item.value;
			}
			
				


			private function getDominoFieldName(item:Object):String
			{
				return item.label;
			}
			private function getDominoFieldKindName(item:Object):String
			{
				if(item.label=="computed"||item.label=="computedfordisplay"||item.label=="computedwhencomposed"){
					//formualPanel.visible = formualPanel.includeInLayout = true;
					txtValue.visible =txtValue.includeInLayout = false;
					editableFormualPanel.visible =editableFormualPanel.includeInLayout = false;
				}else{
					//formualPanel.visible = formualPanel.includeInLayout = false;
					txtValue.visible =txtValue.includeInLayout = true;
					editableFormualPanel.visible =editableFormualPanel.includeInLayout = true;
				}
				//Alert.show("192:"+formualPanel.visible+":"+item.label);
				return item.label;
			}
			
			private function getDominoFieldTooltip(item:Object):String
			{
				return item.description;
			}
			//change="togCheck_changeHandler(event)"
			private function togCheck_changeHandler(event:Event):void
			{
				//Alert.show(":"+this.keyformulachoices.selected);
				if(this.keyformulachoices.selected==true){
					keywords.visible =keywords.includeInLayout = false;
					keyformulavalue.visible =keyformulavalue.includeInLayout = true;
				}else{
					keywords.visible =keywords.includeInLayout = true;
					keyformulavalue.visible =keyformulavalue.includeInLayout = false;
				}
				 this.selectedItem["keyformulachoices"] = this.keyformulachoices.selected;
			}

			private function allowMultipleValues_changeHandler(event:Event):void
			{
				//Alert.show(":"+this.keyformulachoices.selected);
	
				 this.selectedItem["allowmultivalues"] = this.allowmul.selected;
			}


		

		
			private var pre_label_var:String="normal";

			private function excludeMultipleSelect(item:ListBaseContentHolder):void
			{
				var normal_flag:Boolean = false;
				var execute_array:Array=null;
				var normalSelect:Boolean=false;
				//<!ENTITY % font.styles "normal | bold | italic | underline |
				//strikethrough | superscript | subscript | shadow | emboss | extrude">
				var exclusions_normal:Array = ["bold","italic","underline","strikethrough","superscript","subscript","shadow","emboss","extrude"];
				var exclusions_one_option:Array=["superscript","subscript","shadow","emboss","extrude"];
				var exclusions_exclude_option:Array=["normal","superscript","subscript","shadow","emboss","extrude"];
				var selected_array:Array=[];
				var hasExlude:Boolean=false;
				var hasExludeNum:Number=0;
				var i:int = 0;
				var checkItem:Object = null;
				if(item){
					for (i = 0; i < item.numChildren; i++){
						checkItem = item.getChildAt(i);
							if(checkItem){
								//Alert.show("checkitem:"+checkitem.toString());
								if(checkItem.hasOwnProperty("selected") && checkItem.selected==true  ){
									selected_array.push(checkItem.label);
								}
							}
					}

					//Alert.show("selected_array:"+selected_array.toString());
					if(selected_array&& selected_array.length>0){
						for (i = 0; i < selected_array.length; i++){
							if(selected_array[i].toString()=="normal"){
								hasExlude=true;
							}else if(exclusions_exclude_option.indexOf(selected_array[i].toString())>=0){
								hasExludeNum++;
							}
						}
						if(hasExludeNum>1){
							hasExlude=true;
						}
					}
					//Alert.show("hasExlude:"+hasExlude);
					if(pre_label_var!=null){
						for (i = 0; i < item.numChildren; i++){
							checkItem = item.getChildAt(i);
							if(checkItem){
							//Alert.show("checkitem:"+checkitem.toString());
							if(checkItem.hasOwnProperty("selected") ){
								//	Alert.show("checkitem.label:"+checkitem.label);
									if(checkItem.label==pre_label_var&& hasExlude==true){
										//checkitem.enabled=false;
										checkItem.selected=false;

									}

								}
							}

						}
						//Alert.show("pre_label_var:"+pre_label_var);
						pre_label_var=null;

					}





					for (i = 0; i < item.numChildren; i++){
						checkItem = item.getChildAt(i);
						if(checkItem){
							//Alert.show("checkitem:"+checkitem.toString());
							if(checkItem.hasOwnProperty("selected") && checkItem.selected==true){

							if(checkItem.label=="normal"){
								//Alert.show("checkitem.label:"+checkitem.label);
								execute_array=exclusions_normal;
								normalSelect=true;
								pre_label_var="normal";
								//break;
							}


							}
						}
					}
						//Alert.show("execute_array1:");

					for (i = 0; i < item.numChildren; i++){
						checkItem = item.getChildAt(i);
							//Alert.show("checkitem:"+checkitem.toString());
							if(checkItem.hasOwnProperty("selected") && checkItem.selected==true){
								//Alert.show("checkitem:"+checkitem.label);
								if(checkItem.label=="superscript"){
									if(normalSelect==false)
									pre_label_var="superscript"
									if(execute_array==null)
									execute_array=["subscript","shadow","emboss","extrude"];
										//break;
								}
								if(checkItem.label=="subscript"){
									if(normalSelect==false)
									pre_label_var="subscript"
									if(execute_array==null)
									execute_array=["superscript","shadow","emboss","extrude"];
									//break;
								}
								if(checkItem.label=="shadow"){
									if(normalSelect==false)
									pre_label_var="shadow"
									if(execute_array==null)
									execute_array=["superscript","subscript","emboss","extrude"];
									//break;
								}
								if(checkItem.label=="emboss"){
									if(normalSelect==false)
									pre_label_var="emboss"
									if(execute_array==null)
									execute_array=["superscript","subscript","shadow","extrude"];
									//break;
								}
								if(checkItem.label=="extrude"){
									if(normalSelect==false)
									pre_label_var="extrude"
									if(execute_array==null)
									execute_array=["superscript","subscript","shadow","emboss"];
									//break;
								}
							}
					}

						//Alert.show("execute_array2:");




					for (var j:int = 0; j < item.numChildren; j++){
						var checkitem_child:Object = item.getChildAt(j);
							if(checkitem_child.hasOwnProperty("selected") ){
								if(execute_array!=null && execute_array.length>0){
									if(execute_array.indexOf(checkitem_child.label)>=0){
										checkitem_child.selected=false;
										checkitem_child.enabled=true;

									}else{
										//checkitem_child.selected=true;
										checkitem_child.enabled=true;
									}
								}else{
									checkitem_child.enabled=true;
								}

								if(normalSelect==false){
									if(checkitem_child.label=="normal"){
										checkitem_child.selected=false;
									}
								}
							}
					}
				}
			}

			private var buttonsName:ArrayList=new ArrayList(["leftUpdate","rightUpdate","centerUpdate","fullUpdate","noneUpdate"]);
			private function alignSetting(val:String){
				for (var i:int = 0; i < buttonsName.length; i++)
                {
                    var item:Object = buttonsName.getItemAt(i);
					var elem:Button = this[item];
					var skin:DominoAlignButtonSkin=null;
					if(elem!=null){
						skin = DominoAlignButtonSkin(elem.skin);
							
					}
					if(item==val){
						skin.state= "down";
						skin.setCurrentStateButton("down");
					}else{
						skin.state= "up";
						skin.setCurrentStateButton("up");
					}

				
				}
				
				//setting the align value into text property
				 this.selectedItem["alignPardef"] = val.replace("Update","");

			}
			private var firstLineButtonsName:ArrayList=new ArrayList(["firstCenter","firstLeft","firstRight"]);
			private function firstLineSetting(val:String,event:String){
				for (var i:int = 0; i < firstLineButtonsName.length; i++)
                {
                    var item:Object = firstLineButtonsName.getItemAt(i);
					var elem:Button = this[item];
					var skin:DominoAlignButtonSkin=null;
					if(elem!=null){
						skin = DominoAlignButtonSkin(elem.skin);
							
					}
					if(item==val){
						skin.state= "down";
						skin.setCurrentStateButton("down");
						
					}else{
						skin.state= "up";
						skin.setCurrentStateButton("up");
					}
					

				
				}
			
				if(val=="firstRight"){
						indentInput.visible = indentInput.includeInLayout = true;
						outdentInput.visible = outdentInput.includeInLayout = false;
			
				}else if(val=="firstLeft"){
					
					indentInput.visible = indentInput.includeInLayout = false;
					outdentInput.visible = outdentInput.includeInLayout = true;
				}else{
					//this is center 
					if(event=="click"){
						this.selectedItem["indent"]="0";
						this.selectedItem["outdent"]="0";
					}
					
					//indentInput.value = outdentInput.value = "0";

					indentInput.visible = indentInput.includeInLayout = false;
					outdentInput.visible = outdentInput.includeInLayout = false;
				}
					
			}

			private function initializeAlign():void
			{
				if(this.selectedItem!=null ){
					if(Object(selectedItem).hasOwnProperty("alignPardef")&& this.selectedItem["alignPardef"]!=null){
						var button:String = this.selectedItem["alignPardef"]+"Update";
						
						alignSetting(button);

					}
					var setbutton:String="firstCenter";
					
					if(this.selectedItem!=null){
						if( Object(selectedItem).hasOwnProperty("outdent")&& this.selectedItem["outdent"]!=null && this.selectedItem["outdent"].toString()!="1"){
							setbutton = "firstLeft";
						}else if(Object(selectedItem).hasOwnProperty("indent")&& this.selectedItem["indent"]!=null && this.selectedItem["indent"].toString()!="1"){
							setbutton = "firstRight";
						}else{
							setbutton = "firstCenter";
						}
					}
					

					//Alert.show("setbutton2:"+setbutton);
					firstLineSetting(setbutton,"inital");
				
				}


				//firstLineSetting
			}

	
       
		]]>
	</fx:Script>
	<suportclasses:layout>
        <s:VerticalLayout gap="10" padding="10" horizontalAlign="contentJustify"/>
    </suportclasses:layout>

	<domino:BasicsForm/>
	








	<mx:Accordion id="accordion" width="100%" height="100%">
	<mx:VBox  horizontalAlign="left" label="Field Info" verticalAlign="middle" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10" >	
<forms:DropdownListForm id="ddl"
                            label="Type" textProperty="type"
                            collectionProperty="types" labelField="label"
							labelDisplayFunction="getDominoFieldTypeLabel" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"
							/>
  
    <forms:DropdownListForm id="ddl2"
                            label="Kind" textProperty="kind"
                            collectionProperty="kinds" labelField="label"
							labelDisplayFunction="getDominoFieldKindName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>
 
    
    <!-- for number fileld -->
	<!-- digits,format,punctuated,parens,percent -->
	<forms:TextForm id="txtValue" 
					label="Value" textProperty="text" bindableText="" change="changeHandler(event)"
					restrict="null"/>
	<!-- <forms:TextForm label="Maximum Length" textProperty="maxLength"
					restrict="0-9" change="textform1_changeHandler(event)"/> -->
 <s:BorderContainer 
             cornerRadius="0"
            borderStyle="solid" borderWeight="1" 
            left="10" right="10" top="10" bottom="10" includeInLayout="false" visible="false" id="numberPanel">
	<s:VGroup horizontalAlign="left" verticalAlign="top" percentHeight="100" 
		   paddingLeft="5" >
       
		<forms:DropdownListForm id="ddlformat"
                            label="Format" textProperty="format"
                            collectionProperty="formats" labelField="label"
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>
		 <forms:TextForm id="digits" label="Digits" restrict="0-9" textProperty="digits" change="changeHandler(event)"
				bindableText=""/> 
				<forms:ToggleButtonSelectedForm label="Parens" textProperty="parens"/>
				<forms:ToggleButtonSelectedForm label="Percent" textProperty="percent"/>
				<forms:ToggleButtonSelectedForm label="Punctuated" textProperty="punctuated"/> 
				
		
	</s:VGroup>	
	</s:BorderContainer>


	<s:BorderContainer 
             cornerRadius="0"
            borderStyle="solid" borderWeight="1" 
            left="0" right="0" top="10" bottom="10" includeInLayout="false" visible="false" id="datePanel">
			<s:VGroup horizontalAlign="left" verticalAlign="middle" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10" >
		   <s:Label id="datelabelDisplay"
			 textAlign="start"
			 verticalAlign="middle"
			 fontWeight="bold"
			 maxDisplayedLines="1" fontSize="13"
			 left="5" right="0" verticalCenter="0" 
			 text="Display Date"/>
			<forms:DropdownListForm id="showformat"
                            label="Show" textProperty="show"
                            collectionProperty="shows" labelField="label" valueField="value"
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>
			<forms:DropdownListForm id="dateSelect"
                            label="Date" textProperty="date"
                            collectionProperty="dates" labelField="label" valueField="value"
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>	
			<forms:ToggleButtonSelectedForm label="Show today when appropriate" textProperty="showtodaywhenappropriate" id="showtoday"/>				
			<forms:ToggleButtonSelectedForm label="Alway show four digit year" textProperty="fourdigityear" id="fourdigityear"/>	
			<forms:ToggleButtonSelectedForm label="Show 4 Digit Year For 21st" textProperty="fourdigityearfor21stcentury" id="fourdigityear21st"/>	
			<forms:ToggleButtonSelectedForm label="Omit This Year" textProperty="omitthisyear" id="omitthisyear"/>
			<forms:DropdownListForm id="calendearSelect"
                            label="Calendar" textProperty="calendar"
                            collectionProperty="calendars" labelField="label" 
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>	
	
		

			   <s:Label id="timelabelDisplay"
			 textAlign="start"
			 verticalAlign="middle"
			 fontWeight="bold"
			 maxDisplayedLines="1" fontSize="13"
			 left="5" right="0" verticalCenter="0" 
			 text="Display Time"/>
			<forms:DropdownListForm id="timeSelect"
                            label="Time format" textProperty="time"
                            collectionProperty="times" labelField="label" valueField="value"
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>		
			<forms:DropdownListForm id="zoneSelect"
                            label="Zone format" textProperty="zone"
                            collectionProperty="zones" labelField="label" valueField="value"
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>	
		</s:VGroup>	
	
									
  	</s:BorderContainer>

	<s:BorderContainer 
             cornerRadius="0"
            borderStyle="solid" borderWeight="1" 
            left="0" right="0" top="10" bottom="10" includeInLayout="false" visible="false" id="checkboxPanel">
		<s:VGroup horizontalAlign="left" verticalAlign="middle" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10" >
			<forms:DropdownListForm id="keywordui"
                            label="Keyword UI Type:" textProperty="keywordui"
                            collectionProperty="keyworduis" labelField="label"
							labelDisplayFunction="getDominoFieldKeyWordUISytle" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>
							
					 <forms:TextForm id="numberColumnsinput" label="Number of columns:" restrict="0-9" textProperty="numberColumns" 
				bindableText="" /> 
		<forms:ToggleButtonSelectedForm label="Refresh fields on keywoed change" textProperty="recalonchange" id="recalonchange"/>
		<forms:ToggleButtonSelectedForm label="Refresh choices on document refresh" textProperty="recalcchoices" id="recalcchoices"/>
		<s:CheckBox label="Use formula for choices"  id="keyformulachoices" selected="{keywordsFlag}" change="togCheck_changeHandler(event)"/>				
		<forms:DominoTextInformationForm label="Checkbox key" textProperty="keywords" prompt="Label|Value" id="keywords" includeInLayout="true" visible="true" />
		<forms:DominoFormulaForm label="Key Formula:" textProperty="keywordsformula" prompt="" id="keyformulavalue"  includeInLayout="false" visible="false" />
       </s:VGroup>
		
	</s:BorderContainer>

	<!-- <s:BorderContainer 
             cornerRadius="0"
            borderStyle="solid" borderWeight="1" 
            left="0" right="0" top="10" bottom="10" includeInLayout="false" visible="false" id="editableFormualPanel">
		<s:VGroup horizontalAlign="left" verticalAlign="middle" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10" >
		
		<forms:DominoFormulaForm label="Formula:" textProperty="formula" prompt=""/>
       </s:VGroup>
		
	</s:BorderContainer> -->
	<s:BorderContainer 
             cornerRadius="0"
            borderStyle="solid" borderWeight="1" 
            left="0" right="0" top="10" bottom="10" includeInLayout="true" visible="true" id="formualPanel">
		<s:VGroup horizontalAlign="left" verticalAlign="middle" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10" >
		<forms:DropdownListForm id="editableFormualPanel"
                            label="Client Objects:" textProperty="object"
                            collectionProperty="objects" labelField="label" valueField="value"
							labelDisplayFunction="getDominoFieldObject" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>		
		<forms:DominoFormulaForm label="Formula:" textProperty="defaultvalue" prompt="" id="defaultvalue"  includeInLayout="true" visible="true" />
		<forms:DominoFormulaForm label="Formula:" textProperty="inputtranslation" prompt="" id="inputtranslation"  includeInLayout="false" visible="false" />
		<forms:DominoFormulaForm label="Formula:" textProperty="inputvalidation" prompt="" id="inputvalidation"  includeInLayout="false" visible="false" />
		
       </s:VGroup>
		
	</s:BorderContainer>


	<s:BorderContainer 
             cornerRadius="0"
            borderStyle="solid" borderWeight="1" 
            left="0" right="0" top="10" bottom="10" includeInLayout="false" visible="false" id="namespanel">
			<s:VGroup horizontalAlign="left" verticalAlign="middle" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10" >
		   		<forms:DropdownListForm id="fieldChoicesdialogs"
                            label="Defining where generating a list:" textProperty="choicesdialog"
                            collectionProperty="choicesdialogs" labelField="label" 
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>

				
		   </s:VGroup>	
	</s:BorderContainer>


		<s:BorderContainer 
             cornerRadius="0"
            borderStyle="solid" borderWeight="1" 
            left="0" right="0" top="10" bottom="10" includeInLayout="false" visible="false" id="richtitlePanel">
			<s:VGroup horizontalAlign="left" verticalAlign="middle" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10" >
		  <domino:MultipleCheckbox label="which constructs/actions are allowed:" collectionProperty="limitinputKinds" textProperty="onlyallow"/>	
		 
		 	<forms:DropdownListForm id="firstDisplay"
                            label="First Display:" textProperty="firstdisplay"
                            collectionProperty="limitinputKinds" labelField="label" 
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>

		 	
		
			
		   </s:VGroup>	
		</s:BorderContainer>  
		<s:FormItem label="Allow multiple values" skinClass="skins.FormItemSkin">
        <s:CheckBox selected="{keywordsFlag}"  id="allowmul" change="allowMultipleValues_changeHandler(event)"/>
		</s:FormItem>

	
<!-- <forms:ToggleButtonSelectedForm label="Allowmultiple value" textProperty="allowmultivalues"/> -->
			


		   
	</mx:VBox>
            
	<mx:VBox  horizontalAlign="left" label="Advanced" verticalAlign="top" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10" >	
	<domino:HelpDescription label="Help Description" textProperty="helpDescription" />	   
	<domino:HelpDescription label="Field Hint" textProperty="fieldHint" />	
	<s:Label text="Multi-Value Options"/>
	<s:Label text="Separate values when user enters" color="0xACA9A9"/>
	<domino:MultipleCheckbox id="fieldlistinput" label=""  dynamicLabel="true" collectionProperty="separators" textProperty="listinputseparators"/>
	<s:Label text="Display separate values with " color="0xACA9A9"/>	
	<domino:DropdownListForm id="fieldlistdisplay"
                            label="" textProperty="listdisplayseparator"
                            collectionProperty="separators" labelField="label" valueField="value"
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>				
	<s:Label text="Security Options"/>
	<domino:MultipleCheckbox id="securityOptionsList" label=""  dynamicLabel="true" collectionProperty="securityOptions" textProperty="securityOptionsInput"/>
	<!-- <forms:DropdownListForm id="securityOptionsList"
                            label="Display separate values with :" textProperty="securityOptionsInput"
                            collectionProperty="securityOptions" labelField="label" valueField="value"
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>						 -->
	</mx:VBox > 
          

            <mx:VBox  label="Font" horizontalAlign="left" verticalAlign="top" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10" >
                
	<forms:TextForm label="Size" textProperty="size"
					restrict="0-9"/>
	<domino:ColorPicker id="ddlcolorPicker"  label="Color" textProperty="color"  />
	
	<forms:DropdownListForm id="ddlfontName"
                            label="Font" textProperty="fontName"
                            collectionProperty="fontNames" labelField="label"
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>	
	<s:Label text="Style"/>
	<domino:MultipleCheckbox label=""  dynamicLabel="true" singleSelectOption="normal"
		collectionProperty="fontStyles" textProperty="fontStyle"/>
            </mx:VBox >

            <mx:VBox  label="Paragraph Alignment" percentHeight="100" visible="false" includeInLayout="false" id="alignPanel">
			<s:FormItem  skinClass="skins.FormItemSkin" width="100%">
				<s:HGroup width="100%" verticalAlign="middle">
				
				<s:Label text="Alignment" width="60" direction="rtl"/>
					<s:Button id="leftUpdate" label="" skinClass="skins.DominoAlignButtonSkin" icon="{LoadImage.ALIGN_LEFT}" height="25" width="30"  click="alignSetting('leftUpdate')"/>
					<s:Button id="centerUpdate" label="" skinClass="skins.DominoAlignButtonSkin" icon="{LoadImage.ALIGN_CENTER}" height="25" width="30"  click="alignSetting('centerUpdate')"/>
					<s:Button id="rightUpdate" label="" skinClass="skins.DominoAlignButtonSkin" icon="{LoadImage.ALIGN_RIGHT}" height="25" width="30"  click="alignSetting('rightUpdate')"/>
					<s:Button id="fullUpdate" label="" skinClass="skins.DominoAlignButtonSkin" icon="{LoadImage.ALIGN_JUSTIFY}" height="25" width="30"  click="alignSetting('fullUpdate')"/>
					<s:Button id="noneUpdate" label="" skinClass="skins.DominoAlignButtonSkin" icon="{LoadImage.ALIGN_NONE}" height="25" width="30"  click="alignSetting('noneUpdate')"/>
					
				</s:HGroup>
			</s:FormItem>
			<s:FormItem  skinClass="skins.FormItemSkin" width="100%">
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label text="First Line" width="60" direction="rtl"/>
					<s:Button id="firstCenter" label="" skinClass="skins.DominoAlignButtonSkin"  icon="{LoadImage.FIRST_LINE_JUSTIFY}" height="25" width="30"  click="firstLineSetting('firstCenter','click')"/>
					<s:Button id="firstRight" label="" skinClass="skins.DominoAlignButtonSkin"  icon="{LoadImage.FIRST_LINE_INSIDE_FIRST}" height="25" width="30"  click="firstLineSetting('firstRight','click')"/>
					<s:Button id="firstLeft" label="" skinClass="skins.DominoAlignButtonSkin"  icon="{LoadImage.FIRST_LINE_INSIDE_EXCEPT_FIRST}" height="25" width="30"  click="firstLineSetting('firstLeft','click')"/>
					<domino:TextForm label=":Indent" textProperty="indent" includeInLayout="false" visible="false"  id="indentInput" inputWidth="30"/>
					<domino:TextForm label=":Outdent" textProperty="outdent" includeInLayout="false" visible="false" id="outdentInput" inputWidth="30"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem  skinClass="skins.FormItemSkin" width="100%">
				<s:HGroup width="100%" verticalAlign="middle">
				<s:Label text=": List" width="60" direction="rtl"/>

				<forms:DropdownListForm id="pardeflistsSelect"
                            label="" textProperty="listPardef"
                            collectionProperty="lists" labelField="label" valueField="value" 
							labelDisplayFunction="getDominoFieldObject" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>	
				
				</s:HGroup>
			</s:FormItem>

			<s:FormItem  skinClass="skins.FormItemSkin" width="100%">
				<s:HGroup width="100%" verticalAlign="middle">
				<s:Label text="Spacing" width="60" direction="rtl"/>
				
					
						<forms:DropdownListForm id="spaceSelect"
                            label="Interline" textProperty="spacingInterline"
                            collectionProperty="spaces" labelField="label" valueField="value"
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>	

					
					
						
						<forms:DropdownListForm id="spaceSelect2"
                            label="Above" textProperty="spacingAbove"
                            collectionProperty="spaces" labelField="label"  valueField="value"
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>	
						
						<forms:DropdownListForm id="spaceSelect3"
                            label="Below" textProperty="spacingBelow"
                            collectionProperty="spaces" labelField="label" valueField="value"
							labelDisplayFunction="getDominoFieldName" showTooltipFunction="getDominoFieldTooltip"
                            listItemRenderer="view.primeFaces.forms.renderer.IncludeDropdownListRenderer"/>	

				</s:HGroup>
			</s:FormItem> 

            </mx:VBox >
			 <mx:VBox  label="Paragraph Hide When" horizontalAlign="left" verticalAlign="middle" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10" >		

			<domino:HideOptions textProperty="hide"/>	
			<s:Label text="Hide paragraph if formula is true"/>
            
			<forms:DominoFormulaForm  textProperty="hidewhen" prompt="" id="hidewhen"   />        
		 
            </mx:VBox >
			 <mx:VBox  label="HTML tags">
			 	<domino:TextForm label=":Id" textProperty="htmlId"/>
				<domino:TextForm label=":Class" textProperty="htmlClass"/>
			   	<domino:TextForm label=":Style" textProperty="htmlStyle"/>
			    <domino:TextForm label=":Title" textProperty="htmlTitle"/>
				<domino:TextForm label=":Other" textProperty="htmlOther"/>
              
            </mx:VBox >
        </mx:Accordion>


	
	<forms:ToggleButtonSelectedForm label="Required" textProperty="required"/>
	<forms:TextInformationForm label="Additional information" textProperty="cdataInformation"/>
</suportclasses:BasePropertyEditor>