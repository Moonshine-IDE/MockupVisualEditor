<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="true" minHeight="22"
				creationComplete="onCreationCompletes(event)" removedFromStage="onRemoved(event)">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ToolTipEvent;
			
			import spark.components.DropDownList;
			
			import utils.MoonshineBridgeUtils;
			
			private var isTooltip:Boolean;
			
			override public function set data(value:Object):void
			{
				if (value)
				{
					super.data = value;
					invalidateDisplayList();
					
					trace("vertical scroll: ", this.contentWidth, txtLabel.explicitWidth, this.width,
						(this.owner as DropDownList).scroller.horizontalScrollBar.explicitMaxWidth,
						(this.owner as DropDownList).scroller.horizontalScrollBar.explicitWidth,
						(this.owner as DropDownList).scroller.horizontalScrollBar.measuredWidth,
						(this.owner as DropDownList).scroller.horizontalScrollBar.track.visible,
						(this.owner as DropDownList).scroller.horizontalScrollBar.viewport.contentWidth,
						(this.owner as DropDownList).scroller.horizontalScrollBar.viewport.width,
						this.width);
					
					if ((this.owner as DropDownList).scroller.horizontalScrollBar.viewport.contentWidth > this.width)
					{
						trace(":::: "+ this.width, this.owner.width);
						if (!txtLabel.hasEventListener(ToolTipEvent.TOOL_TIP_CREATE))
						{
							txtLabel.addEventListener(ToolTipEvent.TOOL_TIP_CREATE, MoonshineBridgeUtils.moonshineBridge.getCustomTooltipFunction(), false, 0, true);
							txtLabel.addEventListener(ToolTipEvent.TOOL_TIP_SHOW, MoonshineBridgeUtils.moonshineBridge.getPositionTooltipFunction(), false, 0, true);
						}
						
						txtLabel.toolTip = data.resourcePathWithoutRoot;
					}
					/*else if (txtLabel.hasEventListener(ToolTipEvent.TOOL_TIP_CREATE))
					{
						txtLabel.removeEventListener(ToolTipEvent.TOOL_TIP_CREATE, MoonshineBridgeUtils.moonshineBridge.getCustomTooltipFunction());
						txtLabel.removeEventListener(ToolTipEvent.TOOL_TIP_SHOW, MoonshineBridgeUtils.moonshineBridge.getPositionTooltipFunction());
					}*/
				}
			}
			
			protected function onCreationCompletes(event:FlexEvent):void
			{
			}
			
			protected function onRemoved(event:Event):void
			{
				if (isTooltip)
				{
					txtLabel.removeEventListener(ToolTipEvent.TOOL_TIP_CREATE, MoonshineBridgeUtils.moonshineBridge.getCustomTooltipFunction());
					txtLabel.removeEventListener(ToolTipEvent.TOOL_TIP_SHOW, MoonshineBridgeUtils.moonshineBridge.getPositionTooltipFunction());
					isTooltip = false;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Label id="txtLabel" text="{data.resourcePathWithoutRoot}"
			 verticalCenter="0" left="4" right="4"
			 maxDisplayedLines="1" mouseChildren="false" mouseFocusEnabled="false"/>
</s:ItemRenderer>