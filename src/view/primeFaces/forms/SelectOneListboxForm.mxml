<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<suportclasses:BasePropertyEditorForm
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:suportclasses="view.suportClasses.*"
        skinClass="skins.FormSkin"
        creationComplete="onTabFormCreationComplete(event)" xmlns:forms="view.forms.*">
	<fx:Script>
		<![CDATA[

			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import spark.events.GridItemEditorEvent;
			
			import data.ConstantsItems;
			import vo.SelectItem;
			
			import view.interfaces.IHistorySurfaceComponent;
			import view.primeFaces.surfaceComponents.components.SelectOneListbox;
			import view.suportClasses.PropertyChangeReferenceCustomHandlerBasic;

			private static const DEFAULT_LABEL:String = "Title";

			private var _label:String = "Items";
	
			[Bindable("labelChange")]
			public function get label():String
			{
				return this._label;
			}
	
			public function set label(value:String):void
			{
				if (this._label === value)
				{
					return;
				}
				this._label = value;
				this.dispatchEvent(new Event("labelChange"));
			}

			[Bindable("change")]
			protected function get selectedListbox():SelectOneListbox
			{
				return selectedItem as SelectOneListbox;
			}

			private function editSelectedItem():void
			{
				updatePropertyEditorPriorToEdit();
	
				dgColumns.ensureCellIsVisible(dgColumns.selectedIndex);
				dgColumns.startItemEditorSession(dgColumns.selectedIndex, 0);
			}
	
			private function addItemButton_clickHandler(event:MouseEvent):void
			{
				var listItem:SelectItem = new SelectItem();
				listItem.itemLabel = DEFAULT_LABEL;
				dgColumns.dataProvider.addItem(listItem);
				
				updateToOwner(ConstantsItems.ITEM_ADD);
	
				dgColumns.validateNow();
				dgColumns.setSelectedIndex(dgColumns.dataProvider.length - 1);
				callLater(editSelectedItem);
			}
	
			private function editItemButton_clickHandler(event:MouseEvent):void
			{
				this.editSelectedItem();
			}
	
			private function deleteItemButton_clickHandler(event:MouseEvent):void
			{
				updateToOwner(ConstantsItems.ITEM_DELETE, dgColumns.selectedIndex);
				dgColumns.dataProvider.removeItemAt(dgColumns.selectedIndex);
			}
	
			private function onTabFormCreationComplete(event:FlexEvent):void
			{
				updateColumnList();
			}
	
			private function updateColumnList():void
			{
				if (!dgColumns) return;
				dgColumns.dataProvider = (selectedItem as SelectOneListbox).dataProvider;
			}
			
			private function updateToOwner(updateType:String = null, itemIndex:int = -1):void
			{
				(selectedItem as SelectOneListbox).updateHistoryState(updateType, itemIndex);
			}
			
			protected function onRowEditStarts(event:GridItemEditorEvent):void
			{
				updatePropertyEditorPriorToEdit();
			}
			
			protected function onRowEditEnd(event:GridItemEditorEvent):void
			{
				updateToOwner(ConstantsItems.ITEM_EDIT, dgColumns.selectedIndex);
			}
			
			private function updatePropertyEditorPriorToEdit():void
			{
				registerClassAlias("SelectItem", SelectItem);
				var historyObject:Object = {
					object: ObjectUtil.copy(dgColumns.dataProvider[dgColumns.selectedIndex]),
					index: dgColumns.selectedIndex
				};
				(selectedItem as IHistorySurfaceComponent).propertyChangeFieldReference = new PropertyChangeReferenceCustomHandlerBasic(selectedItem as IHistorySurfaceComponent, "updateItemAt", historyObject);
			}
			
		]]>
	</fx:Script>
	
    <suportclasses:layout>
        <s:FormLayout horizontalAlign="contentJustify"/>
    </suportclasses:layout>
	
	<forms:TextForm label="Value" textProperty="value"
					prompt="#\{bean.property\}"/>

    <s:FormItem label="{label}" skinClass="skins.StackedFormItemSkin" height="100%">
		<s:DataGrid id="dgColumns"
					width="100%" height="100%"
					editable="true" sortableColumns="false" draggableColumns="false"
					selectedItem="@{selectedListbox.selectedItem}"
					gridItemEditorSessionSave="onRowEditEnd(event)" gridItemEditorSessionStart="onRowEditStarts(event)">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="itemLabel" headerText="Title"/>
					<s:GridColumn dataField="itemValue" headerText="Value"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
        <s:HGroup>
            <s:Button id="addDtColumnBtn" width="100%" styleName="addDataProviderItemButton" toolTip="Add Item"
                      click="addItemButton_clickHandler(event)"/>
            <s:Button id="editDtColumnBtn" styleName="editDataProviderItemButton" toolTip="Edit Item"
					  enabled="{dgColumns.selectedIndex !== -1 &amp;&amp; dgColumns.dataProvider.length > 1}"
                      click="editItemButton_clickHandler(event)"/>
            <s:Button id="deleteDtColumnBtn" styleName="deleteDataProviderItemButton" toolTip="Delete Item"
                      enabled="{dgColumns.selectedIndex !== -1 &amp;&amp; dgColumns.dataProvider.length > 1}"
                      click="deleteItemButton_clickHandler(event)"/>
        </s:HGroup>
    </s:FormItem>
</suportclasses:BasePropertyEditorForm>