<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<suportclasses:BasePropertyEditorForm xmlns:fx="http://ns.adobe.com/mxml/2009"
                                      xmlns:s="library://ns.adobe.com/flex/spark"
                                        xmlns:mx="library://ns.adobe.com/flex/mx"
                                      xmlns:suportclasses="view.suportClasses.*"
                                      skinClass="skins.FormSkin"
                                      creationComplete="onTextFormCreationComplete(event)">
  
   <suportclasses:layout>
		<s:FormLayout />
	</suportclasses:layout>
    
<s:FormItem  skinClass="skins.FormItemSkin" width="100%">
		<s:HGroup width="100%" verticalAlign="middle">
        <s:Label text="{label}" width="40"/>
		<mx:ColorPicker id = "colorPicker" 
               showTextField = "true" change="color_changeHandler(event)" selectedColor = "0xFFFFFF" />
         <s:Label text="Selected: #{colorstr}" id="colorLabel"/> 
        
      
			
		</s:HGroup>
	</s:FormItem>

    <fx:Script><![CDATA[
        import mx.binding.utils.BindingUtils;
        import mx.binding.utils.ChangeWatcher;
        import mx.events.FlexEvent;
        import mx.controls.Alert;

	    

        import view.interfaces.ISurfaceComponent;
        import global.domino.DominoGlobalTokens;

        private var _binding:ChangeWatcher;
        private var  colorstr:String ="ffffff";

        [Bindable]
        public var prompt:String;
        [Bindable]
        public var restrict:String;

        [Bindable]
        public var bindableText:String;

        private var _label:String = "Text";

        [Bindable("labelChange")]
        public function get label():String
        {
            return this._label;
        }

        public function set label(value:String):void
        {
            if (this._label === value)
            {
                return;
            }
            this._label = value;
            this.dispatchEvent(new Event("labelChange"));
        }

        [Bindable]
        private var _maxChar:int;

        public function set maxChar(value:int):void
        {
            _maxChar = value;
        }

        public function get maxChar():int
        {
            return _maxChar;
        }

        private var _textProperty:String = "text";

        [Bindable("change")]
        public function get textProperty():String
        {
            return this._textProperty;
        }

        public function set textProperty(value:String):void
        {
            if (this._textProperty === value)
            {
                return;
            }
            this._textProperty = value;
            this.updateBinding();
            this.dispatchEvent(new Event(Event.CHANGE));
        }

        override public function set selectedItem(value:ISurfaceComponent):void
        {
            super.selectedItem = value;
            this.updateBinding();
        }

        private function color_changeHandler(event:Event):void
        {
            if (!this.selectedItem) return;

              colorstr=colorPicker.selectedColor.toString(16);
           
            if(colorstr.length <6){
                for(var i:int=colorstr.length;i<6;i++){
                    colorstr="0"+colorstr;
                }
            }
            this.selectedItem[this._textProperty] = "#"+colorstr;
            this.dispatchEvent(new Event(Event.CHANGE));
            colorLabel.text= "Selected:"+colorstr;
            
        }

        private function updateBinding():void
        {
            if (this._binding)
            {
                this._binding.unwatch();
                this._binding = null;
            }
            if (this.selectedItem === null)
            {
                return;
            }
            this._binding = BindingUtils.bindProperty(this, "bindableText", this.selectedItem, this._textProperty, false, true);
        }

        private function onTextFormCreationComplete(event:FlexEvent):void
        {
            var uint_color:uint=0;
           if(this.selectedItem[this._textProperty]!=null && this.selectedItem[this._textProperty].length>0){
              var pre_color:String = this.selectedItem[this._textProperty];
              if(pre_color.indexOf("#")<0){
                
            
                var dpCount:int =DominoGlobalTokens.Colors.length;
                for (var i:int = 0; i < dpCount; i++)
                {
                    var item:Object = DominoGlobalTokens.Colors.getItemAt(i);
                    if(item["label"]==pre_color){
                         uint_color = uint("0x" + item["htmlcolor"].substr(1));
                    }
                }
              }else{
                  //this is a hex value
                  uint_color = uint("0x" + pre_color.substr(1)); 
              }
              
               colorPicker.selectedColor=uint_color;
               colorLabel.text=this.selectedItem[this._textProperty];
           }
        }
        ]]></fx:Script>
</suportclasses:BasePropertyEditorForm>
