<?xml version="1.0" encoding="utf-8"?>
<forms:BasePropertyEditorForm xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:forms="view.propertyEditors.forms.*">

	<forms:layout>
		<s:FormLayout horizontalAlign="contentJustify"/>
	</forms:layout>

	<s:FormHeading label="Position"/>
	<s:FormItem label="X">
		<s:TextInput id="xInput" width="100%"
			text="{selectedComponent.x}"
			keyDown="xInput_keyDownHandler(event)"
			focusOut="commitX()" enter="commitX()"/>
	</s:FormItem>
	<s:FormItem label="Y">
		<s:TextInput id="yInput" width="100%"
			text="{selectedComponent.y}"
			keyDown="yInput_keyDownHandler(event)"
			focusOut="commitY()" enter="commitY()"/>
	</s:FormItem>
	<s:FormHeading label="Size"/>
	<s:FormItem label="Width">
		<s:TextInput id="widthInput" width="100%"
			text="{selectedComponentComputedWidth}"
			keyDown="widthInput_keyDownHandler(event)"
			focusOut="commitWidth()" enter="commitWidth()"/>
	</s:FormItem>
	<s:FormItem label="Height">
		<s:TextInput id="heightInput" width="100%"
			text="{selectedComponentComputedHeight}"
			keyDown="heightInput_keyDownHandler(event)"
			focusOut="commitHeight()" enter="commitHeight()"/>
	</s:FormItem>
	<s:FormHeading label="Layering"/>
	<s:Group>
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:Button styleName="bringToFrontButton" toolTip="Bring to Front" click="bringToFrontButton_clickHandler(event)"/>
		<s:Button styleName="bringForwardButton" toolTip="Bring Forward" click="bringForwardButton_clickHandler(event)"/>
		<s:Button styleName="sendBackwardButton" toolTip="Send Backward" click="sendBackwardButton_clickHandler(event)"/>
		<s:Button styleName="sendToBackButton" toolTip="Send to Back" click="sendToBackButton_clickHandler(event)"/>
	</s:Group>
	
	<fx:Script><![CDATA[
		import mx.core.IVisualElement;
		import mx.core.IVisualElementContainer;
		import mx.core.UIComponent;

		[Bindable("change")]
		private function get selectedComponent():UIComponent
		{
			//x, y, width, and height aren't bindable on interfaces used by
			//UIComponent, so we need to give the compiler a little hint here
			return UIComponent(this.selectedItem);
		}
		
		public function get selectedComponentComputedWidth():String
		{
			if (!isNaN(selectedComponent.percentWidth)) return selectedComponent.percentWidth +"%";
			return selectedComponent.width.toString();
		}
		
		public function get selectedComponentComputedHeight():String
		{
			if (!isNaN(selectedComponent.percentHeight)) return selectedComponent.percentHeight +"%";
			return selectedComponent.height.toString();
		}
		
		private function commitX():void
		{
			this.selectedItem.x = parseFloat(this.xInput.text);
			this.xInput.selectAll();
		}

		private function commitY():void
		{
			this.selectedItem.y = parseFloat(this.yInput.text);
			this.yInput.selectAll();
		}

		private function commitWidth():void
		{
			if (this.widthInput.text.indexOf("%") != -1) this.applyPercentageWidthHeight(true);
			else
			{
				var newWidth:Number = parseFloat(this.widthInput.text);
				this.applyMinAndMaxWidth(newWidth);
			}
			this.widthInput.selectAll();
		}

		private function commitHeight():void
		{
			if (this.heightInput.text.indexOf("%") != -1) this.applyPercentageWidthHeight(false);
			else
			{
				var newHeight:Number = parseFloat(this.heightInput.text);
				this.applyMinAndMaxHeight(newHeight);
			}
			this.heightInput.selectAll();
		}

		private function xInput_keyDownHandler(event:KeyboardEvent):void
		{
			if(event.keyCode === Keyboard.UP)
			{
				event.preventDefault();
				//this behavior matches how Animate CC increases x or y
				if(event.shiftKey)
				{
					this.selectedItem.x = Math.floor(parseFloat(this.xInput.text) / 10) * 10 + 10;
				}
				else
				{
					this.selectedItem.x = Math.floor(parseFloat(this.xInput.text)) + 1;
				}
				this.xInput.selectAll();
			}
			else if(event.keyCode === Keyboard.DOWN)
			{
				event.preventDefault();
				//this behavior matches how Animate CC decreases x or y
				if(event.shiftKey)
				{
					this.selectedItem.x = Math.ceil(parseFloat(this.xInput.text) / 10) * 10 - 10;
				}
				else
				{
					this.selectedItem.x = Math.ceil(parseFloat(this.xInput.text)) - 1;
				}
				this.xInput.selectAll();
			}
		}

		private function yInput_keyDownHandler(event:KeyboardEvent):void
		{
			if(event.keyCode === Keyboard.UP)
			{
				event.preventDefault();
				if(event.shiftKey)
				{
					this.selectedItem.y = Math.floor(parseFloat(this.yInput.text) / 10) * 10 + 10;
				}
				else
				{
					this.selectedItem.y = Math.floor(parseFloat(this.yInput.text)) + 1;
				}
				this.yInput.selectAll();
			}
			else if(event.keyCode === Keyboard.DOWN)
			{
				event.preventDefault();
				if(event.shiftKey)
				{
					this.selectedItem.y = Math.ceil(parseFloat(this.yInput.text) / 10) * 10 - 10;
				}
				else
				{
					this.selectedItem.y = Math.ceil(parseFloat(this.yInput.text)) - 1;
				}
				this.yInput.selectAll();
			}
		}

		private function widthInput_keyDownHandler(event:KeyboardEvent):void
		{
			if(event.keyCode === Keyboard.UP)
			{
				event.preventDefault();
				if(event.shiftKey)
				{
					var newWidth:Number = Math.floor(parseFloat(this.widthInput.text) / 10) * 10 + 10;
				}
				else
				{
					newWidth = Math.floor(parseFloat(this.widthInput.text)) + 1;
				}
				this.applyMinAndMaxWidth(newWidth);
				this.widthInput.selectAll();
			}
			else if(event.keyCode === Keyboard.DOWN)
			{
				event.preventDefault();
				if(event.shiftKey)
				{
					newWidth = Math.ceil(parseFloat(this.widthInput.text) / 10) * 10 - 10;
				}
				else
				{
					newWidth = Math.ceil(parseFloat(this.widthInput.text)) - 1;
				}
				this.applyMinAndMaxWidth(newWidth);
				this.widthInput.selectAll();
			}
		}

		private function heightInput_keyDownHandler(event:KeyboardEvent):void
		{
			if(event.keyCode === Keyboard.UP)
			{
				event.preventDefault();
				if(event.shiftKey)
				{
					var newHeight:Number = Math.floor(parseFloat(this.heightInput.text) / 10) * 10 + 10;
				}
				else
				{
					newHeight = Math.floor(parseFloat(this.heightInput.text)) + 1;
				}
				this.applyMinAndMaxHeight(newHeight);
				this.heightInput.selectAll();
			}
			else if(event.keyCode === Keyboard.DOWN)
			{
				event.preventDefault();
				if(event.shiftKey)
				{
					newHeight = Math.ceil(parseFloat(this.heightInput.text) / 10) * 10 - 10;
				}
				else
				{
					newHeight = Math.ceil(parseFloat(this.heightInput.text)) - 1;
				}
				this.applyMinAndMaxHeight(newHeight);
				this.heightInput.selectAll();
			}
		}

		private function applyMinAndMaxWidth(newWidth:Number):void
		{
			var minWidth:Number = this.selectedItem.minWidth;
			var maxWidth:Number = this.selectedItem.maxWidth;
			if(newWidth < minWidth)
			{
				newWidth = minWidth;
			}
			else if(newWidth > maxWidth)
			{
				newWidth = maxWidth;
			}
			this.selectedItem.percentWidth = NaN;
			this.selectedItem.width = newWidth;
			//the text might not have updated if the width property is the same
			//but the old text value is different
			this.widthInput.text = this.selectedItem.width.toString();
		}
		
		private function applyPercentageWidthHeight(isWidth:Boolean):void
		{
			var pattern:RegExp = new RegExp(/(%)/g);
			var newValue:String = isWidth ? this.widthInput.text.replace(pattern, "") : this.heightInput.text.replace(pattern, "");
			
			if (isWidth)
			{
				this.selectedItem.width = 0;
				this.selectedItem.percentWidth = Number(newValue);
			}
			else
			{
				this.selectedItem.height = 0;
				this.selectedItem.percentHeight = Number(newValue);
			}
		}

		private function applyMinAndMaxHeight(newHeight:Number):void
		{
			var minHeight:Number = this.selectedItem.minHeight;
			var maxHeight:Number = this.selectedItem.maxHeight;
			if(newHeight < minHeight)
			{
				newHeight = minHeight;
			}
			else if(newHeight > maxHeight)
			{
				newHeight = maxHeight;
			}
			this.selectedItem.height = newHeight;
			//the text might not have updated if the height property is the same
			//but the old text value is different
			this.heightInput.text = this.selectedItem.height.toString();
		}

		private function bringToFrontButton_clickHandler(event:MouseEvent):void
		{
			var parent:IVisualElementContainer = IVisualElementContainer(this.selectedItem.parent);
			parent.setElementIndex(IVisualElement(this.selectedItem), parent.numElements - 1);
		}

		private function bringForwardButton_clickHandler(event:MouseEvent):void
		{
			var parent:IVisualElementContainer = IVisualElementContainer(this.selectedItem.parent);
			var oldIndex:int = parent.getElementIndex(IVisualElement(this.selectedItem));
			var maxIndex:int = parent.numElements - 1;
			if(oldIndex === maxIndex)
			{
				//we're already completely forward
				return;
			}
			parent.setElementIndex(IVisualElement(this.selectedItem), oldIndex + 1);
		}

		private function sendBackwardButton_clickHandler(event:MouseEvent):void
		{
			var parent:IVisualElementContainer = IVisualElementContainer(this.selectedItem.parent);
			var oldIndex:int = parent.getElementIndex(IVisualElement(this.selectedItem));
			if(oldIndex === 0)
			{
				//we're already completely backward
				return;
			}
			parent.setElementIndex(IVisualElement(this.selectedItem), oldIndex - 1);
		}

		private function sendToBackButton_clickHandler(event:MouseEvent):void
		{
			var parent:IVisualElementContainer = IVisualElementContainer(this.selectedItem.parent);
			parent.setElementIndex(IVisualElement(this.selectedItem), 0);
		}
		]]></fx:Script>
</forms:BasePropertyEditorForm>
