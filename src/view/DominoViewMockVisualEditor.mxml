<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:view="view.*" 
		 xmlns:dataTable="view.primeFaces.surfaceComponents.components.DataTable"
		 creationComplete="onComplete()"
		 xmlns:collapsiblehdivider="components.collapsibleHDivider.*">
    <collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup percentWidth="100" bottom="0" top="0" gap="0" minWidth="250">
		 		<s:DataGrid id="dgColumns"
					width="90%" height="100%" requestedMinRowCount="4"
					editable="true" sortableColumns="false" draggableColumns="true"
					dragEnabled="true" dragMoveEnabled="true" dropEnabled="true"
					dragStart="onRowDragStarts(event)" dragDrop="onRowDragAndDropped(event)"
					dataProvider="{rowsDataProvider}">
                        <s:columns>
                           <s:ArrayList>
								<s:GridColumn dataField="label" headerText="Row number"/>
							</s:ArrayList>
                        </s:columns>
		        </s:DataGrid>
                <s:Group  width="10%"  minWidth="250" minHeight="600" height="100%">
                        <s:VGroup horizontalAlign="left" verticalAlign="top" percentHeight="100" percentWidth="100"
                                    paddingLeft="0" paddingRight="0">
                        	<view:PropertyEditorHeader id="propertyEditorHeader" width="100%" />
							<s:FormItem  skinClass="skins.FormItemSkin" width="100%">
									<s:Label text="Viwe Name:" width="100%" direction="rtl"/>
									 <s:TextInput id="viewNameInput"
                                            text=""  width="100" maxChars="100" 
                                            enter="viewNameInput_changeHandler(event)" focusOut="viewNameInput_changeHandler(event)" skinClass="skins.TextInputSkin" prompt="This is title for the action"/>
                                   
							 </s:FormItem> 
                            <s:FormItem  skinClass="skins.FormItemSkin" width="100%">
                            
                            
                                <s:Label text="Configuration(View):View Selection" width="100%" direction="rtl"/>
                                <s:TextArea id="viewSelection"
                                text="" width="100%" minWidth="156" editable="true" selectable="true"
                                prompt="View Selection"
                                />
                               
                                
                            
                            </s:FormItem> 
							<s:FormItem  skinClass="skins.FormItemSkin" width="100%">
							<s:BorderContainer cornerRadius="0"  borderStyle="solid" borderWeight="1" left="10" right="10" top="10" bottom="10" id="columnPanel">
								<s:VGroup horizontalAlign="left" verticalAlign="top" percentHeight="100" paddingLeft="5" >
									<s:Label id="columnHeaderText"
											textAlign="start"
											verticalAlign="middle"
											fontWeight="bold"
											maxDisplayedLines="1" fontSize="13"
											left="5" right="0" top="5" verticalCenter="0" 
											text="Column Header Text"/>
									<s:TextInput id="titleInput"
                     						text=""  width="100" skinClass="skins.TextInputSkin" prompt="Column title"/>	
									<s:Label id="columnValue"
											textAlign="start"
											verticalAlign="middle"
											fontWeight="bold"
											maxDisplayedLines="1" fontSize="13"
											left="5" right="0" verticalCenter="0" 
											text="Column"/>
										<s:HGroup>
											<s:RadioButton id="columnValueFieldRadioBtn" label="Field" groupName="columnValueType"/>
											<s:RadioButton id="columnValueFormulaRadioBtn" label="Formula" groupName="columnValueType"/>	
										</s:HGroup>	
									 <s:TextArea id="columnValueFormula"
										text="" width="100%" minWidth="156" editable="true" selectable="true"
										prompt="Formula for column value"
										/>
										<s:Button id="newColumnBtn" label="Add Column"   height="25" width="100"  click="addColumn()"/>			
								</s:VGroup>
							</s:BorderContainer>
							 </s:FormItem> 
					</s:VGroup>		   
                </s:Group>
	</collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup>



<fx:Script><![CDATA[

	import mx.events.FlexEvent;
    import flash.events.Event;
	import mx.events.DragEvent;
    import spark.events.IndexChangeEvent;
	import mx.collections.ArrayList;
	import utils.MoonshineBridgeUtils;

	import view.interfaces.IVisualEditorLibraryBridge;
	import spark.components.Alert;

	private var viewFileName:String =  "" ;

	private var _hasChanged:Boolean = false;


	  public function get hasChanged():Boolean
        {
            return _hasChanged;
        }

	public function set hasChanged(value:Boolean):void
	{
		if (_hasChanged != value)
		{
			_hasChanged = value;
			dispatchEvent(new Event(Event.CHANGE));
		}
	}

  	[Bindable]
	private var rowsDataProvider:ArrayList = new ArrayList();


	protected function onRowDragStarts(event:DragEvent):void
    {
        dgColumns.endItemEditorSession();
    }

    protected function onRowDragAndDropped(event:DragEvent):void
    {
        dgColumns.callLater(updateToOwner, [true]);
    }

    private function updateToOwner(isAll:Boolean = false, updateType:String = null, itemIndex:int = -1):void
    {
       
    }

	public function onComplete():void {

        propertyEditorHeader.componentName = "Domino View";

		var initalCol:ArrayList = new ArrayList();
		var tmpColumn:GridColumn=new GridColumn();
		tmpColumn.headerText="#"
		tmpColumn.dataField="id"
		tmpColumn.width=30;
		initalCol.addItem(tmpColumn);
		dgColumns.columns=initalCol;
		
    
    }

	private function addColumn():void 
	{
		var columnXML:XML=new XML("<column width='30'/> ");
		var codeXML:XML=null;
		columnXML.@sort="ascending";
		var preFix:String="";
		if (columnValueType.selectedValue=="Field"){
			preFix="FormFile:";
			columnXML.@itemname=titleInput.text;
		}else  if(columnValueType.selectedValue=="Formula"){
			preFix="Formula:";
			codeXML=new XML("<code/>");
			codeXML.@event="value";
			var codeFormulaXML:XML=new XML("<formula>"+columnValueFormula.text+"</formula>");
			codeXML.appendChild(codeFormulaXML);
		}
		var tmpColumn:GridColumn=new GridColumn();
		tmpColumn.headerText=titleInput.text;
		tmpColumn.dataField=encodeBase64ForColumnDataField(preFix,columnValueFormula.text);
		dgColumns.columns.addItem(tmpColumn);
		hasChanged=true;

		var xml:XML=loadLocalFileToXML(MoonshineBridgeUtils.currentFilePath);
		if(xml!=null){
			xml=xml.replace("$ViewName","NewView");
			var columnHeaderXML:XML=new XML("<columnheader/> ");
			columnHeaderXML.@title=titleInput.text;
			var columnHeaderFontXML:XML = new XML("<font/>");
			columnHeaderFontXML.@size="9pt";
			columnHeaderFontXML.@style="bold";
			columnHeaderXML.appendChild(columnHeaderFontXML);

			columnXML.appendChild(columnHeaderXML);
			if(codeXML!=null){
				columnXML.appendChild(codeXML);
			}

			xml.appendChild(columnXML);

			_fileStreamMoonshine.open(_fileMoonshine, FileMode.WRITE);
			_fileStreamMoonshine.writeUTFBytes(xml.toXMLString());
			_fileStreamMoonshine.close();
			

		}

	}

	private function viewNameInput_changeHandler(event:Event):void
	{
	}

	CONFIG::MOONSHINE
	{		
		
		import flash.filesystem.File;
		import flash.filesystem.FileStream;	
		import utils.StringHelper;

		private var _fileMoonshine:File;
		private var _fileStreamMoonshine:FileStream;

		public function set moonshineBridge(value:IVisualEditorLibraryBridge):void
		{
			MoonshineBridgeUtils.moonshineBridge = value;
		}
		
		public function set visualEditorFilePath(value:String):void
		{
			MoonshineBridgeUtils.currentFilePath = value;
		}

		public function get visualEditorFilePath():String
		{
			return _fileMoonshine.nativePath;
		}

		public function saveEditedFile():void
		{
			if (!_fileStreamMoonshine) return;

		
		}

		private function loadLocalFileToXML(filePath:String):XML
		{
			_fileMoonshine = createNewFileIfNotExists(filePath);
			_fileStreamMoonshine = new FileStream();
			_fileStreamMoonshine.open(_fileMoonshine, FileMode.READ);

			var data:String = _fileStreamMoonshine.readUTFBytes(_fileMoonshine.size);
			var xml:XML = new XML(data);
			_fileStreamMoonshine.close();

			return xml;
		}

		public function loadFile(filePath:String):void
		{
			var xml:XML = loadLocalFileToXML(filePath)
			if(xml!=null){
				for each(var col:XML in xml..column) //no matter of depth Note here
				{
				
					var colChilren:XMLList = col.children();
					var itemname:String= col.@itemname;
					//Alert.show("colChilren:"+colChilren.length());
					if(colChilren.length() > 0)
					{
						var tmpColumn:GridColumn=new GridColumn();
						tmpColumn.headerText=col.columnheader.@title;
						if(itemname!=null&& itemname.indexOf("$")<0){
							tmpColumn.dataField=encodeBase64ForColumnDataField("formField",itemname);
						}else{
							var formula:String=getColumnFormula(col);
							if(formula!=null&& formula.length>0){
								tmpColumn.dataField=encodeBase64ForColumnDataField("formula",formula);
							}
							
						}
						
						dgColumns.columns.addItem(tmpColumn);
					}
				}

			}
		
		

			

			
		}

		//This method will get the formula and base64 for column
		private function getColumnFormula(column:XML):String 
		{
			var formula:String="";
			if(column.code!=null){
				if(column.code.formula!=null){
					formula=StringHelper.base64Encode(column.code.formula.text());
				}
			}

			return formula;

		}

		private function encodeBase64ForColumnDataField(dataFieldType:String,dataFieldValue:String):String 
		{
			var encodeDataField:String="";
			if(dataFieldType=="formField"){
				encodeDataField="FormFile:"
			}
			if(dataFieldType=="formula"){
				encodeDataField="Formula:"
			}
			encodeDataField=encodeDataField+dataFieldValue;
			encodeDataField=StringHelper.base64Encode(encodeDataField);
			return encodeDataField;

		}

		private function createNewFileIfNotExists(filePath:String):File
		{
			var tempFileMoonshine:File = new File(filePath);

			if (!tempFileMoonshine.exists)
			{
				
				var xml:XML = new XML("<root/>");
				var tempFileStreamMoonshine:FileStream = new FileStream();
				tempFileStreamMoonshine.open(tempFileMoonshine, FileMode.WRITE);
				tempFileStreamMoonshine.writeUTFBytes(xml.toXMLString());
				tempFileStreamMoonshine.close();
			}

			return tempFileMoonshine;
		}
	}

			
		

]]></fx:Script> 
<fx:Declarations>
		<s:RadioButtonGroup id="columnValueType"/>
</fx:Declarations>		
</s:Group>         