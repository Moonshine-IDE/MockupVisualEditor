<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:view="view.*" xmlns:collapsiblehdivider="components.collapsibleHDivider.*"
		 creationComplete="onVisualEditorCreationComplete(event)">
	<!--This style import is only for SWC ant compilation - remove it in case of app compilation -->
	<fx:Style source="defaults.css"/>
	<s:BorderContainer id="toolbar" top="0" left="0" right="0">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle"/>
		</s:layout>
		<s:Button styleName="newButton" toolTip="New Mockup" click="newButton_clickHandler(event)"/>
		<s:Button styleName="openButton" toolTip="Open Mockup" click="loadButton_clickHandler(event)"/>
		<s:Button styleName="saveButton" toolTip="Save Mockup" click="saveButton_clickHandler(event)"/>
	</s:BorderContainer>
	<collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup percentWidth="100" bottom="0" top="0" gap="0" minWidth="250">
		<view:ComponentList id="componentList" percentWidth="20" percentHeight="100"
							visualEditorType="{_visualEditorType}" minWidth="150"/>
		<s:Scroller percentWidth="70" percentHeight="100">
			<s:Group>
				<view:EditingSurface id="editingSurface" visualEditorType="{_visualEditorType}"
									 organizer="{componentsOrganizer}" left="0" right="0" top="0" bottom="0"/>
			</s:Group>
		</s:Scroller>
		<s:Group width="10%" minWidth="250" height="100%">
			<view:PropertyEditorContainer id="propertyEditor"
										  percentWidth="100" top="0" bottom="20"
										  selectedItem="{editingSurface.selectedItem}"
										  visible="{bbPropertyPanel.selectedIndex==0}"/>
			<view:ComponentsOrganizer id="componentsOrganizer"
									  width="100%" top="0" bottom="20"
									  editingSurface="{editingSurface}"
									  visible="{bbPropertyPanel.selectedIndex==1}"/>
			<s:ButtonBar id="bbPropertyPanel" 
						 bottom="0" right="0" selectedIndex="0"
						 skinClass="skins.VisualEditorButtonBarSkin" requireSelection="true">
				<s:ArrayList>
					<fx:Object icon="@Embed('/assets/list.png')" label="" toolTip="Properties"/>
					<fx:Object icon="@Embed('/assets/organize.png')" label="" toolTip="Organize"/>
				</s:ArrayList>
			</s:ButtonBar>
		</s:Group>
	</collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup>
	<fx:Script><![CDATA[
		import mx.events.FlexEvent;
		
		import spark.components.Alert;
		
		import utils.CopyPasteVisualEditorManager;
		import utils.MoonshineBridgeUtils;
		
		import view.interfaces.IVisualEditorLibraryBridge;
		import view.suportClasses.events.VisualEditorEvent;

		private var copyPasteManager:CopyPasteVisualEditorManager;

		private var _file:FileReference;

		[Bindable]
		private var _visualEditorType:String;

		public function set visualEditorType(value:String):void
		{
			_visualEditorType = value;
		}

		CONFIG::MOONSHINE
		{
			import flash.filesystem.File;
			import flash.filesystem.FileStream;

			private var _fileMoonshine:File;
			private var _fileStreamMoonshine:FileStream;

			public function set moonshineBridge(value:IVisualEditorLibraryBridge):void
			{
				MoonshineBridgeUtils.moonshineBridge = propertyEditor.moonshineBridge = value;
			}
			
			public function set visualEditorFilePath(value:String):void
			{
				MoonshineBridgeUtils.currentFilePath = propertyEditor.visualEditorFilePath = value;
			}

			public function saveEditedFile():void
			{
				if (!_fileStreamMoonshine) return;

				var xml:XML = this.editingSurface.toXML();
				_fileStreamMoonshine.open(_fileMoonshine, FileMode.WRITE);
				_fileStreamMoonshine.writeUTFBytes(xml.toXMLString());
				_fileStreamMoonshine.close();
			}

			public function loadFile(filePath:String):void
			{
				_fileMoonshine = createNewFileIfNotExists(filePath);
				_fileStreamMoonshine = new FileStream();
				_fileStreamMoonshine.open(_fileMoonshine, FileMode.READ);

				var data:String = _fileStreamMoonshine.readUTFBytes(_fileMoonshine.size);
				var xml:XML = new XML(data);
				this.editingSurface.fromXML(xml);

				_fileStreamMoonshine.close();

				var xmlRootList:XMLList = xml.RootDiv.@save;
				if (xmlRootList.length() > 0)
				{
					var saveFile:Boolean = xmlRootList[0] == "true";
					if (saveFile)
					{
						dispatchEvent(new VisualEditorEvent(VisualEditorEvent.SAVE_CODE));
					}
				}
			}

			private function createNewFileIfNotExists(filePath:String):File
			{
				var tempFileMoonshine:File = new File(filePath);

				if (!tempFileMoonshine.exists)
				{
					var xml:XML = this.editingSurface.toXML();
					var tempFileStreamMoonshine:FileStream = new FileStream();
					tempFileStreamMoonshine.open(tempFileMoonshine, FileMode.WRITE);
					tempFileStreamMoonshine.writeUTFBytes(xml.toXMLString());
					tempFileStreamMoonshine.close();
				}

				return tempFileMoonshine;
			}

			public function duplicateSelectedElement():void
			{
				this.copyPasteManager.duplicate();
			}
		}

		private function newButton_clickHandler(event:MouseEvent):void
		{
			this.editingSurface.deleteAll();
		}

		private function loadButton_clickHandler(event:MouseEvent):void
		{
			this._file = new FileReference();
			this._file.addEventListener(Event.SELECT, loadFile_selectHandler);
			this._file.addEventListener(Event.CANCEL, loadFile_cancelHandler);
			this._file.browse();
		}

		private function loadFile_selectHandler(event:Event):void
		{
			this._file.removeEventListener(Event.SELECT, loadFile_selectHandler);
			this._file.removeEventListener(Event.CANCEL, loadFile_cancelHandler);
			this._file.addEventListener(Event.COMPLETE, loadFile_completeHandler);
			this._file.addEventListener(IOErrorEvent.IO_ERROR, loadFile_errorHandler);
			this._file.load();
		}

		private function loadFile_cancelHandler(event:Event):void
		{
			this._file = null;
		}

		private function loadFile_completeHandler(event:Event):void
		{
			var data:String = this._file.data.readUTFBytes(this._file.data.length);
			this._file.removeEventListener(Event.COMPLETE, loadFile_completeHandler);
			this._file.removeEventListener(IOErrorEvent.IO_ERROR, loadFile_errorHandler);
			this._file = null;
			var xml:XML = new XML(data);
			this.editingSurface.fromXML(xml);
		}

		private function loadFile_errorHandler(event:Event):void
		{
			this._file.removeEventListener(Event.COMPLETE, loadFile_completeHandler);
			this._file.removeEventListener(IOErrorEvent.IO_ERROR, loadFile_errorHandler);
			this._file = null;
			Alert.show("The file could not be loaded.", "Load Error");
		}

		private function saveButton_clickHandler(event:MouseEvent):void
		{
			this._file = new FileReference();
			var xml:XML = this.editingSurface.toXML();
			this._file.save(xml, "mockup.xml");
		}

		private function onVisualEditorCreationComplete(event:FlexEvent):void
		{
			this.copyPasteManager = new CopyPasteVisualEditorManager(this);

			CONFIG::MOONSHINE
			{
				toolbar.visible = toolbar.includeInLayout = false;
				toolbar.height = 1;
			}
		}
		]]></fx:Script>
</s:Group>
