<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<suportclasses:BasePropertyEditorForm
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:suportclasses="view.suportClasses.*"
        creationComplete="onCreationCompletes(event)" skinClass="skins.FormSkin" xmlns:forms="view.forms.*">
    <suportclasses:layout>
        <s:FormLayout />
    </suportclasses:layout>
    <s:FormItem label="{label}" skinClass="skins.StackedFormItemSkin">
		<forms:CustomDropDownList id="ddlSelection"
						requireSelection="true" width="100%"
						dataProvider="{includeCollection}" labelDisplayFunction="{labelDisplayFunction}" showTooltipFunction="{showTooltipFunction}"
						change="onSelectionChange(event)"
                        enabled="{bindableEnabled}"/>
    </s:FormItem>

    <fx:Script><![CDATA[
        import mx.binding.utils.BindingUtils;
        import mx.binding.utils.ChangeWatcher;
        import mx.collections.IList;
        import mx.events.FlexEvent;
        
        import spark.events.IndexChangeEvent;
        import utils.GenericUtils;
        import mx.collections.ArrayCollection;
 

        [Bindable]
        public var bindableEnabled:Boolean = true;

        [Bindable]
        public var includeCollection:IList;
        [Bindable]
        public var labelDisplayFunction:Function;
        [Bindable]
        public var showTooltipFunction:Function;

        public var listItemRenderer:Class;

        private var _bindingCollection:ChangeWatcher;
        private var _bindingSurfaceProperty:ChangeWatcher;
        private var _labelField:String;
        private var _valueField:String;

        public function set labelField(value:String):void
        {
            _labelField = value;
        }

        public function set valueField(value:String):void
        {
            _valueField = value;
        }

        private var _label:String = "Text";

        [Bindable("labelChange")]
        public function get label():String
        {
            return this._label;
        }

        public function set label(value:String):void
        {
            if (this._label === value)
            {
                return;
            }
            this._label = value;
            this.dispatchEvent(new Event("labelChange"));
        }

        private var _textProperty:String = "text";

        public function get textProperty():String
        {
            return this._textProperty;
        }

        public function set textProperty(value:String):void
        {
            if (this._textProperty === value)
            {
                return;
            }
            this._textProperty = value;
        }

        private var _collectionHost:*;
        public function set collectionHost(value:*):void
        {
            _collectionHost = value;
            updateBinding();
        }

        private var _collectionProperty:String;
        public function set collectionProperty(value:String):void
        {
            _collectionProperty = value;
        }

        protected function onCreationCompletes(event:FlexEvent):void
        {
            if (listItemRenderer) ddlSelection.itemRenderer = new ClassFactory(listItemRenderer);

            if (_labelField)
            {
                ddlSelection.labelField = _labelField;
            }

            ddlSelection.callLater(selectCurrentItem);

            updateBinding();
        }

        private function selectCurrentItem():void
        {
            
            if (includeCollection && selectedItem && selectedItem[_textProperty] && _labelField)
            {
                var dpCount:int = ddlSelection.dataProvider.length;
                for (var i:int = 0; i < dpCount; i++)
                {
                    var item:Object = ddlSelection.dataProvider.getItemAt(i);
                    if(_valueField&&item[_valueField].toString() == selectedItem[_textProperty].toString()){
                        ddlSelection.selectedItem = item;
                        
                        break;
                    }else if (item[_labelField] == selectedItem[_textProperty])
                    {
                        ddlSelection.selectedItem = item;
                        break;
                    }
                }
            }
            else if (selectedItem && selectedItem[_textProperty])
            {
                ddlSelection.selectedItem = selectedItem[_textProperty];
            }

            if (ddlSelection.selectedItem)
            {
                ddlSelection.callLater(onSelectionChange, [null]);
            }else{
                //if not found the select options , let the selcted item default for other
                if(_textProperty=="fontName"){
                    var item:Object={label: selectedItem[_textProperty],description: selectedItem[_textProperty],value:selectedItem[_textProperty],enabled:true,"selected": true};
                    includeCollection.addItem(item);
                    ddlSelection.selectedItem=item;
                }
              
                

            }
            
             var itemCache:Object =ddlSelection.selectedItem;

            if(includeCollection){
                var arry:ArrayCollection= new ArrayCollection(includeCollection.toArray());

                arry=GenericUtils.arrayCollectionSort(arry,"label",false);
                includeCollection=arry;
            }
            ddlSelection.selectedItem =itemCache;
        

        }

        protected function onSelectionChange(event:IndexChangeEvent):void
        {
            if(this.selectedItem && ddlSelection.selectedItem){
                if(_valueField){
                    if(ddlSelection.selectedItem[_valueField]){
                        this.selectedItem[_textProperty] = ddlSelection.selectedItem[_valueField].toString();
                    }
                }else if (_labelField)
                {
                    if(ddlSelection.selectedItem[_labelField]){
                        this.selectedItem[_textProperty] = ddlSelection.selectedItem[_labelField].toString();
                    }
                
                }
                else
                {
                    this.selectedItem[_textProperty] = ddlSelection.selectedItem.toString();
                }
            }
        }

        private function updateBinding():void
        {
            _collectionHost ||= selectedItem;
            if (!_collectionProperty || !(_collectionProperty in _collectionHost)) return;

            if (this._bindingCollection)
            {
                this._bindingCollection.unwatch();
                this._bindingSurfaceProperty.unwatch();
                this._bindingCollection = null;
                this._bindingSurfaceProperty = null;
            }
            if (this.selectedItem === null)
            {
                return;
            }
            this._bindingCollection = BindingUtils.bindProperty(this, "includeCollection", _collectionHost, _collectionProperty, false, true);
            this._bindingSurfaceProperty = BindingUtils.bindSetter(onPropertyUpdated, selectedItem, _textProperty, false, true);
        }

        private function onPropertyUpdated(value:Object):void
        {
            if (ddlSelection.selectedItem && selectedItem)
            {
                var previousValue:String = _labelField ? ddlSelection.selectedItem[_labelField].toString() : ddlSelection.selectedItem.toString();
                if (previousValue != selectedItem[_textProperty]) selectCurrentItem();
            }
        }


        public function getDdlSelectionSelectedItemText():String
        {
            return selectedItem[_textProperty] ;
        }
        ]]></fx:Script>
</suportclasses:BasePropertyEditorForm>
