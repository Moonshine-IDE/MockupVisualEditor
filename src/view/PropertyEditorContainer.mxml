<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	currentState="empty" skinClass="skins.PropertyEditorContainerSkin" xmlns:view="view.*">
	<s:layout>
		<s:VerticalLayout verticalAlign="top" horizontalAlign="left"
						  verticalAlign.empty="middle" horizontalAlign.empty="center" />
	</s:layout>
	<fx:Metadata>
		[Event(name="change",type="flash.events.Event")]
		[Event(name="propertyEditorChanged",type="view.suportClasses.events.PropertyEditorChangeEvent")]
		[Event(name="propertyEditorItemDeleting",type="view.suportClasses.events.PropertyEditorChangeEvent")]
	</fx:Metadata>

	<s:states>
		<s:State name="empty"/>
		<s:State name="selection"/>
	</s:states>
	
	<s:Label text="No component selected" excludeFrom="selection" left="0" right="0"/>
	<view:PropertyEditorHeader id="propertyEditorHeader" excludeFrom="empty"/>
	<s:Group id="editorHolder" percentWidth="100" excludeFrom="empty"/>

	<fx:Script><![CDATA[
		import view.flex.propertyEditors.GenericPropertyEditor;
		import view.interfaces.IPropertyEditor;
		import view.interfaces.ISurfaceComponent;
		import view.interfaces.IVisualEditorLibraryBridge;
		import mx.collections.ArrayList;
		import mx.controls.Alert;
		
        private var _editor:IPropertyEditor;

		 private var _subformsProEditor:ArrayList = new ArrayList();

        [Bindable("change")]
        public function get subformsProEditor():ArrayList
        {
		

            return this._subformsProEditor;
        }

        public function set subformsProEditor(value:ArrayList):void
        {	
			this._subformsProEditor = value;
		}


        private var _selectedItem:ISurfaceComponent = null;

        [Bindable("change")]
        public function get selectedItem():ISurfaceComponent
        {
            return this._selectedItem;
        }

        public function set selectedItem(value:ISurfaceComponent):void
        {
            if (this._selectedItem === value)
            {
                return;
            }
            this._selectedItem = value;
            if (this._editor)
            {
				editorHolder.removeElement(this._editor);
                this._editor = null;
            }
            if (this._selectedItem !== null)
            {
				if((this._selectedItem as Object).hasOwnProperty("subformsList")){
						this._selectedItem["subformsList"] = this.subformsProEditor;
				}
                this.currentState = "selection";
                var PropertyEditorType:Class = this._selectedItem.propertyEditorClass;
                if (PropertyEditorType === null)
                {
                    PropertyEditorType = GenericPropertyEditor;
                }
                this._editor = new PropertyEditorType();
                this._editor.top = 0;
                this._editor.right = 0;
                this._editor.bottom = 0;
                this._editor.left = 0;
                this._editor.selectedItem = value;

				
				if(this._editor.selectedItem){
					
				}

				editorHolder.addElement(this._editor);

				

				propertyEditorHeader.componentName = selectedItem["className"];
            }
            else
            {
                this.currentState = "empty";
				propertyEditorHeader.componentName = "";
            }
            this.dispatchEvent(new Event(Event.CHANGE));
        }
		
		private var _visualEditorFilePath:String;
		public function set visualEditorFilePath(value:String):void
		{
			_visualEditorFilePath = value;
		}
		public function get visualEditorFilePath():String
		{
			return _visualEditorFilePath;
		}
		
		private var _moonshineBridge:IVisualEditorLibraryBridge;
		public function set moonshineBridge(value:IVisualEditorLibraryBridge):void
		{
			_moonshineBridge = value;
		}
		public function get moonshineBridge():IVisualEditorLibraryBridge
		{
			return _moonshineBridge;
		}
        ]]></fx:Script>
</s:BorderContainer>
