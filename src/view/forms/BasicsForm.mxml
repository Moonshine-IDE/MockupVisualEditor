<?xml version="1.0" encoding="utf-8"?>
<suportclasses:BasePropertyEditorForm xmlns:fx="http://ns.adobe.com/mxml/2009"
									  xmlns:s="library://ns.adobe.com/flex/spark"
									  xmlns:suportclasses="view.suportClasses.*"
									  skinClass="skins.FormSkin"
									  creationComplete="onBasicFormCreationComplete(event)">

	<suportclasses:layout>
		<s:FormLayout />
	</suportclasses:layout>

	<s:FormHeading label="Position" skinClass="skins.FormHeadingSkin"/>
	<s:FormItem label="X" skinClass="skins.FormItemSkin">
		<s:TextInput id="xInput"
					 text="{selectedComponent.x}" skinClass="skins.TextInputSkin"
					 keyDown="xInput_keyDownHandler(event)" width="100%"
					 focusOut="commitX()" enter="commitX()" tabIndex="1"/>
	</s:FormItem>
	<s:FormItem label="Y" skinClass="skins.FormItemSkin" >
		<s:TextInput id="yInput"
					 text="{selectedComponent.y}" skinClass="skins.TextInputSkin"
					 keyDown="yInput_keyDownHandler(event)" width="100%"
					 focusOut="commitY()" enter="commitY()" tabIndex="2"/>
	</s:FormItem>
	<s:FormHeading label="Size" skinClass="skins.FormHeadingSkin"/>
	<s:FormItem label="Width" skinClass="skins.FormItemSkin">
		<s:TextInput id="widthInput"
					 text="{selectedComponentComputedWidth}" skinClass="skins.TextInputSkin"
					 keyDown="widthInput_keyDownHandler(event)" width="100%"
					 focusOut="commitWidth()" enter="commitWidth()" tabIndex="3"/>
	</s:FormItem>
	<s:FormItem label="Height" skinClass="skins.FormItemSkin">
		<s:TextInput id="heightInput"
					 text="{selectedComponentComputedHeight}" skinClass="skins.TextInputSkin"
					 keyDown="heightInput_keyDownHandler(event)" width="100%"
					 focusOut="commitHeight()" enter="commitHeight()" tabIndex="4"/>
	</s:FormItem>
	<s:FormHeading label="Layering" skinClass="skins.FormHeadingSkin"/>
	<s:Group>
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:Button styleName="bringToFrontButton" toolTip="Bring to Front"
				  click="bringToFrontButton_clickHandler(event)"/>
		<s:Button styleName="bringForwardButton" toolTip="Bring Forward"
				  click="bringForwardButton_clickHandler(event)"/>
		<s:Button styleName="sendBackwardButton" toolTip="Send Backward"
				  click="sendBackwardButton_clickHandler(event)"/>
		<s:Button styleName="sendToBackButton" toolTip="Send to Back" click="sendToBackButton_clickHandler(event)"/>
	</s:Group>

	<fx:Script><![CDATA[
		import mx.core.EventPriority;
		import mx.core.IVisualElement;
		import mx.core.IVisualElementContainer;
		import mx.core.UIComponent;
		import mx.events.FlexEvent;
		
		import utils.GenericUtils;

		CONFIG::MOONSHINE
		{
			private var tabDictionary:Array = [];
		}

		[Bindable("change")]
		private function get selectedComponent():UIComponent
		{
			//x, y, width, and height aren't bindable on interfaces used by
			//UIComponent, so we need to give the compiler a little hint here
			return UIComponent(this.selectedItem);
		}

		[Bindable("propertyEditorChanged")]
		public function get selectedComponentComputedWidth():String
		{
			if (!isNaN(selectedComponent.percentWidth)) return selectedComponent.percentWidth + "%";
			return selectedComponent.width.toString();
		}

		[Bindable("propertyEditorChanged")]
		public function get selectedComponentComputedHeight():String
		{
			if (!isNaN(selectedComponent.percentHeight)) return selectedComponent.percentHeight + "%";
			return selectedComponent.height.toString();
		}

		private function commitX():void
		{
			if (!this.selectedItem) return;

			this.selectedItem.x = parseFloat(this.xInput.text);
			this.xInput.selectAll();
		}

		private function commitY():void
		{
			if (!this.selectedItem) return;
			
			this.selectedItem.y = parseFloat(this.yInput.text);
			this.yInput.selectAll();
		}

		private function commitWidth():void
		{
			if (!this.selectedItem) return;

			if (this.widthInput.text.indexOf("%") != -1) GenericUtils.applyPercentageWidthHeight(this.selectedItem, this.widthInput.text, this.heightInput.text, true);
			else
			{
				var newWidth:Number = parseFloat(this.widthInput.text);
				this.widthInput.text = GenericUtils.applyMinAndMaxWidth(this.selectedItem, newWidth);
			}
			this.widthInput.selectAll();
		}

		private function commitHeight():void
		{
			if (!this.selectedItem) return;

			if (this.heightInput.text.indexOf("%") != -1) GenericUtils.applyPercentageWidthHeight(this.selectedItem, this.widthInput.text, this.heightInput.text, false);
			else
			{
				var newHeight:Number = parseFloat(this.heightInput.text);
				this.heightInput.text = GenericUtils.applyMinAndMaxHeight(this.selectedItem, newHeight);
			}
			this.heightInput.selectAll();
		}

		private function xInput_keyDownHandler(event:KeyboardEvent):void
		{
			if (event.keyCode === Keyboard.UP)
			{
				event.preventDefault();
				//this behavior matches how Animate CC increases x or y
				if (event.shiftKey)
				{
					this.selectedItem.x = Math.floor(parseFloat(this.xInput.text) / 10) * 10 + 10;
				}
				else
				{
					this.selectedItem.x = Math.floor(parseFloat(this.xInput.text)) + 1;
				}
				this.xInput.selectAll();
			}
			else if (event.keyCode === Keyboard.DOWN)
			{
				event.preventDefault();
				//this behavior matches how Animate CC decreases x or y
				if (event.shiftKey)
				{
					this.selectedItem.x = Math.ceil(parseFloat(this.xInput.text) / 10) * 10 - 10;
				}
				else
				{
					this.selectedItem.x = Math.ceil(parseFloat(this.xInput.text)) - 1;
				}
				this.xInput.selectAll();
			}
		}

		private function yInput_keyDownHandler(event:KeyboardEvent):void
		{
			if (event.keyCode === Keyboard.UP)
			{
				event.preventDefault();
				if (event.shiftKey)
				{
					this.selectedItem.y = Math.floor(parseFloat(this.yInput.text) / 10) * 10 + 10;
				}
				else
				{
					this.selectedItem.y = Math.floor(parseFloat(this.yInput.text)) + 1;
				}
				this.yInput.selectAll();
			}
			else if (event.keyCode === Keyboard.DOWN)
			{
				event.preventDefault();
				if (event.shiftKey)
				{
					this.selectedItem.y = Math.ceil(parseFloat(this.yInput.text) / 10) * 10 - 10;
				}
				else
				{
					this.selectedItem.y = Math.ceil(parseFloat(this.yInput.text)) - 1;
				}
				this.yInput.selectAll();
			}
		}

		private function widthInput_keyDownHandler(event:KeyboardEvent):void
		{
			if (event.keyCode === Keyboard.UP)
			{
				event.preventDefault();
				if (event.shiftKey)
				{
					var newWidth:Number = Math.floor(parseFloat(this.widthInput.text) / 10) * 10 + 10;
				}
				else
				{
					newWidth = Math.floor(parseFloat(this.widthInput.text)) + 1;
				}
				this.widthInput.text = GenericUtils.applyMinAndMaxWidth(this.selectedItem, newWidth);
				this.widthInput.selectAll();
			}
			else if (event.keyCode === Keyboard.DOWN)
			{
				event.preventDefault();
				if (event.shiftKey)
				{
					newWidth = Math.ceil(parseFloat(this.widthInput.text) / 10) * 10 - 10;
				}
				else
				{
					newWidth = Math.ceil(parseFloat(this.widthInput.text)) - 1;
				}
				this.widthInput.text = GenericUtils.applyMinAndMaxWidth(this.selectedItem, newWidth);
				this.widthInput.selectAll();
			}
		}

		private function heightInput_keyDownHandler(event:KeyboardEvent):void
		{
			if (event.keyCode === Keyboard.UP)
			{
				event.preventDefault();
				if (event.shiftKey)
				{
					var newHeight:Number = Math.floor(parseFloat(this.heightInput.text) / 10) * 10 + 10;
				}
				else
				{
					newHeight = Math.floor(parseFloat(this.heightInput.text)) + 1;
				}
				this.heightInput.text = GenericUtils.applyMinAndMaxHeight(this.selectedItem, newHeight);
				this.heightInput.selectAll();
			}
			else if (event.keyCode === Keyboard.DOWN)
			{
				event.preventDefault();
				if (event.shiftKey)
				{
					newHeight = Math.ceil(parseFloat(this.heightInput.text) / 10) * 10 - 10;
				}
				else
				{
					newHeight = Math.ceil(parseFloat(this.heightInput.text)) - 1;
				}
				this.heightInput.text = GenericUtils.applyMinAndMaxHeight(this.selectedItem, newHeight);
				this.heightInput.selectAll();
			}
		}

		private function bringToFrontButton_clickHandler(event:MouseEvent):void
		{
			var parent:IVisualElementContainer = IVisualElementContainer(this.selectedItem.parent);
			parent.setElementIndex(IVisualElement(this.selectedItem), parent.numElements - 1);
		}

		private function bringForwardButton_clickHandler(event:MouseEvent):void
		{
			var parent:IVisualElementContainer = IVisualElementContainer(this.selectedItem.parent);
			var oldIndex:int = parent.getElementIndex(IVisualElement(this.selectedItem));
			var maxIndex:int = parent.numElements - 1;
			if (oldIndex === maxIndex)
			{
				//we're already completely forward
				return;
			}
			parent.setElementIndex(IVisualElement(this.selectedItem), oldIndex + 1);
		}

		private function sendBackwardButton_clickHandler(event:MouseEvent):void
		{
			var parent:IVisualElementContainer = IVisualElementContainer(this.selectedItem.parent);
			var oldIndex:int = parent.getElementIndex(IVisualElement(this.selectedItem));
			if (oldIndex === 0)
			{
				//we're already completely backward
				return;
			}
			parent.setElementIndex(IVisualElement(this.selectedItem), oldIndex - 1);
		}

		private function sendToBackButton_clickHandler(event:MouseEvent):void
		{
			var parent:IVisualElementContainer = IVisualElementContainer(this.selectedItem.parent);
			parent.setElementIndex(IVisualElement(this.selectedItem), 0);
		}

		private function onBasicFormCreationComplete(event:FlexEvent):void
		{
			removeEventListener(FlexEvent.CREATION_COMPLETE, onBasicFormCreationComplete);

			_childrenForFocus = [];
			_childrenForFocus.push(xInput.textDisplay);
			_childrenForFocus.push(yInput.textDisplay);
			_childrenForFocus.push(widthInput.textDisplay);
			_childrenForFocus.push(heightInput.textDisplay);
		}
		]]></fx:Script>
</suportclasses:BasePropertyEditorForm>
