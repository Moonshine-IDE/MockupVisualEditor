<?xml version="1.0" encoding="utf-8"?>
<suportclasses:BasePropertyEditorForm
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:suportclasses="view.suportClasses.*"
        skinClass="skins.FormSkin"
        creationComplete="onTabFormCreationComplete(event)" xmlns:forms="view.forms.*">
	<fx:Script>
		<![CDATA[
			import data.ConstantsItems;
			import vo.SelectItem;

			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;

			import spark.events.GridItemEditorEvent;

			import view.interfaces.IHistorySurfaceComponent;
			import view.primeFaces.surfaceComponents.components.SelectOneRadio;
			import view.suportClasses.PropertyChangeReferenceCustomHandlerBasic;

			private static const DEFAULT_LABEL:String = "Title";
	
			private var _bindingColumns:ChangeWatcher;
			private var _label:String = "Items";
	
			[Bindable("labelChange")]
			public function get label():String
			{
				return this._label;
			}
	
			public function set label(value:String):void
			{
				if (this._label === value)
				{
					return;
				}
				this._label = value;
				this.dispatchEvent(new Event("labelChange"));
			}
	
			private function editSelectedItem():void
			{
				updatePropertyEditorPriorToEdit();
	
				dgColumns.ensureCellIsVisible(dgColumns.selectedIndex);
				dgColumns.startItemEditorSession(dgColumns.selectedIndex, 0);
			}
	
	
			private function addItemButton_clickHandler(event:MouseEvent):void
			{
				var listItem:SelectItem = new SelectItem();
				listItem.itemLabel = DEFAULT_LABEL;
				dgColumns.dataProvider.addItem(listItem);
	
				updateToOwner(ConstantsItems.ITEM_ADD);
	
				dgColumns.validateNow();
				dgColumns.setSelectedIndex(dgColumns.dataProvider.length - 1);
				callLater(editSelectedItem);
			}
	
			private function editItemButton_clickHandler(event:MouseEvent):void
			{
				this.editSelectedItem();
			}
	
			private function deleteItemButton_clickHandler(event:MouseEvent):void
			{
				updateToOwner(ConstantsItems.ITEM_DELETE, dgColumns.selectedIndex);
			}
	
			private function onTabFormCreationComplete(event:FlexEvent):void
			{
				updateColumnList();
				updateBinding();
	
				_childrenForFocus = [];
				_childrenForFocus.push(addDtColumnBtn);
				_childrenForFocus.push(editDtColumnBtn);
				_childrenForFocus.push(deleteDtColumnBtn);
			}
	
			private function updateColumnList():void
			{
				if (!dgColumns) return;
				ddlLayout.selectedIndex = (selectedItem as SelectOneRadio).columns > 0 ? 1 : 0;
				fiColumns.includeInLayout = fiColumns.visible = ((selectedItem as SelectOneRadio).columns > 0 ? true : false);
				
				dgColumns.dataProvider = (selectedItem as SelectOneRadio).items;
				amountOfColumns.value = (selectedItem as SelectOneRadio).columns;
			}
	
			private function updateToOwner(type:String, atIndex:int=-1):void
			{
				var radio:SelectOneRadio = (selectedItem as SelectOneRadio);
				radio.updateItems(type, atIndex);
			}
	
			private function updateBinding():void
			{
				if (this._bindingColumns)
				{
					this._bindingColumns.unwatch();
					this._bindingColumns = null;
				}
				if (this.selectedItem === null)
				{
					return;
				}
				this._bindingColumns = BindingUtils.bindSetter(onColumnsUpdated, selectedItem, "columns", false, true);
			}
	
			private function onColumnsUpdated(value:Object):void
			{
				if (selectedItem === null) return;
	
				updateColumnList();
			}
	
			protected function onRowEditEnd(event:GridItemEditorEvent):void
			{
				updateToOwner(ConstantsItems.ITEM_EDIT, dgColumns.selectedIndex);
			}
			
			private function updatePropertyEditorPriorToEdit():void
			{
				registerClassAlias("SelectItem", SelectItem);
				var historyObject:Object = {
					object: ObjectUtil.copy(dgColumns.dataProvider[dgColumns.selectedIndex]),
					index: dgColumns.selectedIndex
				};
				(selectedItem as SelectOneRadio).propertyChangeFieldReference = new PropertyChangeReferenceCustomHandlerBasic(selectedItem as IHistorySurfaceComponent, "updateItemAt", historyObject);
			}
	
			protected function onRowEditStarts(event:GridItemEditorEvent):void
			{
				updatePropertyEditorPriorToEdit();
			}
			
			private function onColumnUpdates():void
			{
				(selectedItem as SelectOneRadio).columns = amountOfColumns.value; 
				updateToOwner(null);
			}
			
			private function onLayoutUpdates():void
			{
				fiColumns.includeInLayout = fiColumns.visible = (ddlLayout.selectedIndex == 1);
				(selectedItem as SelectOneRadio).columns = (ddlLayout.selectedIndex == 1) ? 1 : 0;
				if (amountOfColumns) amountOfColumns.value = (selectedItem as SelectOneRadio).columns;
				updateToOwner(null);
			}
			
		]]>
	</fx:Script>
	
	<forms:TextForm label="Value" textProperty="value"
					prompt="#\{bean.property\}"/>
	
	<s:FormItem label="Layout" skinClass="skins.StackedFormItemSkin">
		<s:DropDownList id="ddlLayout" 
						width="100%" requireSelection="true"
						change="onLayoutUpdates()">
			<s:dataProvider>
				<s:ArrayList>
					<fx:String>Basic</fx:String>
					<fx:String>Grid</fx:String>
				</s:ArrayList>
			</s:dataProvider>
		</s:DropDownList>
	</s:FormItem>
	
	<s:FormItem id="fiColumns" 
				label="Columns" skinClass="skins.StackedFormItemSkin"
				visible="false" includeInLayout="false">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle"/>
		</s:layout>
		<s:NumericStepper id="amountOfColumns"
						  width="100%" minimum="1" stepSize="1" maximum="10"/>
		<s:Button id="btnUpdate" label="Update" height="25"
				  click="onColumnUpdates()"/>
	</s:FormItem>
	
    <s:FormItem label="{label}" skinClass="skins.StackedFormItemSkin" height="100%">
		<s:DataGrid id="dgColumns"
					width="100%" height="100%"
					editable="true" sortableColumns="false" draggableColumns="false"
					gridItemEditorSessionSave="onRowEditEnd(event)" gridItemEditorSessionStart="onRowEditStarts(event)">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="itemLabel" headerText="Title"/>
					<s:GridColumn dataField="itemValue" headerText="Value"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
        <s:HGroup>
            <s:Button id="addDtColumnBtn" width="100%" styleName="addDataProviderItemButton" toolTip="Add Item"
                      click="addItemButton_clickHandler(event)"/>
            <s:Button id="editDtColumnBtn" styleName="editDataProviderItemButton" toolTip="Edit Item"
					  enabled="{dgColumns.selectedIndex !== -1 &amp;&amp; dgColumns.dataProvider.length > 1}"
                      click="editItemButton_clickHandler(event)"/>
            <s:Button id="deleteDtColumnBtn" styleName="deleteDataProviderItemButton" toolTip="Delete Item"
                      enabled="{dgColumns.selectedIndex !== -1 &amp;&amp; dgColumns.dataProvider.length > 1}"
                      click="deleteItemButton_clickHandler(event)"/>
        </s:HGroup>
    </s:FormItem>
</suportclasses:BasePropertyEditorForm>