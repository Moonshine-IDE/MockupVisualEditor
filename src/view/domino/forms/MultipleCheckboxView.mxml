<?xml version="1.0"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<suportclasses:BasePropertyEditorForm xmlns:fx="http://ns.adobe.com/mxml/2009"
                                      xmlns:s="library://ns.adobe.com/flex/spark"
                                      xmlns:suportclasses="view.suportClasses.*"
                                      xmlns:mx="library://ns.adobe.com/flex/mx" 
                                      skinClass="skins.FormSkin"
                                      creationComplete="onCreationCompletes(event)"
                                      >

    <suportclasses:layout>
        <s:FormLayout />
    </suportclasses:layout>
    <fx:Script>
        <![CDATA[
            import mx.binding.utils.BindingUtils;
            import mx.binding.utils.ChangeWatcher;
            import mx.collections.IList;
            import mx.events.FlexEvent;
            import spark.components.Alert;
            import mx.collections.ArrayList;
            import view.domino.viewEditor.object.ColumnObject;
            import spark.events.IndexChangeEvent;
            import mx.controls.listClasses.ListBaseContentHolder;
            import view.suportClasses.events.DominoViewColumnUpdateEvent;
            [Bindable]
        public var includeCollection:IList;
        [Bindable]
        public var labelDisplayFunction:Function;
        [Bindable]
        public var showTooltipFunction:Function;

        [Bindable]
        public var optionExculdeFunction:Function;

        [Bindable]
        public var dynamicLabel:String="false";

        [Bindable]
        public var singleSelectOption:String=null;

        public var listItemRenderer:Class;

        private var widthOfContair:Number = 150;
        private var widthOfList:Number = 100 ;

        private var _bindingCollection:ChangeWatcher;
        private var _bindingSurfaceProperty:ChangeWatcher;
        private var _labelField:String;
        private var _valueField:String;

        private var _selectItemList:ArrayList = new ArrayList()

        
        private var selectedColumnObject:ColumnObject = null;
        

		public function  initalSelectedColumnObject(value:ColumnObject):void
		{
			if(selectedColumnObject === value)
			{
				return;
			}
			selectedColumnObject = value;
			
		}

       
        protected function onCreationCompletes(event:FlexEvent):void
        {
            
        }
        
        public function set labelField(value:String):void
        {
            _labelField = value;
        }

        public function set valueField(value:String):void
        {
            _valueField = value;
        }

        private var _label:String = "Text";

        [Bindable("labelChange")]
        public function get label():String
        {
            return this._label;
        }

        public function set label(value:String):void
        {
            if (this._label === value)
            {
                return;
            }
            this._label = value;
            this.dispatchEvent(new Event("labelChange"));
        }

        private var _textProperty:String = "text";

        public function get textProperty():String
        {
            return this._textProperty;
        }

        public function set textProperty(value:String):void
        {
            if (this._textProperty === value)
            {
                return;
            }
            this._textProperty = value;
        }

        private var _collectionHost:*;
        public function set collectionHost(value:*):void
        {
            _collectionHost = value;
            updateBinding();
        }

        private var _collectionProperty:String;
        public function set collectionProperty(value:String):void
        {
            _collectionProperty = value;
            
        }

        public function initializeMultiSelectOnCreateCompleted(value:ColumnObject):void
        {
            
            selectedColumnObject=value;
            updateBinding()
          
            
           
           if(selectedColumnObject[_textProperty]!=null && selectedColumnObject[_textProperty].length>0){
               if(dynamicLabel==="true"){
                    testPopUp.label=selectedColumnObject[_textProperty];
               }
           }
             
           
            //auto calculate for width 
           var listLen: Number= 0;
            for(var checkNum:Number = 0; checkNum < includeCollection.length; checkNum++)
            {
                var item:Object = includeCollection.getItemAt(checkNum);
                
                if(item && item.label &&item.label.length>listLen)
                {
                    listLen=item.label.length;
                }
                
            }
            

            var finalWidth:Number = listLen * 8;
            if(widthOfContair<finalWidth){
                widthOfContair = finalWidth;
            }
            widthOfList = widthOfContair -50;

           

        }

        
        private function initializeMultiSelect():void {
            
            var rex:RegExp = /[\s\r\n]+/gim;
            if (includeCollection && selectedColumnObject[_textProperty]){
                 var str:String = selectedColumnObject[_textProperty];
                 if(str.length>0){
                    var _iniList:Array=str.split(" ");
                    for (var j:int = 0; j < _iniList.length; j++){
                        if(_iniList[j]){
                            var elementStr:String = _iniList[j].toString();
                            if(elementStr){
                                elementStr = elementStr.replace(rex,'');
                                if(elementStr.length>0){
                                    for(var checkNum:Number = 0; checkNum < multCheckList.numChildren; checkNum++)
                                    {
                                        var item:Object = multCheckList.getChildAt(checkNum);
                                        if(item is ListBaseContentHolder){
                                            for (var i:int = 0; i < item.numChildren; i++){
                                                var checkitem:Object = item.getChildAt(i);
                                                if(checkitem.hasOwnProperty("selected") ){
                                                    if(checkitem.automationName==elementStr){
                                                        checkitem.selected=true
                                                    }
                                                    
                                                        var existing:Boolean = false;
                                                        if(_selectItemList){
                                                            for (var k:int = 0; k < _selectItemList.length; k++){
                                                                if(_selectItemList.getItemAt(k).toString()==elementStr){
                                                                    existing=true;
                                                                }
                                                            }
                                                        }
                                                        if(existing==false){
                                                            _selectItemList.addItem(elementStr);
                                                        }
                                                      
                                                     }
                                                
                                            }
                                        }
                                    }

                                }
                            }
                        }
                     }
                 }

            }

           

                        
        }

        private function selectCurrentItem(event:Event):void
        {
            
            _selectItemList = new ArrayList();
            var checkNum:int = 0;
            var item:Object = null;
            var signleOption:Boolean = false;
            var checkItem:Object = null;

            if(singleSelectOption!=null && singleSelectOption.length>0 ){
                if(event.target.hasOwnProperty("selected") && event.target.selected==true){
                    if(event.target.automationName==singleSelectOption){
                        signleOption = true;
                    }
                }
                
                
            }
            for(checkNum = 0; checkNum < multCheckList.numChildren; checkNum++)
            {
                 item = multCheckList.getChildAt(checkNum);
                 if(item is ListBaseContentHolder){
                    if(optionExculdeFunction != null){
                         optionExculdeFunction(item);
                     }
                 }
            }
            //Alert.show("Child:"+multCheckList.numChildren);
            for(checkNum = 0; checkNum < multCheckList.numChildren; checkNum++)
            {
                 item = multCheckList.getChildAt(checkNum);
                 if(item is ListBaseContentHolder){
                      for (var i:int = 0; i < item.numChildren; i++){
                          checkItem = item.getChildAt(i);

                          if(checkItem.hasOwnProperty("selected") && checkItem.selected==true)
                          {
                                var existing:Boolean = false;
                                for (var j:int = 0; j < _selectItemList.length; j++){
                                    if(_selectItemList.getItemAt(j).toString() == checkItem.automationName){
                                        existing=true;
                                    }
                                }
                                if(existing==false)
                                {
                                    _selectItemList.addItem(checkItem.automationName);
                                }
                          }
                           
                      }
                 }
            }
            if(singleSelectOption!=null && singleSelectOption.length>0 ){
                for(checkNum = 0; checkNum < multCheckList.numChildren; checkNum++)
                {
                    item = multCheckList.getChildAt(checkNum);
                    if(item is ListBaseContentHolder){
                        for (var i:int = 0; i < item.numChildren; i++){
                            checkItem = item.getChildAt(i);
                            
                            if(checkItem.hasOwnProperty("selected") && checkItem.selected==true){
                                if( signleOption ==true){
                                
                                    if(checkItem.automationName==singleSelectOption){
                                            
                                    }else{
                                        checkItem.selected = false;
                                        _selectItemList.removeItem(checkItem.automationName);
                                    }
                                    
                                    
                                }else{
                                     if(checkItem.automationName==singleSelectOption){
                                         checkItem.selected = false;
                                          _selectItemList.removeItem(checkItem.automationName);
                                     }
                                }
                            }
                        }
                    }
                }
            }
           

            //Alert.show("_selectItemList:"+_selectItemList.toString());
            if(_selectItemList.length>0){
                var str:String = "";
                for (var k:int = 0; k < _selectItemList.length; k++){
                    str = str+_selectItemList.getItemAt(k).toString() + " ";
                }
                selectedColumnObject[_textProperty] = str;
                if(dynamicLabel==="true"){
                    testPopUp.label=str;
                }
            }

             this.dispatchEvent(new DominoViewColumnUpdateEvent(DominoViewColumnUpdateEvent.COLUMN_UPDATE,this.selectedColumnObject,true, true) );
        }



        protected function onSelectionChange(event:IndexChangeEvent):void
        {
            
        }

        private function updateBinding():void
        {
            _collectionHost ||= selectedColumnObject;
            if (!_collectionProperty || !(_collectionProperty in _collectionHost)) return;

            if (this._bindingCollection)
            {
                this._bindingCollection.unwatch();
                this._bindingCollection = null;
             }
            if (selectedColumnObject === null)
            {
                return;
            }
            
           
        }

        private function onPropertyUpdated(value:Object):void
        {
           
        }

        protected function closeButtonClickHandler(event:MouseEvent):void {
            testPopUp.close();
        }
        protected function changeCheckBox(event:Event):void
        {
            selectCurrentItem(event);
        }
        ]]>
    </fx:Script>

           <mx:PopUpButton id="testPopUp"
                width="{widthOfContair}" label="{label}" >
                <mx:popUp >
                    <mx:VBox width="{widthOfContair}" backgroundColor="0xffffff" borderStyle="solid" borderColor="0x000000">
                        <mx:List id="multCheckList"
                                dataProvider="{includeCollection}"
                                height="{includeCollection.length * 25}"
                                width="{widthOfList}"
                                borderStyle="none"
                                click="changeCheckBox(event)"
                                creationComplete="initializeMultiSelect()"
                                >
                            <mx:itemRenderer>
                                <fx:Component>
                                    <mx:CheckBox height="20"  >
                                        <fx:Script>
                                            <![CDATA[
                                            import mx.controls.Alert;
                                           
                                            override public function set data(obj:Object):void
                                            {
                                                super.data = obj;
                                               
                                                if (obj && obj.label)
                                                {
                                                    super.label = obj.label;
                                                    super.automationName = obj.value;
                                                    super.selected = obj.selected;
                                                    super.enabled= obj.enabled;
                                                    
                                                }
                                            }
                                            ]]>
                                        </fx:Script>
                                    </mx:CheckBox>
                                </fx:Component>
                            </mx:itemRenderer>
                        </mx:List>
                        <mx:Button label="Close"
                                click="closeButtonClickHandler(event)" paddingBottom="5"
    paddingLeft="5"/>
                    </mx:VBox>
                </mx:popUp>
            </mx:PopUpButton> 
      
  

</suportclasses:BasePropertyEditorForm>