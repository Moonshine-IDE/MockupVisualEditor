<?xml version="1.0" encoding="utf-8"?>
<suportclasses:BasePropertyEditorForm
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:suportclasses="view.suportClasses.*"
        skinClass="skins.FormSkin"
        creationComplete="onTabFormCreationComplete(event)">

    <suportclasses:layout>
        <s:FormLayout horizontalAlign="contentJustify"/>
    </suportclasses:layout>

    <s:FormItem label="{label}" skinClass="skins.StackedFormItemSkin">
        <s:List id="itemsList" width="100%" height="100%"
                dragEnabled="true" dragMoveEnabled="true" dropEnabled="true"
                itemRenderer="view.primeFaces.forms.TabFormItemRenderer"
                change="itemsList_changeHandler(event)">
            <s:layout>
                <s:VerticalLayout gap="0" horizontalAlign="contentJustify"
                                  requestedRowCount="5" requestedMaxRowCount="5"/>
            </s:layout>
        </s:List>
        <s:Group>
            <s:layout>
                <s:HorizontalLayout/>
            </s:layout>
            <s:Button width="100%" styleName="addDataProviderItemButton" toolTip="Add Item"
                      click="addItemButton_clickHandler(event)"/>
            <s:Button styleName="editDataProviderItemButton" toolTip="Edit Item"
                      enabled="{itemsList.selectedIndex !== -1}"
                      click="editItemButton_clickHandler(event)"/>
            <s:Button styleName="deleteDataProviderItemButton" toolTip="Delete Item"
                      enabled="{itemsList.selectedIndex !== -1 &amp;&amp; itemsList.dataProvider.length > 1}"
                      click="deleteItemButton_clickHandler(event)"/>
        </s:Group>
    </s:FormItem>

    <fx:Script><![CDATA[
        import components.tabNavigator.TabNavigatorWithOrientation;

        import data.DataProviderListItem;

        import mx.collections.ArrayList;

        import mx.events.FlexEvent;

        import spark.components.DataGroup;
        import spark.components.NavigatorContent;
        import spark.containers.Navigator;
        import spark.events.IndexChangeEvent;

        import view.interfaces.ISelectableItemsComponent;

        [Bindable]
        private var itemsListDataProvider:ArrayList = new ArrayList();

        private var _label:String = "Items";

        [Bindable("labelChange")]
        public function get label():String
        {
            return this._label;
        }

        public function set label(value:String):void
        {
            if (this._label === value)
            {
                return;
            }
            this._label = value;
            this.dispatchEvent(new Event("labelChange"));
        }

        private function editSelectedItem():void
        {
            var item:DataProviderListItem = DataProviderListItem(this.itemsList.selectedItem);
            var group:DataGroup = this.itemsList.dataGroup;
            this.itemsList.ensureIndexIsVisible(this.itemsList.selectedIndex);
            this.itemsList.validateNow();

            var itemCount:int = group.numElements;
            for (var i:int = 0; i < itemCount; i++)
            {
                var itemRenderer:TabFormItemRenderer = group.getElementAt(i) as TabFormItemRenderer;
                if (!itemRenderer)
                {
                    continue;
                }
                if (itemRenderer.data === item)
                {
                    itemRenderer.startEditing();
                    break;
                }
            }
        }

        private function addItemButton_clickHandler(event:MouseEvent):void
        {
            var navContent:NavigatorContent = new NavigatorContent();
            navContent.label = "Title";

            var navigator:Navigator = (selectedItem as Navigator);
            navigator.addElement(navContent);
            var navigatorNumElements:int = navigator.numElements;

            var listItem:DataProviderListItem = new DataProviderListItem("Title");
            itemsListDataProvider.addItem(listItem);

            if (selectedItem is ISelectableItemsComponent)
            {
                ISelectableItemsComponent(selectedItem).selectedIndex = navigatorNumElements - 1;
            }

            this.itemsList.selectedIndex = navigatorNumElements - 1;
            this.editSelectedItem();
        }

        private function editItemButton_clickHandler(event:MouseEvent):void
        {
            this.editSelectedItem();
        }

        private function deleteItemButton_clickHandler(event:MouseEvent):void
        {
            var deleteIndex:int = itemsList.selectedIndex;

            var navigator:Navigator = (selectedItem as Navigator);
            if (navigator.numElements > 1)
            {
                navigator.removeItemAt(deleteIndex);
                itemsListDataProvider.removeItemAt(deleteIndex);
            }
        }

        private function itemsList_changeHandler(event:IndexChangeEvent):void
        {
            if (selectedItem is ISelectableItemsComponent)
            {
                ISelectableItemsComponent(selectedItem).selectedIndex = event.newIndex;
            }
        }

        private function onTabFormCreationComplete(event:FlexEvent):void
        {
            itemsList.addEventListener("editingFinished", onItemsListEditingFinished);

            var navigator:Navigator = (selectedItem as Navigator);
            var navigatorNumElements:int = navigator.numElements;

            for (var i:int = 0; i < navigatorNumElements; i++)
            {
                var tabItem:NavigatorContent = navigator.getElementAt(i) as NavigatorContent;
                var listItem:DataProviderListItem = new DataProviderListItem(tabItem.label);
                itemsListDataProvider.addItem(listItem);
            }

            itemsList.dataProvider = itemsListDataProvider;
        }

        private function onItemsListEditingFinished(event:Event):void
        {
            var listItem:DataProviderListItem = itemsList.selectedItem as DataProviderListItem;
            var navigator:TabNavigatorWithOrientation = (selectedItem as TabNavigatorWithOrientation);

            navigator.setSelectedTabLabel(listItem.label);
        }
        ]]></fx:Script>
</suportclasses:BasePropertyEditorForm>
