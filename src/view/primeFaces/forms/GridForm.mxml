<?xml version="1.0" encoding="utf-8"?>
<suportclasses:BasePropertyEditorForm
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:suportclasses="view.suportClasses.*"
        skinClass="skins.FormSkin"
        creationComplete="onGridFormCreationComplete(event)">
	<fx:Script>
		<![CDATA[
		import data.GridListItem;

		import mx.collections.ArrayList;
		import mx.containers.GridItem;
		import mx.containers.GridRow;
		import mx.events.FlexEvent;

		import spark.events.GridSelectionEvent;
		import spark.events.IndexChangeEvent;

		import view.primeFaces.surfaceComponents.components.Div;

		import view.primeFaces.surfaceComponents.components.Grid;

		[Bindable]
		private var rowsDataProvider:ArrayList = new ArrayList();
		[Bindable]
		private var columnsDataProvider:ArrayList;

		private var itemAdded:Boolean;

		private var _selectedCell:Div;

		[Bindable]
		public function get selectedCell():Div
		{
			return _selectedCell;
		}

		public function set selectedCell(value:Div):void
		{
			if (_selectedCell != value)
			{
				_selectedCell = value;
			}
		}

		private function addRowButton_clickHandler(event:MouseEvent):void
		{
            var itemValue:int = this.rowsDataProvider.length + 1;
			var rowItem:GridListItem = new GridListItem("R" + String(itemValue), itemValue);

			var columnItem:GridListItem = new GridListItem("C1", 1);
			rowItem.columns.addItem(columnItem);
			this.columnsDataProvider = rowItem.columns;

			this.rowsDataProvider.addItem(rowItem);

			var grid:Grid = (selectedItem as Grid);
			grid.addRow();

			this.itemAdded = true;
			this.dgRows.invalidateDisplayList();
			this.invalidateDisplayList();

			this.columnList.selectedIndex = rowItem.columns.length - 1;
			this.selectedCell = this.getSelectedCell();
		}

        private function addColumnButton_clickHandler(event:MouseEvent):void
        {
			var rowItem:GridListItem = dgRows.selectedItem as GridListItem;
			var colItemValue:int = rowItem.columns.length + 1;
			var colItem:GridListItem = new GridListItem("C" + colItemValue, colItemValue);

			rowItem.columns.addItem(colItem);
			this.columnsDataProvider = rowItem.columns;

			var grid:Grid = (selectedItem as Grid);
			grid.addColumn(dgRows.selectedIndex);
        }

		private function deleteItemButton_clickHandler(event:MouseEvent):void
		{
			if (this.rowsDataProvider.length > 1)
			{
				var grid:Grid = (selectedItem as Grid);
				grid.removeRow(dgRows.selectedIndex);

				this.rowsDataProvider.removeItemAt(dgRows.selectedIndex);
				dgRows.selectedIndex = 0;
				dgRows.ensureCellIsVisible(0);
				this.columnsDataProvider = this.rowsDataProvider.getItemAt(dgRows.selectedIndex).columns;

				this.columnList.selectedIndex = this.columnsDataProvider.length - 1;
				this.selectedCell = this.getSelectedCell();
			}
		}

        private function deleteColumnButton_clickHandler(event:MouseEvent):void
        {
			var grid:Grid = (selectedItem as Grid);
			grid.removeColumn(dgRows.selectedIndex, columnList.selectedIndex);

			var rowItem:GridListItem = dgRows.selectedItem as GridListItem;
			rowItem.columns.removeItemAt(columnList.selectedIndex);

			dgRows.selectedIndex = rowsDataProvider.length - 1;
			columnList.selectedIndex = columnsDataProvider.length - 1;

			this.selectedCell = this.getSelectedCell();
        }

		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			super.updateDisplayList(unscaledWidth, unscaledHeight);

			if (itemAdded)
			{
				dgRows.setSelectedIndex(dgRows.dataProvider.length - 1);
				this.itemAdded = false;
			}
		}

        private function onGridFormCreationComplete(event:FlexEvent):void
		{
			dgRows.columnHeaderGroup.visible = dgRows.columnHeaderGroup.includeInLayout = false;

			var grid:Grid = (selectedItem as Grid);
			var gridNumElements:int = grid.numElements;

			for (var row:int = 0; row < gridNumElements; row++)
			{
                var itemValue:int = row + 1;
				var rowItem:GridListItem = new GridListItem("R" + itemValue, itemValue);
				var gridItem:GridRow = grid.getElementAt(row) as GridRow;
				for (var col:int = 0; col < gridItem.numElements; col++)
				{
					itemValue = col + 1;
					rowItem.columns.addItem(new GridListItem(String("C" + itemValue), itemValue));
				}
				this.rowsDataProvider.addItem(rowItem);
			}

			this.columnsDataProvider = this.rowsDataProvider.getItemAt(0).columns;

			this.dgRows.selectedIndex = 0;
			this.columnList.selectedIndex = 0;

			this.selectedCell = this.getSelectedCell();
		}

		protected function onGridSelectionChanged(event:GridSelectionEvent):void
		{
			var gridListItem:GridListItem = dgRows.selectedItem as GridListItem;
			this.columnsDataProvider = gridListItem.columns;
			this.columnList.selectedIndex = gridListItem.columns.length - 1;

			this.selectedCell = this.getSelectedCell();
		}

		private function onColumnListChange(event:IndexChangeEvent):void
		{
			this.selectedCell = this.getSelectedCell();
		}

		private function getSelectedCell():Div
		{
			var grid:Grid = this.selectedItem as Grid;
			var gridRow:GridRow = grid.getElementAt(this.dgRows.selectedIndex) as GridRow;
			var gridItem:GridItem = gridRow.getElementAt(this.columnList.selectedIndex) as GridItem;

			return gridItem.getElementAt(0) as Div;
		}

		]]>
	</fx:Script>
    <suportclasses:layout>
        <s:FormLayout horizontalAlign="contentJustify"/>
    </suportclasses:layout>

    <s:FormItem label="Rows" skinClass="skins.StackedFormItemSkin">
		<s:DataGrid id="dgRows"
					width="100%" maxHeight="350"
					sortableColumns="false" draggableColumns="false"
					selectionChange="onGridSelectionChanged(event)"
		 			dataProvider="{rowsDataProvider}"> <!-- one column header with grid doesn't looks great, so we'll keep this as listing only -->
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="label" headerText="Row number"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
        <s:HGroup>
            <s:Button width="100%" styleName="addDataProviderItemButton" toolTip="Add Row"
                      click="addRowButton_clickHandler(event)"/>
            <s:Button styleName="deleteDataProviderItemButton" toolTip="Delete Item"
                      enabled="{dgRows.selectedIndex !== -1 &amp;&amp; dgRows.dataProvider.length > 1}"
                      click="deleteItemButton_clickHandler(event)"/>
        </s:HGroup>
    </s:FormItem>
	<s:FormItem label="Columns" skinClass="skins.StackedFormItemSkin">
		<s:List id="columnList" width="100%" height="30" labelField="label"
				dataProvider="{columnsDataProvider}" change="onColumnListChange(event)">
			<s:layout>
				<s:HorizontalLayout gap="2" horizontalAlign="left" verticalAlign="middle"/>
			</s:layout>
		</s:List>
		<s:HGroup>
			<s:Button width="100%" styleName="addDataProviderItemButton" toolTip="Add Column"
					  click="addColumnButton_clickHandler(event)"/>
			<s:Button styleName="deleteDataProviderItemButton" toolTip="Delete Column"
					  enabled="{columnList.selectedIndex !== -1 &amp;&amp; columnsDataProvider.length > 1}"
					  click="deleteColumnButton_clickHandler(event)"/>
		</s:HGroup>
	</s:FormItem>
</suportclasses:BasePropertyEditorForm>
