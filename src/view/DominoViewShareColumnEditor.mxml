<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:view="view.*" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:dataTable="view.primeFaces.surfaceComponents.components.DataTable"
		 xmlns:dropGrid="view.domino.viewEditor.grid.*"
		 creationComplete="onComplete()"
		 xmlns:viewProperty="view.domino.propertyEditors.*"
		 xmlns:collapsiblehdivider="components.collapsibleHDivider.*">
    <collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup percentWidth="100" bottom="0" top="0" gap="0" minWidth="250" id="dominoViewGroup">

				<s:DataGrid id="dgColumns"
					width="90%" height="100%" 
					editable="true" sortableColumns="false" 
					selectionMode="singleRow"
					horizontalScrollPolicy="auto"
					dragEnabled="false" dragMoveEnabled="false" dropEnabled="false"
					
					dataProvider="{rowsDataProvider}" click="onDataGridClick(event)">
                        <s:columns>
							<s:ArrayList>
							
							</s:ArrayList>
                          
                        </s:columns>
		       </s:DataGrid>	
			
                <s:Group  width="10%"  minWidth="250" minHeight="600" height="100%">
                        <s:VGroup horizontalAlign="left" verticalAlign="top" percentHeight="100" percentWidth="100"
                                    paddingLeft="0" paddingRight="0" id="dominoViewPropertyEditor">
                        	<view:PropertyEditorHeader id="propertyEditorHeader" width="100%" />
							
							
							<viewProperty:DominoShareColumnPropertyEdtior id="viewsharedColumnSetPanel" shareColumnObject="{shareColumnObject}"/>
							<viewProperty:DominoViewColumnPropertyEditor id="columnAccordion" columnObject="{selectedColumnObject}" width="100%"/>
							
							
							
							
					</s:VGroup>		   
                </s:Group>
	</collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup>

	<fx:Metadata>
		[Event(name="change",type="flash.events.Event")]
		[Event(name="propertyEditorChanged",type="view.suportClasses.events.PropertyEditorChangeEvent")]
	
	</fx:Metadata>

<fx:Script><![CDATA[

	import mx.events.FlexEvent;
	import mx.events.DataGridEvent;
    import flash.events.Event;
	import mx.events.DragEvent;
    import spark.events.IndexChangeEvent;
	import mx.collections.ArrayList;
	import utils.MoonshineBridgeUtils;
	import view.suportClasses.events.PropertyEditorChangeEvent;

	import view.interfaces.IVisualEditorLibraryBridge;
	import spark.components.Alert;
	import components.renderers.DominoViewEditorHeaderRenderer;

	import view.suportClasses.events.DominoViewColumnClickEvent;

	import flash.ui.ContextMenu;
    import flash.ui.ContextMenuItem;
	import flashx.textLayout.container.ScrollPolicy;

	import global.domino.DominoGlobals;

	import view.domino.viewEditor.object.ColumnObject;
	import view.domino.viewEditor.object.ShareColumnObject;
	import spark.components.gridClasses.GridColumn;

	import view.suportClasses.events.DominoViewColumnUpdateEvent;
	import view.suportClasses.events.DominoViewColumnDragDropCompleteEvent;
	import mx.utils.StringUtil;
	import mx.utils.ObjectUtil;
	import mx.utils.UIDUtil;
	import utils.DominoConvertUtils;

	import utils.DominoUtils;
	import spark.skins.spark.DefaultGridHeaderRenderer;
	import components.renderers.DominoViewEditorHeaderRenderer;
	

	

	private var viewFileName:String =  "" ;

	private var _hasChanged:Boolean = false;

	private var columnIndex:int = -1;

	private var selectedColumnName:String = "";
	private var selectedColumn:GridColumn = null;
	private var selectedColumnType:String = "";



	private var showColumns:Boolean = false;

	private var shareColumnObject:ShareColumnObject=null;

	private var columnObjectList:ArrayList = new ArrayList();
	private var selectedColumnObject:ColumnObject = null;
	private var selectedColumnIndex:int = -1;
	private var selectedColumnRender:DominoViewEditorHeaderRenderer = null;
	public function get hasChanged():Boolean
	{
		return _hasChanged;
	}

	public function set hasChanged(value:Boolean):void
	{
		if (_hasChanged != value)
		{
			_hasChanged = value;
			dispatchEvent(new Event(Event.CHANGE));
		}
	}

	

	public function setDominoViewGroupVisible(value:Boolean):void
	{
		if (this.dominoViewGroup) this.dominoViewGroup.visible = value;
	}

	
	


	

	private function dominoViewGridAddEmptyColumn():void
	{
		var tmpColumn:GridColumn=new GridColumn();
			tmpColumn.headerText="         ";
			tmpColumn.dataField="";
			
			dgColumns.columns.addItem(tmpColumn);

	}
	

  	[Bindable]
	private var rowsDataProvider:ArrayList = new ArrayList();


	protected function onRowDragStarts(event:DragEvent):void
    {
		
        //dgColumns.endItemEditorSession();
    }

    protected function onRowDragAndDropped(event:DragEvent):void
    {
		
        //dgColumns.callLater(updateToOwner, [true]);
		
    }

    private function updateToOwner(isAll:Boolean = false, updateType:String = null, itemIndex:int = -1):void
    {
       
    }

	
	
	public function onComplete():void {

		
		//inital the view columns

        propertyEditorHeader.componentName = "Domino View Shared Column";

		

		viewsharedColumnSetPanel.visible =viewsharedColumnSetPanel.includeInLayout = true;
		columnAccordion.visible =columnAccordion.includeInLayout = false;
		dgColumns.addEventListener(DominoViewColumnClickEvent.COLUMN_CLICK, viewColumnClick);
		

		//add property change listener
		
		

		dominoViewPropertyEditor.addEventListener("viewPropertyChanged", onDominoViewPropertyChanged);
		dominoViewPropertyEditor.addEventListener(DominoViewColumnUpdateEvent.COLUMN_UPDATE, onDominoViewColumnPropertyChanged);
		
		
	

		//onComplete
		dgColumns.addEventListener(DataGridEvent.COLUMN_STRETCH, columnResizeHandler);
    
    }

	private function columnResizeHandler(event:DataGridEvent):void {
		if(event.target is GridColumn){
			var gridColumn:GridColumn=event.target  as GridColumn;
			//convertPixelWidthToDominoCharacterWidth
			var colTextWidth:Number=DominoConvertUtils.convertDominoCharacterWidthToPixelWidth(Number(selectedColumnObject.columnTitleSize),selectedColumnObject.columnTitleFont,selectedColumnObject.columnTitleStyle,gridColumn.width);
			selectedColumnObject.columnWidth=colTextWidth.toString();
		
			
		}
	}

	
	public function viewColumnClick(event:DominoViewColumnClickEvent):void{
		showColumns=true;

		selectedColumnType="";
		
		viewsharedColumnSetPanel.visible =viewsharedColumnSetPanel.includeInLayout = false;
		columnAccordion.visible =columnAccordion.includeInLayout = true;
		var render:DominoViewEditorHeaderRenderer=event.render;
		if(event.columnInex>-1 && event.columnInex<=columnObjectList.length){
			if(selectedColumnRender){
				selectedColumnRender.selectedColumnUp();
			}
			if(render){
				render.selectedColumnDown();
			}

			selectedColumnRender=render;
			
			selectedColumnObject=columnObjectList.getItemAt(event.columnInex) as ColumnObject;
			selectedColumnIndex=event.columnInex;
			
			selectedColumn=(dgColumns.columns as ArrayList).getItemAt(event.columnInex) as GridColumn;
			if(selectedColumnObject!=null && selectedColumn!=null ){
				columnAccordion.initializeColumnProperty(selectedColumnObject);
			}
			
			
			
			
		}
		
		
	
	}

	private function onDataGridClick(event:MouseEvent):void
	{
		if(showColumns==false){
			viewsharedColumnSetPanel.visible =viewsharedColumnSetPanel.includeInLayout = true;
			columnAccordion.visible =columnAccordion.includeInLayout = false;
		}
		showColumns=false;
		
		
	}

	private function onDominoViewPropertyChanged(event:Event):void
	{
		dominoViewPropertyEditor.dispatchEvent(new PropertyEditorChangeEvent(PropertyEditorChangeEvent.PROPERTY_EDITOR_CHANGED, null));
		hasChanged=true;
	}

	private function onDominoViewColumnPropertyChanged(event:DominoViewColumnUpdateEvent):void
	{
		if(event.col!=null){
			var col:ColumnObject=event.col as ColumnObject;

		
			
			var index:int=columnObjectList.getItemIndex(selectedColumnObject);
			//some time the new column not add into columnObjectList

			if(index==-1){
				index=selectedColumnIndex;
			}
			
			columnObjectList.setItemAt(col,index);

			var gridColumn:GridColumn=(dgColumns.columns as ArrayList).getItemAt(index) as GridColumn;
			if(gridColumn.headerText!=col.columnHeaderTitle){
				gridColumn.headerText=col.columnHeaderTitle;
			}
			

			if(col.columnWidth!=null&& col.columnWidth.length>0){
				gridColumn.width=DominoConvertUtils.convertDominoCharacterWidthToPixelWidth(Number(col.columnTitleSize),col.columnTitleFont,col.columnTitleStyle,Number(col.columnWidth));
			}else{
				gridColumn.width=15;
			}
			
			(dgColumns.columns as ArrayList).setItemAt(gridColumn,index);
			
			dominoViewPropertyEditor.dispatchEvent(new PropertyEditorChangeEvent(PropertyEditorChangeEvent.PROPERTY_EDITOR_CHANGED, null));
			hasChanged=true;
		}
		
	}

	


	

	
	CONFIG::MOONSHINE
	{		
		
		import flash.filesystem.File;
		import flash.filesystem.FileStream;	
		import utils.StringHelper;
		import utils.DominoConvertUtils;
		import view.suportClasses.events.DominoViewUpdateEvent;

		private var _fileMoonshine:File;
		private var _fileStreamMoonshine:FileStream;

		public function set moonshineBridge(value:IVisualEditorLibraryBridge):void
		{
			MoonshineBridgeUtils.moonshineBridge = value;
		}
		
		public function set visualEditorFilePath(value:String):void
		{
			MoonshineBridgeUtils.currentFilePath = value;
		}

		public function get visualEditorFilePath():String
		{
			return _fileMoonshine.nativePath;
		}

		public function saveEditedFile():void
		{
			shareColumnObject=viewsharedColumnSetPanel.shareColumnObject;
			
			if (!_fileStreamMoonshine) return;
			if (!_fileMoonshine) return;
			if (!shareColumnObject) return;

			hasChanged=false;
			var xmlStr:String="<?xml version=\"1.0\" encoding=\"utf-8\"?>"+"\r\n";
			var xmlView:XML=new XML("<sharedcolumn />");

			xmlView.@name=shareColumnObject.shareColumnName;

			if(shareColumnObject.hideProperty){
				xmlView.@hide=shareColumnObject.hideProperty;
			}
			if (shareColumnObject.noreplace=="true"){
				xmlView.@noreplace="true";
			}else{
				xmlView.@noreplace="false";
			}
			

			if(shareColumnObject.propagatenoreplace=="true"){
				xmlView.@propagatenoreplace="true";
			}else{
				xmlView.@propagatenoreplace="false";
			}

			
			
			if(shareColumnObject.publicaccess=="true"){
				xmlView.@publicaccess="true";
			}else{
				xmlView.@publicaccess="false";
			}
			
			if(shareColumnObject.opencollapsed=="true"){
				xmlView.@opencollapsed="true";
			}else{
				xmlView.@opencollapsed="false";
			}
			
		
			

		

			for(var i:int=0; i<columnObjectList.length; i++)
			{
				
				var c:ColumnObject = columnObjectList.getItemAt(i) as  ColumnObject;
				var colXML:XML =DominoConvertUtils.convertColumnObjectToXML(c);
				xmlView.appendChild(colXML);
				
				
			}

			xmlStr=xmlStr+xmlView.toXMLString();
			
			_fileStreamMoonshine.open(_fileMoonshine, FileMode.WRITE);
			_fileStreamMoonshine.writeUTFBytes(xmlStr);
			_fileStreamMoonshine.close();

		   //after we modify the shared column we should update all view that  refence this 
			
			var filePathStr:String=_fileMoonshine.nativePath;
			var fileNameStr:String=_fileMoonshine.name;
			if(fileNameStr.indexOf(".column")>0){
				fileNameStr=fileNameStr.substring(0,fileNameStr.length-7)
			}
			fileNameStr=DominoUtils.toDominoViewNormalName(fileNameStr)
			var shareColumnFolderPath:String="SharedElements"+File.separator+"Columns"+File.separator+_fileMoonshine.name
			var parentPath:String=filePathStr.replace(shareColumnFolderPath,"");
			var viewPath:String=parentPath+"Views";
			var viewFolder:File = new File(viewPath);

			var viewFiles:Array = viewFolder.getDirectoryListing();
			for (var i:int=0; i < viewFiles.length; i++)
			{
				var viewXML:XML=loadLocalSingleFileToXML(viewFiles[i].nativePath);

				for each(var shareColumn:XML in viewXML..sharedcolumnref)
				{
					
					if(shareColumn.@name==fileNameStr){
						if(shareColumn.column[0]){
							delete shareColumn.column[0].parent().children()[shareColumn.column[0].childIndex()];
							shareColumn.appendChild(colXML);
							//save the last update xml string to view file.
							_fileStreamMoonshine.open(viewFiles[i], FileMode.WRITE);
							_fileStreamMoonshine.writeUTFBytes(viewXML.toXMLString());
							_fileStreamMoonshine.close();
							//Alert.show("filePathStr:"+filePathStr);

							dispatchEvent(new DominoViewUpdateEvent(DominoViewUpdateEvent.VIEW_UPDATE_AND_RELOAD, viewFiles[i].nativePath, true,true));
						}
						
					}
				}
			}
		}


		public function loadDxlFile():XML
		{
			var filePathStr:String=_fileMoonshine.nativePath;
			return loadLocalFileToXML(filePathStr)
		}

		private function loadLocalSingleFileToXML(filePath:String):XML
		{
			var file:File=new File(filePath);
			_fileStreamMoonshine = new FileStream();
			_fileStreamMoonshine.open(file, FileMode.READ);

			var data:String = _fileStreamMoonshine.readUTFBytes(file.size);
			var xml:XML = new XML(data);
			_fileStreamMoonshine.close();
			file=null;
			return xml
		}

		private function loadLocalFileToXML(filePath:String):XML
		{
			_fileMoonshine = createNewFileIfNotExists(filePath);
			return loadLocalSingleFileToXML(filePath);
		}

		public function loadFile(filePath:String):void
		{
			var xml:XML = loadLocalFileToXML(filePath);
			var name:String = getFileNameWithoutExtension(filePath,"view");
			
			if(xml!=null){
				
			
				for each(var col:XML in xml..column) //no matter of depth Note here
				{
				
					var colChilren:XMLList = col.children();
					var itemname:String= col.@itemname;
					if(colChilren.length() > 0)
					{
						var tmpColumn:GridColumn=new GridColumn();
						tmpColumn.headerText=col.columnheader.@title;
						

						tmpColumn.headerRenderer= new ClassFactory(DominoViewEditorHeaderRenderer);
						
						

						//inital the memory column object
						var columnsObj:ColumnObject=new ColumnObject();
						columnsObj.columnHeaderTitle=col.columnheader.@title;
						
						if(col.parent().name()=="sharedcolumn"){
							columnsObj.isSharedColumn=true;
							columnsObj.sharedColumnPath=col.parent().@sourcePath;
							columnsObj.sharedColumnName=col.parent().@name
						}

						if(col.@width!=null && col.@width.toString().length>0){
							columnsObj.columnWidth=col.@width;
							
						}else{
							columnsObj.columnWidth="15";
						}
						if(col.@categorized.toString().length==0){
							columnsObj.columnSortType="false";
						}else{
							columnsObj.columnSortType=col.@categorized;
						}
						if(col.@separatemultiplevalues.toString().length==0){
							columnsObj.separatemultiplevalues="false";
						}else{
							columnsObj.separatemultiplevalues=col.@separatemultiplevalues;
						}

						if(col.@sort.toString().length==0){
							columnsObj.columnSort="none";
						}else{
							columnsObj.columnSort=col.@sort;
						}
						if(col.@totals.toString().length==0){
							columnsObj.totals="none";
						}else{
							columnsObj.totals=col.@totals.toString();
						}

						if(col.@twisties.toString().length==0){
							
						}else{
							columnsObj.twisties=col.@twisties;
						}
						if(col.numberformat[0]){
							columnsObj.columnFormatStyle="number";
							if(col.numberformat[0].@format.toString().length>0){
								columnsObj.columnNumberFormat=col.numberformat[0].@format
							}else{
								columnsObj.columnNumberFormat="decimal"
							}

							if(col.numberformat[0].@bytes.toString().length>0){
								if(col.numberformat[0].@bytes=="true"){
									columnsObj.columnNumberFormatBytes="true";
								}else{
									columnsObj.columnNumberFormatBytes="false";
								}
							}

							if(col.numberformat[0].@punctuated.toString().length>0){
								columnsObj.columnNumberFormatPunctuated=col.numberformat[0].@punctuated;
							}else{
								columnsObj.columnNumberFormatPunctuated="false";
							}

							if(col.numberformat[0].@parens.toString().length>0){
								columnsObj.columnNumberFormatParens=col.numberformat[0].@parens;
							}else{
								columnsObj.columnNumberFormatParens="false";
							}

							if(col.numberformat[0].@percent.toString().length>0){
								columnsObj.columnNumberFormatPercent=col.numberformat[0].@percent;
							}else{
								columnsObj.columnNumberFormatPercent="false";
							}

							if(col.numberformat[0].@digits.toString().length>0){
								columnsObj.columnNumberFormatDigits=col.numberformat[0].@digits;
							}else{
								columnsObj.columnNumberFormatDigits="0";
							}

							if(col.numberformat[0].@preference.toString().length>0){
								columnsObj.columnNumberFormatPreference=col.numberformat[0].@preference;
							}else{
								columnsObj.columnNumberFormatPreference="usersetting";
							}

							if(col.numberformat[0].@currencysymtype.toString().length>0){
								columnsObj.columnNumberFormatCurrencysymtype=col.numberformat[0].@currencysymtype;
							}else{
								columnsObj.columnNumberFormatCurrencysymtype="usersetting";
							}

							if(col.numberformat[0].@currencysym.toString().length>0){
								columnsObj.columnNumberFormatCurrencysym=col.numberformat[0].@currencysym;
							}else{
								columnsObj.columnNumberFormatCurrencysym="$";
							}

							if(col.numberformat[0].@usecustomsym.toString().length>0){
								columnsObj.columnNumberFormatUsecustomsym=col.numberformat[0].@usecustomsym;
							}else{
								columnsObj.columnNumberFormatUsecustomsym="false";
							}
							if(col.numberformat[0].@decimalsym.toString().length>0){
								columnsObj.columnNumberFormatDecimalsym=col.numberformat[0].@decimalsym;
							}else{
								columnsObj.columnNumberFormatDecimalsym=".";
							}


							if(col.numberformat[0].@thousandssep.toString().length>0){
								columnsObj.columnNumberFormatThousandssep=col.numberformat[0].@thousandssep;
							}else{
								columnsObj.columnNumberFormatThousandssep=",";
							}

						}

						if(col.datetimeformat[0]){
							columnsObj.columnFormatStyle="datetime";
							if(col.datetimeformat[0].@show.toString().length>0){
								if(col.datetimeformat[0].@show=="datetime"){
									columnsObj.columnDateFormatDisplayDate="true";
									columnsObj.columnDateFormatDisplayTime="true";
								}else if(col.datetimeformat[0].@show=="date"){
									columnsObj.columnDateFormatDisplayDate="true";
								}else if(col.datetimeformat[0].@show=="time"){
									columnsObj.columnDateFormatDisplayTime="true";
								}
								
							}else{
								columnsObj.columnDateFormatDisplayDate="true";
								columnsObj.columnDateFormatDisplayTime="true";
							}

							if(col.datetimeformat[0].@date.toString().length>0){
								columnsObj.columnDateFormatDateShow=col.datetimeformat[0].@date;
							}else{
								columnsObj.columnDateFormatDateShow="monthdayyear";
							}

							var specialVal:String="";

							if(col.datetimeformat[0].@showtodaywhenappropriate=="true"){
								specialVal="showtodaywhenappropriate";
							}
							if(col.datetimeformat[0].@fourdigityear=="true"){
								specialVal=specialVal+" "+"fourdigityear";
							}
							if(col.datetimeformat[0].@fourdigityearfor21stcentury=="true"){
								specialVal=specialVal+" "+"fourdigityearfor21stcentury";
							}
							if(col.datetimeformat[0].@omitthisyear=="true"){
								specialVal=specialVal+" "+"omitthisyear";
							}

							if(specialVal.length>0){
								columnsObj.columnDateFormatSpecial=specialVal;
							}else{
								columnsObj.columnDateFormatSpecial="fourdigityearfor21stcentury";
							}

							if(col.datetimeformat[0].@calendar.toString().length>0){
								columnsObj.columnDateFormatCalendar=col.datetimeformat[0].@calendar;
							}else{
								columnsObj.columnDateFormatCalendar="monthdayyear";
							}

							if(col.datetimeformat[0].@dateformat.toString().length>0){
								columnsObj.columnDateFormatDateFormat=col.datetimeformat[0].@dateformat;
							}else{
								columnsObj.columnDateFormatDateFormat="weekdaymonthdayyear";
							}

							if(col.datetimeformat[0].@dateseparator1.toString().length>0){
								columnsObj.columnDateFormatDateseparator1=col.datetimeformat[0].@dateseparator1;
							}else{
								columnsObj.columnDateFormatDateseparator1=" ";
							}

							if(col.datetimeformat[0].@dateseparator2.toString().length>0){
								columnsObj.columnDateFormatDateseparator2=col.datetimeformat[0].@dateseparator2;
							}else{
								columnsObj.columnDateFormatDateseparator2="/";
							}

							if(col.datetimeformat[0].@preference.toString().length>0){
								columnsObj.columnDateDisplayFormatPreferences=col.datetimeformat[0].@preference;
							}else{
								columnsObj.columnDateDisplayFormatPreferences="usersetting";
							}


							if(col.datetimeformat[0].@dateseparator3.toString().length>0){
								columnsObj.columnDateFormatDateseparator3=col.datetimeformat[0].@dateseparator3;
							}else{
								columnsObj.columnDateFormatDateseparator3="/";
							}


							if(col.datetimeformat[0].@dayformat.toString().length>0){
								columnsObj.columnDateFormatDay=col.datetimeformat[0].@dayformat;
							}else{
								columnsObj.columnDateFormatDay="twodigitday";
							}

							if(col.datetimeformat[0].@monthformat.toString().length>0){
								columnsObj.columnDateFormatMonth=col.datetimeformat[0].@monthformat;
							}else{
								columnsObj.columnDateFormatMonth="twodigitmonth";
							}


							if(col.datetimeformat[0].@yearformat.toString().length>0){
								columnsObj.columnDateFormatYear=col.datetimeformat[0].@yearformat;
							}else{
								columnsObj.columnDateFormatYear="fourdigityear";
							}

							if(col.datetimeformat[0].@weekdayformat.toString().length>0){
								columnsObj.columnDateFormatWeekday=col.datetimeformat[0].@weekdayformat;
							}else{
								columnsObj.columnDateFormatWeekday="shortname";
							}



							if(col.datetimeformat[0].@time.toString().length>0){
								columnsObj.columnDateFormatTimeShow=col.datetimeformat[0].@time;
							}else{
								columnsObj.columnDateFormatTimeShow="hourminutesecond";
							}


							if(col.datetimeformat[0].@zone.toString().length>0){
								columnsObj.columnDateFormatTimeZone=col.datetimeformat[0].@zone;
							}else{
								columnsObj.columnDateFormatTimeZone="never";
							}


							if(col.datetimeformat[0].@timeformat24.toString().length>0){
								if(col.datetimeformat[0].@timeformat24=="true"){
									columnsObj.columnDateFormatTimeFormat="24";
								}
								
							}else{
								columnsObj.columnDateFormatTimeFormat="24";
							}

							if(col.datetimeformat[0].@timeformat12.toString().length>0){
								if(col.datetimeformat[0].@timeformat12=="true"){
									columnsObj.columnDateFormatTimeFormat="12";
								}
								
							}

							if(col.datetimeformat[0].@timeseparator.toString().length>0){
								columnsObj.columnDateFormatTimeSeparator=col.datetimeformat[0].@timeseparator;
							}else{
								columnsObj.columnDateFormatTimeSeparator=":";
							}

						


						}

						if(col.columnnamesformat[0]){
							columnsObj.columnFormatStyle="names";
							if(col.columnnamesformat[0].@columncontainsname.toString().length>0){
								columnsObj.columnNameContain=col.columnnamesformat[0].@columncontainsname;
							}else{
								columnsObj.columnNameContain="false";
							}

							if(col.columnnamesformat[0].@showonline.toString().length>0){
								columnsObj.columnNameStatus=col.columnnamesformat[0].@showonline;
							}else{
								columnsObj.columnNameStatus="false";
							}
							//@columnname

							if(col.columnnamesformat[0].@columnname.toString().length>0){
								columnsObj.columnNameProgramName=col.columnnamesformat[0].@columnname;
							}else{
								columnsObj.columnNameProgramName="";
							}
							//
							if(col.columnnamesformat[0].@verticalorientation.toString().length>0){
								columnsObj.columnNameVertival=col.columnnamesformat[0].@verticalorientation;
							}


						}

						if(col.font[0]){
							if(col.font[0].@name.toString().length>0){
								columnsObj.columnFont=col.font[0].@name.toString();
							}else{
								columnsObj.columnFont="sans-serif"
							}
							if(col.font[0].@style.toString().length>0){
								
								columnsObj.columnStyle=col.font[0].@style;
								
							}else{
								columnsObj.columnStyle="normal";
							}
							var colSizeLength:int=col.font[0].@size.toString().length;
							if(colSizeLength>0){
								columnsObj.columnSize=col.font[0].@size;
							}else{
								columnsObj.columnSize="9"
							}

							if(col.font[0].@color.toString().length>0){
								columnsObj.columnColor=col.font[0].@color.toString();
							
							}else{
								columnsObj.columnColor="#000000";
							}

						}
						if(col.columnheader[0]&&col.columnheader[0].font[0]){
								if(col.columnheader[0].font[0].@name.toString().length>0){
									columnsObj.columnTitleFont=col.columnheader[0].font[0].@name.toString();
								
								}else{
									columnsObj.columnTitleFont="sans-serif"
								}

								if(col.columnheader[0].font[0].@style.toString().length>0){
								
									columnsObj.columnTitleStyle=col.columnheader[0].font[0].@style;
								
								}else{
									columnsObj.columnTitleStyle="normal";
								}
								var sizeLength:int=col.columnheader[0].font[0].@size.toString().length;
								if(sizeLength>0){
									columnsObj.columnTitleSize=col.columnheader[0].font[0].@size;
								}else{
									columnsObj.columnTitleSize="9"
								}

								if(col.columnheader[0].font[0].@color.toString().length>0){
									columnsObj.columnTitleColor=col.columnheader[0].font[0].@color.toString();
								
								}else{
									columnsObj.columnTitleColor="#000000";
								}

								//convert width
								var columnWidth:Number=8;
								if(col.@width!=null && col.@width!=""){
									columnWidth=Number(col.@width);
								}
						
								tmpColumn.width=DominoConvertUtils.convertDominoCharacterWidthToPixelWidth(Number(columnsObj.columnTitleSize),columnsObj.columnTitleFont,columnsObj.columnTitleStyle,columnWidth);
								
								
							
						}
						//after the column header font & size get, then we can add the column width to Mooshine-IDE grid
						dgColumns.columns.addItem(tmpColumn);

						if(col.code.toString().length==0){
							columnsObj.columnTypeValue="Field";
							columnsObj.columnCodeFormula=col.@itemname
						}else{
							columnsObj.columnTypeValue="Formula";
							columnsObj.columnCodeFormula=col.code.formula;
						}
						//unid2
						columnsObj.columnUnid=UIDUtil.getUID(tmpColumn);
						columnObjectList.addItem(columnsObj);
						
						
					}
				}
				dominoViewGridAddEmptyColumn();
				
					
					
				
					shareColumnObject=new ShareColumnObject();
						if(xml.@name!=null && xml.@name.toString().length>0){
							shareColumnObject.shareColumnName=xml.@name;
						}else{
							shareColumnObject.shareColumnName=name;
						}
						if(xml.@hide!=null && xml.@hide.toString().length>0){
							shareColumnObject.hideProperty=xml.@hide;
						}
						if(xml.@noreplace!=null && xml.@noreplace.toString().length>0){
							shareColumnObject.noreplace=xml.@noreplace;
						}

						if(xml.@propagatenoreplace!=null && xml.@propagatenoreplace.toString().length>0){
							shareColumnObject.propagatenoreplace=xml.@propagatenoreplace;
						}
								
						
						if(xml.@publicaccess!=null && xml.@publicaccess!=""){
							shareColumnObject.publicaccess=xml.@publicaccess
						}else{
							shareColumnObject.publicaccess="false";
						}
						if(xml.@opencollapsed!=null && xml.@opencollapsed!=""){
							shareColumnObject.opencollapsed=xml.@opencollapsed
						}else{
							shareColumnObject.opencollapsed="false";
						}


					
						viewsharedColumnSetPanel.initializeViewProperty(shareColumnObject);

				
						
					
				

			}
			
		}

		


		private function createNewFileIfNotExists(filePath:String):File
		{
			var tempFileMoonshine:File = new File(filePath);

			if (!tempFileMoonshine.exists)
			{
				
				var xml:XML = new XML("<root/>");
				var tempFileStreamMoonshine:FileStream = new FileStream();
				tempFileStreamMoonshine.open(tempFileMoonshine, FileMode.WRITE);
				tempFileStreamMoonshine.writeUTFBytes(xml.toXMLString());
				tempFileStreamMoonshine.close();
			}

			return tempFileMoonshine;
		}

		

		private function getFileNameWithoutExtension(filePath:String,extension:String):String
        {
			var file:File = new File(filePath);
			
            var indexOfFileExtension:int = file.name.lastIndexOf(extension);
            return file.name.substr(0, indexOfFileExtension - 1);
        }
	}

			
		

]]></fx:Script> 
<fx:Declarations>
		<s:RadioButtonGroup id="columnValueType"/>
		<s:RadioButtonGroup id="columnSortOrder"/>
		<s:RadioButtonGroup id="columnSortType"/>
		
</fx:Declarations>		
</s:Group>         