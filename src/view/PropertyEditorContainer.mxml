<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	currentState="empty" skinClass="skins.PropertyEditorContainerSkin" xmlns:view="view.*">

	<fx:Metadata>
		[Event(name="change",type="flash.events.Event")]
		[Event(name="propertyEditorChanged",type="view.suportClasses.events.PropertyEditorChangeEvent")]
		[Event(name="propertyEditorItemDeleting",type="view.suportClasses.events.PropertyEditorChangeEvent")]
	</fx:Metadata>

	<s:states>
		<s:State name="empty"/>
		<s:State name="selection"/>
	</s:states>

	<s:Group id="noSelectionMessage" excludeFrom="selection"
		top="0" right="0" bottom="0" left="0">
		<s:layout>
			<s:VerticalLayout padding="10" horizontalAlign="center" verticalAlign="middle"/>
		</s:layout>
		<s:Label text="No component selected"/>
	</s:Group>
	<s:VGroup id="selectionHolder" excludeFrom="empty"
			  top="0" right="0" bottom="0" left="0">
		<view:PropertyEditorHeader componentName="{(selectedItem as Object).className}"/>
		<s:Scroller percentWidth="100" percentHeight="100">
			<s:Group id="editorHolder" 
					 width="100%"/>
		</s:Scroller>
	</s:VGroup>

	<fx:Script><![CDATA[
		import utils.MoonshineBridgeUtils;
		
		import view.flex.propertyEditors.GenericPropertyEditor;
		import view.interfaces.IPropertyEditor;
		import view.interfaces.ISurfaceComponent;
		import view.interfaces.IVisualEditorLibraryBridge;
		
        private var _editor:IPropertyEditor;

        private var _selectedItem:ISurfaceComponent = null;

        [Bindable("change")]
        public function get selectedItem():ISurfaceComponent
        {
            return this._selectedItem;
        }

        public function set selectedItem(value:ISurfaceComponent):void
        {
            if (this._selectedItem === value)
            {
                return;
            }
            this._selectedItem = value;
            if (this._editor)
            {
				editorHolder.removeElement(this._editor);
                this._editor = null;
            }
            if (this._selectedItem !== null)
            {
                this.currentState = "selection";
                var PropertyEditorType:Class = this._selectedItem.propertyEditorClass;
                if (PropertyEditorType === null)
                {
                    PropertyEditorType = GenericPropertyEditor;
                }
                this._editor = new PropertyEditorType();
                this._editor.top = 0;
                this._editor.right = 0;
                this._editor.bottom = 0;
                this._editor.left = 0;
                this._editor.selectedItem = value;
				editorHolder.addElement(this._editor);
            }
            else
            {
                this.currentState = "empty";
            }
            this.dispatchEvent(new Event(Event.CHANGE));
        }
		
		private var _visualEditorFilePath:String;
		public function set visualEditorFilePath(value:String):void
		{
			_visualEditorFilePath = value;
		}
		public function get visualEditorFilePath():String
		{
			return _visualEditorFilePath;
		}
		
		private var _moonshineBridge:IVisualEditorLibraryBridge;
		public function set moonshineBridge(value:IVisualEditorLibraryBridge):void
		{
			_moonshineBridge = value;
		}
		public function get moonshineBridge():IVisualEditorLibraryBridge
		{
			return _moonshineBridge;
		}
        ]]></fx:Script>
</s:BorderContainer>
