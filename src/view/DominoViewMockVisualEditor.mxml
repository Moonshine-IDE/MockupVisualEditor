<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:view="view.*" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:dataTable="view.primeFaces.surfaceComponents.components.DataTable"
		 creationComplete="onComplete()"
		 xmlns:collapsiblehdivider="components.collapsibleHDivider.*">
    <collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup percentWidth="100" bottom="0" top="0" gap="0" minWidth="250">
		 		<s:DataGrid id="dgColumns"
					width="90%" height="100%" requestedMinRowCount="4"
					editable="true" sortableColumns="false" draggableColumns="true"
					dragEnabled="true" dragMoveEnabled="true" dropEnabled="true"
					dragStart="onRowDragStarts(event)" dragDrop="onRowDragAndDropped(event)"
					dataProvider="{rowsDataProvider}" click="onDataGridClick(event)">
                        <s:columns>
                           <s:ArrayList>
								<s:GridColumn headerRenderer="components.renderers.DominoViewEditorHeaderRenderer" dataField="label"  headerText="Row number" id="column_0" />
							</s:ArrayList>
                        </s:columns>
		        </s:DataGrid>
                <s:Group  width="10%"  minWidth="250" minHeight="600" height="100%">
                        <s:VGroup horizontalAlign="left" verticalAlign="top" percentHeight="100" percentWidth="100"
                                    paddingLeft="0" paddingRight="0" id="dominoViewPropertyEditor">
                        	<view:PropertyEditorHeader id="propertyEditorHeader" width="100%" />
							
							<s:VGroup id="viewSetPanel" top="10" includeInLayout="false" visible="false">
								<s:FormItem  skinClass="skins.FormItemSkin" width="100%">
									<s:Label text="Viwe Name:" width="100%" />
									 <s:TextInput id="viewNameInput"
                                            text=""  width="100" maxChars="100" 
											editable="false"
                                            enter="viewNameInput_changeHandler(event)" focusOut="viewNameInput_changeHandler(event)" skinClass="skins.TextInputSkin" prompt="This is title for the action"/>
                                   
									 </s:FormItem> 
										<s:FormItem  skinClass="skins.FormItemSkin" width="100%">
										
										
											<s:Label text="Configuration(View):View Selection" width="100%" direction="rtl"/>
											<s:TextArea id="viewSelection"
											text="" width="100%" minWidth="156" editable="true" selectable="true"
											prompt="View Selection"
											change="viewFormula_changeHandler(event)"
											/>
										
											
										
										</s:FormItem> 
							</s:VGroup>
							
							
							<mx:Accordion id="columnAccordion" width="100%" height="100%" includeInLayout="false" visible="false">
							
								<mx:VBox  horizontalAlign="left" label="Column Setting-Basic" verticalAlign="top" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10" id="columnBasicSetPanel"  >	
		   								<s:FormItem  skinClass="skins.FormItemSkin" width="100%">
								<s:VGroup horizontalAlign="left" verticalAlign="top" percentHeight="100" paddingLeft="5" paddingTop="10" paddingBottom="10">
									<s:Label id="columnHeaderText"
											textAlign="start"
											verticalAlign="middle"
											fontWeight="bold"
											maxDisplayedLines="1" fontSize="13"
											left="5" right="0" top="5" verticalCenter="0" 
											text="Column Header Text"/>
									<s:TextInput id="titleInput"
                     						text=""  width="100" skinClass="skins.TextInputSkin" prompt="Column title"/>	
										
										<s:Label id="columnValue"
												textAlign="start"
												verticalAlign="middle"
												fontWeight="bold"
												maxDisplayedLines="1" fontSize="13"
												left="5" right="10" verticalCenter="0" 
												text="Width:"/>
										<s:TextInput id="columWidth"
										text="70"  width="100" skinClass="skins.TextInputSkin" prompt="Column width"/>	
										
										<s:HGroup>
											<s:RadioButton id="columnValueFieldRadioBtn" label="Field" groupName="columnValueType"/>
											<s:RadioButton id="columnValueFormulaRadioBtn" label="Formula" groupName="columnValueType" selected="true"/>	
										</s:HGroup>	
									 <s:TextArea id="columnValueFormula"
										text="SELECT $FormName = Form" width="100%" minWidth="156" editable="true" selectable="true"
										prompt="Formula for column value"
										/>

									 <s:FormItem label="Show twistie when row is expandable" skinClass="skins.FormItemSkin">
										<s:CheckBox id="check"
													selected="true"
													change="check_changeHandler(event)"/>
									</s:FormItem>		

										<s:Button id="newColumnBtn" label="Add Column"   height="25" width="100"  click="addColumn()"/>			
								</s:VGroup>
							
							 </s:FormItem> 
		   						</mx:VBox>

							<mx:VBox  horizontalAlign="left" id="columnSortSetPanel"  label="Column Setting-Sort Type" verticalAlign="top" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10"  >	
							</mx:VBox>
							<mx:VBox  horizontalAlign="left" id="columnFormatSetPanel" label="Column Setting-Format" verticalAlign="top" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10" >	
							</mx:VBox>
							<mx:VBox  horizontalAlign="left" id="columnFontSetPanel" label="Column Setting-Font" verticalAlign="top" percentHeight="100" 
		   paddingLeft="5" paddingTop="10" paddingBottom="10"  >	
							</mx:VBox>
							</mx:Accordion>
							
							
							
					</s:VGroup>		   
                </s:Group>
	</collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup>

	<fx:Metadata>
		[Event(name="change",type="flash.events.Event")]
		[Event(name="propertyEditorChanged",type="view.suportClasses.events.PropertyEditorChangeEvent")]
	
	</fx:Metadata>

<fx:Script><![CDATA[

	import mx.events.FlexEvent;
    import flash.events.Event;
	import mx.events.DragEvent;
    import spark.events.IndexChangeEvent;
	import mx.collections.ArrayList;
	import utils.MoonshineBridgeUtils;
	import view.suportClasses.events.PropertyEditorChangeEvent;

	import view.interfaces.IVisualEditorLibraryBridge;
	import spark.components.Alert;
	import components.renderers.DominoViewEditorHeaderRenderer;

	import view.suportClasses.events.DominoViewColumnClickEvent;

	private var viewFileName:String =  "" ;

	private var _hasChanged:Boolean = false;

	private var columnCount:int = 1;

	private var showColumns:Boolean = false;


	public function get hasChanged():Boolean
	{
		return _hasChanged;
	}

	public function set hasChanged(value:Boolean):void
	{
		if (_hasChanged != value)
		{
			_hasChanged = value;
			dispatchEvent(new Event(Event.CHANGE));
		}
	}

  	[Bindable]
	private var rowsDataProvider:ArrayList = new ArrayList();


	protected function onRowDragStarts(event:DragEvent):void
    {
        dgColumns.endItemEditorSession();
    }

    protected function onRowDragAndDropped(event:DragEvent):void
    {
        dgColumns.callLater(updateToOwner, [true]);
    }

    private function updateToOwner(isAll:Boolean = false, updateType:String = null, itemIndex:int = -1):void
    {
       
    }

	private function check_changeHandler(event:Event):void
	{
	}

	public function onComplete():void {

		//inital the view columns

        propertyEditorHeader.componentName = "Domino View";

		var initalCol:ArrayList = new ArrayList();
		var tmpColumn:GridColumn=new GridColumn();
		tmpColumn.headerText="#"
		tmpColumn.dataField="id"
		tmpColumn.width=30;
		tmpColumn.headerRenderer= new ClassFactory(DominoViewEditorHeaderRenderer);
		//add column click listener
		initalCol.addItem(tmpColumn);
		dgColumns.columns=initalCol;

		viewSetPanel.visible =viewSetPanel.includeInLayout = true;
		columnAccordion.visible =columnAccordion.includeInLayout = false;
		dgColumns.addEventListener(DominoViewColumnClickEvent.COLUMN_CLICK, viewColumnClick);
		

		//add property change listener
		//dominoViewPropertyEditor.addEventListener("viewFormulaChanged", onDominoViewPropertyChanged);
    
		
    }

	
	public function viewColumnClick(event:DominoViewColumnClickEvent):void{
		showColumns=true;
		
		viewSetPanel.visible =viewSetPanel.includeInLayout = false;
		columnAccordion.visible =columnAccordion.includeInLayout = true;
		//loading the column setting to property
		if(event.value){
			var xml:XML=loadLocalFileToXML(MoonshineBridgeUtils.currentFilePath);
			if(xml!=null){
				var columnHeaderxml:XML=xml.column.columnheader.(@title==event.value)[0];
				if(columnHeaderxml!=null){
					titleInput.text=columnHeaderxml.@title;
					var column:XML=columnHeaderxml.parent();

					if(column!=null){
						
						if(column.code==null || column.code.toString()=="" ){
							columnValueType.selectedValue="Field"
							columnValueFieldRadioBtn.selected=true;
							columnValueFormulaRadioBtn.selected=false;
							columnValueFormula.text=column.@itemname;
						}else{

							columnValueType.selectedValue="Formula"
							columnValueFormulaRadioBtn.selected=true;
							columnValueFieldRadioBtn.selected=false;
							columnValueFormula.text=column.code.formula;

						}
					}
				}
				
			}

		}
		
		
	
	}

	private function onDataGridClick(event:MouseEvent):void
	{
		if(showColumns==false){
			viewSetPanel.visible =viewSetPanel.includeInLayout = true;
			columnAccordion.visible =columnAccordion.includeInLayout = false;
		}
		showColumns=false;
		
		
	}

	private function onDominoViewPropertyChanged(event:Event):void
	{
		dominoViewPropertyEditor.dispatchEvent(new PropertyEditorChangeEvent(PropertyEditorChangeEvent.PROPERTY_EDITOR_CHANGED, null));
		Alert.show("onDominoViewPropertyChanged:");
		//dispatchEvent(new Event("propertyEditorChanged", true));
	}

	private function addColumn():void 
	{

		if(titleInput.text==null || titleInput.text.length==0){
			Alert.show("You must should input the column title name at first.");
		} else {
			var columnXML:XML=new XML("<column width='30'/> ");
			var codeXML:XML=null;
			columnXML.@sort="ascending";
			var preFix:String="";
			if (columnValueType.selectedValue=="Field"){
				preFix="FormFile:";
				columnXML.@itemname=titleInput.text;
			}else  if(columnValueType.selectedValue=="Formula"){
				preFix="Formula:";
				codeXML=new XML("<code/>");
				codeXML.@event="value";
				var codeFormulaXML:XML=new XML("<formula>"+columnValueFormula.text+"</formula>");
				codeXML.appendChild(codeFormulaXML);
			}
			var tmpColumn:GridColumn=new GridColumn();
			tmpColumn.headerText=titleInput.text;
			tmpColumn.dataField=encodeBase64ForColumnDataField(preFix,columnValueFormula.text);
						
			dgColumns.columns.addItem(tmpColumn);
			
			hasChanged=true;

			var xml:XML=loadLocalFileToXML(MoonshineBridgeUtils.currentFilePath);
			if(xml!=null){
				xml=xml.replace("$ViewName","NewView");
				var columnHeaderXML:XML=new XML("<columnheader/> ");
				columnHeaderXML.@title=titleInput.text;
				var columnHeaderFontXML:XML = new XML("<font/>");
				columnHeaderFontXML.@size="9pt";
				columnHeaderFontXML.@style="bold";
				columnHeaderXML.appendChild(columnHeaderFontXML);

				columnXML.appendChild(columnHeaderXML);
				if(codeXML!=null){
					columnXML.appendChild(codeXML);
				}

				xml.appendChild(columnXML);

				_fileStreamMoonshine.open(_fileMoonshine, FileMode.WRITE);
				_fileStreamMoonshine.writeUTFBytes(xml.toXMLString());
				_fileStreamMoonshine.close();
				

			}
		}

		

	}

	[Bindable("Changed")]
	private function viewNameInput_changeHandler(event:Event):void
	{
	}

	 private var viewFormula:String = "";

	[Bindable("Changed")]
	private function viewFormula_changeHandler(event:Event):void
	{
		viewFormula=columnValueFormula.text;
		dominoViewPropertyEditor.dispatchEvent(new PropertyEditorChangeEvent(PropertyEditorChangeEvent.PROPERTY_EDITOR_CHANGED, null));
		hasChanged=true;
	}

	

	CONFIG::MOONSHINE
	{		
		
		import flash.filesystem.File;
		import flash.filesystem.FileStream;	
		import utils.StringHelper;

		private var _fileMoonshine:File;
		private var _fileStreamMoonshine:FileStream;

		public function set moonshineBridge(value:IVisualEditorLibraryBridge):void
		{
			MoonshineBridgeUtils.moonshineBridge = value;
		}
		
		public function set visualEditorFilePath(value:String):void
		{
			MoonshineBridgeUtils.currentFilePath = value;
		}

		public function get visualEditorFilePath():String
		{
			return _fileMoonshine.nativePath;
		}

		public function saveEditedFile():void
		{
			
			if (!_fileStreamMoonshine) return;
			if (!_fileMoonshine) return;

			hasChanged=false;

			var xml:XML = loadLocalFileToXML(MoonshineBridgeUtils.currentFilePath);
			var codeNode:XML=xml.code.(@event=="selection")[0];
			if(codeNode){
				if(codeNode.formula){
					if(viewSelection.text){
						codeNode.formula=viewSelection.text;
					}
					
				}
			}

			_fileStreamMoonshine.open(_fileMoonshine, FileMode.WRITE);
			_fileStreamMoonshine.writeUTFBytes(xml.toXMLString());
			_fileStreamMoonshine.close();

		
			

		
		}

		private function loadLocalFileToXML(filePath:String):XML
		{
			_fileMoonshine = createNewFileIfNotExists(filePath);
			_fileStreamMoonshine = new FileStream();
			_fileStreamMoonshine.open(_fileMoonshine, FileMode.READ);

			var data:String = _fileStreamMoonshine.readUTFBytes(_fileMoonshine.size);
			var xml:XML = new XML(data);
			_fileStreamMoonshine.close();

			return xml;
		}

		public function loadFile(filePath:String):void
		{
			var xml:XML = loadLocalFileToXML(filePath);
			var name:String = getFileNameWithoutExtension(filePath,"view");
			viewNameInput.text=name;
			if(xml!=null){
				for each(var col:XML in xml..column) //no matter of depth Note here
				{
				
					var colChilren:XMLList = col.children();
					var itemname:String= col.@itemname;
					if(colChilren.length() > 0)
					{
						var tmpColumn:GridColumn=new GridColumn();
						tmpColumn.headerText=col.columnheader.@title;
						if(itemname!=null&& itemname.indexOf("$")<0){
							tmpColumn.dataField=encodeBase64ForColumnDataField("formField",itemname);
						}else{
							var formula:String=getColumnFormula(col);
							if(formula!=null&& formula.length>0){
								tmpColumn.dataField=encodeBase64ForColumnDataField("formula",formula);
							}
							
						}

						tmpColumn.headerRenderer= new ClassFactory(DominoViewEditorHeaderRenderer);
						
						dgColumns.columns.addItem(tmpColumn);
						
					}
				}
			//inital the view select formla
			var selectFormula:XML= xml.code.(@event=="selection")[0];
			if(selectFormula){
				var formulaXml:XML=selectFormula.formula[0];
				if(formulaXml){
					if(formulaXml.text())
					viewSelection.text=formulaXml.text();
				}
			}

			}
		
		

			

			
		}

		//This method will get the formula and base64 for column
		private function getColumnFormula(column:XML):String 
		{
			var formula:String="";
			if(column.code!=null){
				if(column.code.formula!=null){
					formula=StringHelper.base64Encode(column.code.formula.text());
				}
			}

			return formula;

		}

		private function encodeBase64ForColumnDataField(dataFieldType:String,dataFieldValue:String):String 
		{
			var encodeDataField:String="";
			if(dataFieldType=="formField"){
				encodeDataField="FormFile:"
			}
			if(dataFieldType=="formula"){
				encodeDataField="Formula:"
			}
			encodeDataField=encodeDataField+dataFieldValue;
			encodeDataField=StringHelper.base64Encode(encodeDataField);
			return encodeDataField;

		}

		private function createNewFileIfNotExists(filePath:String):File
		{
			var tempFileMoonshine:File = new File(filePath);

			if (!tempFileMoonshine.exists)
			{
				
				var xml:XML = new XML("<root/>");
				var tempFileStreamMoonshine:FileStream = new FileStream();
				tempFileStreamMoonshine.open(tempFileMoonshine, FileMode.WRITE);
				tempFileStreamMoonshine.writeUTFBytes(xml.toXMLString());
				tempFileStreamMoonshine.close();
			}

			return tempFileMoonshine;
		}

		

		private function getFileNameWithoutExtension(filePath:String,extension:String):String
        {
			var file:File = new File(filePath);
			
            var indexOfFileExtension:int = file.name.lastIndexOf(extension);
            return file.name.substr(0, indexOfFileExtension - 1);
        }
	}

			
		

]]></fx:Script> 
<fx:Declarations>
		<s:RadioButtonGroup id="columnValueType"/>
</fx:Declarations>		
</s:Group>         