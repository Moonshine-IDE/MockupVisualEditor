<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	alpha.disabledStates=".5" creationComplete="init()">

	<fx:Metadata>
		[HostComponent("spark.components.FormItem")]
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
        <![CDATA[
		public function init():void {
			requiredToolTip = resourceManager.getString("components","formItemRequired");
		}

		private var _requiredToolTip:String;
		/**
		 *  The tooltip of the label showing when the component is required but nothing has been entered.
		 *  Subclasses can set or override this property to customize the selected label.
		 *
		 *  @langversion 3.0
		 *  @playerversion AIR 3
		 *  @productversion Flex 4.11
		 */
		[Bindable]
		protected function get requiredToolTip():String
		{
			return _requiredToolTip;
		}

		protected function set requiredToolTip(value:String):void
		{
			_requiredToolTip = value;
		}

		/**
		 *  @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
		{
			// Push backgroundColor and backgroundAlpha directly.
			// Handle undefined backgroundColor by hiding the background object.
			if (isNaN(getStyle("backgroundColor")))
			{
				background.visible = false;
			}
			else
			{
				background.visible = true;
				bgFill.color = getStyle("backgroundColor");
				bgFill.alpha = getStyle("backgroundAlpha");
			}

			var indicatorSource:Object;
			if (currentState == "error" || currentState == "requiredAndError")
				indicatorSource = getStyle("errorIndicatorSource");
			else if (currentState == "required" || "requiredAndDisabled")
				indicatorSource = getStyle("requiredIndicatorSource");

			if (indicatorSource && indicatorDisplay)
			{
				indicatorDisplay.source = indicatorSource;
			}

			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}

		/**
		 *  @private
		 */
		override public function setCurrentState(stateName:String, playTransition:Boolean=true):void
		{
			super.setCurrentState(stateName, playTransition);
			invalidateDisplayList();
		}
		]]>        
    </fx:Script>

	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" stateGroups="disabledStates"/>
		<s:State name="error" stateGroups="errorStates"/>
		<s:State name="required" stateGroups="requiredStates"/>
		<s:State name="requiredAndDisabled" stateGroups="requiredStates, disabledStates"/>
		<s:State name="requiredAndError" stateGroups="requiredStates, errorStates"/>
	</s:states>

	<s:layout>
		<s:FormItemLayout>
			<s:constraintColumns>
				<!--- The column containing the sequence label. -->
				<s:ConstraintColumn id="sequenceCol" width="0"/>
				<!--- The column containing the FormItem's label. -->
				<s:ConstraintColumn id="labelCol" />
				<!--- The column containing the FormItem's content. -->
				<s:ConstraintColumn id="contentCol" width="100%"/>
				<!--- The column containing the FormItem's help content. -->
				<s:ConstraintColumn id="helpCol" maxWidth="200" width="0"/>
			</s:constraintColumns>
			<s:constraintRows>
				<!--- @private -->
				<s:ConstraintRow id="row1" baseline="maxAscent:2"/>
				<s:ConstraintRow id="row2" baseline="maxAscent:2" height="100%"/>
			</s:constraintRows>
		</s:FormItemLayout>
	</s:layout>

	<!--- Defines the appearance of the FormItem's background. -->
	<s:Rect id="background" left="0" right="0" top="0" bottom="0">
		<s:fill>
			<!--- @private -->
			<s:SolidColor id="bgFill" color="#FFFFFF"/>
		</s:fill>
	</s:Rect>

	<!--- @copy spark.components.FormItem#labelDisplay -->
	<s:Label id="labelDisplay"
		fontWeight="bold"
		left="labelCol:0" right="contentCol:5"
		bottom="row1:2" baseline="row1:0"/>
	<!--- @copy spark.components.SkinnableContainer#contentGroup -->
	<s:Group id="contentGroup" showErrorTip="false" showErrorSkin="true"
		left="labelCol:0" right="contentCol:1"
		top="row2:0" bottom="row2:2" baseline="row2:0">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
	</s:Group>
	<!-- Don't include the indicator in layout since we position it ourselves -->
	<s:Group x="{contentGroup.x + contentGroup.contentWidth + 4}" y="{contentGroup.y}"
		height="{Math.max(indicatorDisplay.height, contentGroup.contentHeight)}" includeInLayout="false">
		<!--- @private -->
		<s:Image id="indicatorDisplay" verticalCenter="0"
			toolTip="{requiredToolTip}" toolTip.errorStates=""
			includeIn="requiredStates,errorStates"/>
	</s:Group>
</s:Skin>